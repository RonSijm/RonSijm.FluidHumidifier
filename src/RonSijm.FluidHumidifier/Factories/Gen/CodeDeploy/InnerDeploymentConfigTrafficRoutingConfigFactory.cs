// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.CodeDeploy;

public class InnerDeploymentConfigTrafficRoutingConfigFactory(Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig> factoryAction = null) : SubResourceFactory<Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig>
{

    internal InnerDeploymentConfigTimeBasedLinearFactory TimeBasedLinearFactory { get; set; }

    internal InnerDeploymentConfigTimeBasedCanaryFactory TimeBasedCanaryFactory { get; set; }

    protected override Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig Create()
    {
        var trafficRoutingConfigResult = CreateTrafficRoutingConfig();
        factoryAction?.Invoke(trafficRoutingConfigResult);

        return trafficRoutingConfigResult;
    }

    private Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig CreateTrafficRoutingConfig()
    {
        var trafficRoutingConfigResult = new Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig();

        return trafficRoutingConfigResult;
    }
    public override void CreateChildren(Humidifier.CodeDeploy.DeploymentConfigTypes.TrafficRoutingConfig result)
    {
        base.CreateChildren(result);

        result.TimeBasedLinear ??= TimeBasedLinearFactory?.Build();
        result.TimeBasedCanary ??= TimeBasedCanaryFactory?.Build();
    }

} // End Of Class

public static class InnerDeploymentConfigTrafficRoutingConfigFactoryExtensions
{
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear(this InnerDeploymentConfigTrafficRoutingConfigFactory parentFactory, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null)
    {
        parentFactory.TimeBasedLinearFactory = new InnerDeploymentConfigTimeBasedLinearFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TimeBasedLinearFactory);
    }

    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary(this InnerDeploymentConfigTrafficRoutingConfigFactory parentFactory, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null)
    {
        parentFactory.TimeBasedCanaryFactory = new InnerDeploymentConfigTimeBasedCanaryFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TimeBasedCanaryFactory);
    }

    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, T4, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3, T4>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, T4, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3, T4>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, T4, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, T4, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedLinearFactory> WithTimeBasedLinear<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedLinear> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedLinear(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, T4, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3, T4>(this CombinedResult<InnerDeploymentConfigTrafficRoutingConfigFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, T4, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3, T4>(this CombinedResult<T1, InnerDeploymentConfigTrafficRoutingConfigFactory, T2, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, T4, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDeploymentConfigTrafficRoutingConfigFactory, T3, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, T4, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDeploymentConfigTrafficRoutingConfigFactory, T4> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDeploymentConfigTrafficRoutingConfigFactory, InnerDeploymentConfigTimeBasedCanaryFactory> WithTimeBasedCanary<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDeploymentConfigTrafficRoutingConfigFactory> combinedResult, Action<Humidifier.CodeDeploy.DeploymentConfigTypes.TimeBasedCanary> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTimeBasedCanary(combinedResult.T5, subFactoryAction));
}
