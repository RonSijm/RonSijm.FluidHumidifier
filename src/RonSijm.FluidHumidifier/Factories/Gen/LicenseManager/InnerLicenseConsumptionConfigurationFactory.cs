// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.LicenseManager;

public class InnerLicenseConsumptionConfigurationFactory(Action<Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration>
{

    internal InnerLicenseBorrowConfigurationFactory BorrowConfigurationFactory { get; set; }

    internal InnerLicenseProvisionalConfigurationFactory ProvisionalConfigurationFactory { get; set; }

    protected override Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration Create()
    {
        var consumptionConfigurationResult = CreateConsumptionConfiguration();
        factoryAction?.Invoke(consumptionConfigurationResult);

        return consumptionConfigurationResult;
    }

    private Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration CreateConsumptionConfiguration()
    {
        var consumptionConfigurationResult = new Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration();

        return consumptionConfigurationResult;
    }
    public override void CreateChildren(Humidifier.LicenseManager.LicenseTypes.ConsumptionConfiguration result)
    {
        base.CreateChildren(result);

        result.BorrowConfiguration ??= BorrowConfigurationFactory?.Build();
        result.ProvisionalConfiguration ??= ProvisionalConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerLicenseConsumptionConfigurationFactoryExtensions
{
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration(this InnerLicenseConsumptionConfigurationFactory parentFactory, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null)
    {
        parentFactory.BorrowConfigurationFactory = new InnerLicenseBorrowConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.BorrowConfigurationFactory);
    }

    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration(this InnerLicenseConsumptionConfigurationFactory parentFactory, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null)
    {
        parentFactory.ProvisionalConfigurationFactory = new InnerLicenseProvisionalConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ProvisionalConfigurationFactory);
    }

    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, T4, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, T4, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, T4, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, T4, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerLicenseConsumptionConfigurationFactory, InnerLicenseBorrowConfigurationFactory> WithBorrowConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.BorrowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBorrowConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, T4, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerLicenseConsumptionConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, T4, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerLicenseConsumptionConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, T4, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerLicenseConsumptionConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, T4, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerLicenseConsumptionConfigurationFactory, T4> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerLicenseConsumptionConfigurationFactory, InnerLicenseProvisionalConfigurationFactory> WithProvisionalConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerLicenseConsumptionConfigurationFactory> combinedResult, Action<Humidifier.LicenseManager.LicenseTypes.ProvisionalConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithProvisionalConfiguration(combinedResult.T5, subFactoryAction));
}
