// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.SSM;

public class MaintenanceWindowTaskFactory(string resourceName = null, Action<Humidifier.SSM.MaintenanceWindowTask> factoryAction = null) : ResourceFactory<Humidifier.SSM.MaintenanceWindowTask>(resourceName)
{

    internal List<InnerMaintenanceWindowTaskTargetFactory> TargetsFactories { get; set; } = [];

    internal InnerMaintenanceWindowTaskTaskInvocationParametersFactory TaskInvocationParametersFactory { get; set; }

    internal InnerMaintenanceWindowTaskLoggingInfoFactory LoggingInfoFactory { get; set; }

    protected override Humidifier.SSM.MaintenanceWindowTask Create()
    {
        var maintenanceWindowTaskResult = CreateMaintenanceWindowTask();
        factoryAction?.Invoke(maintenanceWindowTaskResult);

        return maintenanceWindowTaskResult;
    }

    private Humidifier.SSM.MaintenanceWindowTask CreateMaintenanceWindowTask()
    {
        var maintenanceWindowTaskResult = new Humidifier.SSM.MaintenanceWindowTask
        {
            GivenName = InputResourceName,
        };

        return maintenanceWindowTaskResult;
    }
    public override void CreateChildren(Humidifier.SSM.MaintenanceWindowTask result)
    {
        base.CreateChildren(result);

        result.Targets = TargetsFactories.Any() ? TargetsFactories.Select(x => x.Build()).ToList() : null;
        result.TaskInvocationParameters ??= TaskInvocationParametersFactory?.Build();
        result.LoggingInfo ??= LoggingInfoFactory?.Build();
    }

} // End Of Class

public static class MaintenanceWindowTaskFactoryExtensions
{
    public static CombinedResult<MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTargetFactory> WithTargets(this MaintenanceWindowTaskFactory parentFactory, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null)
    {
        var factory = new InnerMaintenanceWindowTaskTargetFactory(subFactoryAction);
        parentFactory.TargetsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters(this MaintenanceWindowTaskFactory parentFactory, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null)
    {
        parentFactory.TaskInvocationParametersFactory = new InnerMaintenanceWindowTaskTaskInvocationParametersFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TaskInvocationParametersFactory);
    }

    public static CombinedResult<MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo(this MaintenanceWindowTaskFactory parentFactory, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null)
    {
        parentFactory.LoggingInfoFactory = new InnerMaintenanceWindowTaskLoggingInfoFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LoggingInfoFactory);
    }

    public static CombinedResult<MaintenanceWindowTaskFactory, T1, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1>(this CombinedResult<MaintenanceWindowTaskFactory, T1> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1>(this CombinedResult<T1, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T4, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTargetFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.Target> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T5, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1>(this CombinedResult<MaintenanceWindowTaskFactory, T1> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1>(this CombinedResult<T1, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T2, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T3, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T4, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3, T4>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3, T4>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3, T4>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskTaskInvocationParametersFactory> WithTaskInvocationParameters<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.TaskInvocationParameters> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTaskInvocationParameters(combinedResult.T5, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1>(this CombinedResult<MaintenanceWindowTaskFactory, T1> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, WithLoggingInfo(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1>(this CombinedResult<T1, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, WithLoggingInfo(combinedResult.T2, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T3, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T4, subFactoryAction));
    public static CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3, T4>(this CombinedResult<MaintenanceWindowTaskFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3, T4>(this CombinedResult<T1, MaintenanceWindowTaskFactory, T2, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3, T4>(this CombinedResult<T1, T2, MaintenanceWindowTaskFactory, T3, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, MaintenanceWindowTaskFactory, T4> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory, InnerMaintenanceWindowTaskLoggingInfoFactory> WithLoggingInfo<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, MaintenanceWindowTaskFactory> combinedResult, Action<Humidifier.SSM.MaintenanceWindowTaskTypes.LoggingInfo> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoggingInfo(combinedResult.T5, subFactoryAction));
}
