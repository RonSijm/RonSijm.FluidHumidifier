// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.FSx;

public class InnerVolumeOntapConfigurationFactory(Action<Humidifier.FSx.VolumeTypes.OntapConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.FSx.VolumeTypes.OntapConfiguration>
{

    internal InnerVolumeTieringPolicyFactory TieringPolicyFactory { get; set; }

    internal InnerVolumeSnaplockConfigurationFactory SnaplockConfigurationFactory { get; set; }

    internal InnerVolumeAggregateConfigurationFactory AggregateConfigurationFactory { get; set; }

    protected override Humidifier.FSx.VolumeTypes.OntapConfiguration Create()
    {
        var ontapConfigurationResult = CreateOntapConfiguration();
        factoryAction?.Invoke(ontapConfigurationResult);

        return ontapConfigurationResult;
    }

    private Humidifier.FSx.VolumeTypes.OntapConfiguration CreateOntapConfiguration()
    {
        var ontapConfigurationResult = new Humidifier.FSx.VolumeTypes.OntapConfiguration();

        return ontapConfigurationResult;
    }
    public override void CreateChildren(Humidifier.FSx.VolumeTypes.OntapConfiguration result)
    {
        base.CreateChildren(result);

        result.TieringPolicy ??= TieringPolicyFactory?.Build();
        result.SnaplockConfiguration ??= SnaplockConfigurationFactory?.Build();
        result.AggregateConfiguration ??= AggregateConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerVolumeOntapConfigurationFactoryExtensions
{
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, InnerVolumeTieringPolicyFactory> WithTieringPolicy(this InnerVolumeOntapConfigurationFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null)
    {
        parentFactory.TieringPolicyFactory = new InnerVolumeTieringPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TieringPolicyFactory);
    }

    public static CombinedResult<InnerVolumeOntapConfigurationFactory, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration(this InnerVolumeOntapConfigurationFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null)
    {
        parentFactory.SnaplockConfigurationFactory = new InnerVolumeSnaplockConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SnaplockConfigurationFactory);
    }

    public static CombinedResult<InnerVolumeOntapConfigurationFactory, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration(this InnerVolumeOntapConfigurationFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null)
    {
        parentFactory.AggregateConfigurationFactory = new InnerVolumeAggregateConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AggregateConfigurationFactory);
    }

    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithTieringPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithTieringPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3, T4>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory, InnerVolumeTieringPolicyFactory> WithTieringPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.TieringPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTieringPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory, InnerVolumeSnaplockConfigurationFactory> WithSnaplockConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.SnaplockConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSnaplockConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerVolumeOntapConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeOntapConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeOntapConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeOntapConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory, InnerVolumeAggregateConfigurationFactory> WithAggregateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeOntapConfigurationFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.AggregateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAggregateConfiguration(combinedResult.T5, subFactoryAction));
}
