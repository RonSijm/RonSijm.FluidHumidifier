// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.FSx;

public class InnerVolumeSnaplockRetentionPeriodFactory(Action<Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod> factoryAction = null) : SubResourceFactory<Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod>
{

    internal InnerVolumeRetentionPeriodFactory DefaultRetentionFactory { get; set; }

    internal InnerVolumeRetentionPeriodFactory MaximumRetentionFactory { get; set; }

    internal InnerVolumeRetentionPeriodFactory MinimumRetentionFactory { get; set; }

    protected override Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod Create()
    {
        var snaplockRetentionPeriodResult = CreateSnaplockRetentionPeriod();
        factoryAction?.Invoke(snaplockRetentionPeriodResult);

        return snaplockRetentionPeriodResult;
    }

    private Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod CreateSnaplockRetentionPeriod()
    {
        var snaplockRetentionPeriodResult = new Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod();

        return snaplockRetentionPeriodResult;
    }
    public override void CreateChildren(Humidifier.FSx.VolumeTypes.SnaplockRetentionPeriod result)
    {
        base.CreateChildren(result);

        result.DefaultRetention ??= DefaultRetentionFactory?.Build();
        result.MaximumRetention ??= MaximumRetentionFactory?.Build();
        result.MinimumRetention ??= MinimumRetentionFactory?.Build();
    }

} // End Of Class

public static class InnerVolumeSnaplockRetentionPeriodFactoryExtensions
{
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithDefaultRetention(this InnerVolumeSnaplockRetentionPeriodFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null)
    {
        parentFactory.DefaultRetentionFactory = new InnerVolumeRetentionPeriodFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.DefaultRetentionFactory);
    }

    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMaximumRetention(this InnerVolumeSnaplockRetentionPeriodFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null)
    {
        parentFactory.MaximumRetentionFactory = new InnerVolumeRetentionPeriodFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.MaximumRetentionFactory);
    }

    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMinimumRetention(this InnerVolumeSnaplockRetentionPeriodFactory parentFactory, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null)
    {
        parentFactory.MinimumRetentionFactory = new InnerVolumeRetentionPeriodFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.MinimumRetentionFactory);
    }

    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithDefaultRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithDefaultRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3, T4>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithDefaultRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDefaultRetention(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithMaximumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithMaximumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3, T4>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMaximumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaximumRetention(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithMinimumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, WithMinimumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3, T4>(this CombinedResult<InnerVolumeSnaplockRetentionPeriodFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3, T4>(this CombinedResult<T1, InnerVolumeSnaplockRetentionPeriodFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerVolumeSnaplockRetentionPeriodFactory, T3, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerVolumeSnaplockRetentionPeriodFactory, T4> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory, InnerVolumeRetentionPeriodFactory> WithMinimumRetention<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerVolumeSnaplockRetentionPeriodFactory> combinedResult, Action<Humidifier.FSx.VolumeTypes.RetentionPeriod> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMinimumRetention(combinedResult.T5, subFactoryAction));
}
