// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.FSx;

public class InnerFileSystemWindowsConfigurationFactory(Action<Humidifier.FSx.FileSystemTypes.WindowsConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.FSx.FileSystemTypes.WindowsConfiguration>
{

    internal InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory SelfManagedActiveDirectoryConfigurationFactory { get; set; }

    internal InnerFileSystemAuditLogConfigurationFactory AuditLogConfigurationFactory { get; set; }

    internal InnerFileSystemDiskIopsConfigurationFactory DiskIopsConfigurationFactory { get; set; }

    protected override Humidifier.FSx.FileSystemTypes.WindowsConfiguration Create()
    {
        var windowsConfigurationResult = CreateWindowsConfiguration();
        factoryAction?.Invoke(windowsConfigurationResult);

        return windowsConfigurationResult;
    }

    private Humidifier.FSx.FileSystemTypes.WindowsConfiguration CreateWindowsConfiguration()
    {
        var windowsConfigurationResult = new Humidifier.FSx.FileSystemTypes.WindowsConfiguration();

        return windowsConfigurationResult;
    }
    public override void CreateChildren(Humidifier.FSx.FileSystemTypes.WindowsConfiguration result)
    {
        base.CreateChildren(result);

        result.SelfManagedActiveDirectoryConfiguration ??= SelfManagedActiveDirectoryConfigurationFactory?.Build();
        result.AuditLogConfiguration ??= AuditLogConfigurationFactory?.Build();
        result.DiskIopsConfiguration ??= DiskIopsConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerFileSystemWindowsConfigurationFactoryExtensions
{
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration(this InnerFileSystemWindowsConfigurationFactory parentFactory, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null)
    {
        parentFactory.SelfManagedActiveDirectoryConfigurationFactory = new InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SelfManagedActiveDirectoryConfigurationFactory);
    }

    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration(this InnerFileSystemWindowsConfigurationFactory parentFactory, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null)
    {
        parentFactory.AuditLogConfigurationFactory = new InnerFileSystemAuditLogConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AuditLogConfigurationFactory);
    }

    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration(this InnerFileSystemWindowsConfigurationFactory parentFactory, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null)
    {
        parentFactory.DiskIopsConfigurationFactory = new InnerFileSystemDiskIopsConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.DiskIopsConfigurationFactory);
    }

    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemSelfManagedActiveDirectoryConfigurationFactory> WithSelfManagedActiveDirectoryConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.SelfManagedActiveDirectoryConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSelfManagedActiveDirectoryConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemAuditLogConfigurationFactory> WithAuditLogConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.AuditLogConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAuditLogConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerFileSystemWindowsConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerFileSystemWindowsConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerFileSystemWindowsConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerFileSystemWindowsConfigurationFactory, T4> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory, InnerFileSystemDiskIopsConfigurationFactory> WithDiskIopsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerFileSystemWindowsConfigurationFactory> combinedResult, Action<Humidifier.FSx.FileSystemTypes.DiskIopsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDiskIopsConfiguration(combinedResult.T5, subFactoryAction));
}
