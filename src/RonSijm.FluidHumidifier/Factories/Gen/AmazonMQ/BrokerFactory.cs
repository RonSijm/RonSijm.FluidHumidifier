// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.AmazonMQ;

public class BrokerFactory(string resourceName = null, Action<Humidifier.AmazonMQ.Broker> factoryAction = null) : ResourceFactory<Humidifier.AmazonMQ.Broker>(resourceName)
{

    internal List<InnerBrokerUserFactory> UsersFactories { get; set; } = [];

    internal List<InnerBrokerTagsEntryFactory> TagsFactories { get; set; } = [];

    internal InnerBrokerConfigurationIdFactory ConfigurationFactory { get; set; }

    internal InnerBrokerMaintenanceWindowFactory MaintenanceWindowStartTimeFactory { get; set; }

    internal InnerBrokerLogListFactory LogsFactory { get; set; }

    internal InnerBrokerLdapServerMetadataFactory LdapServerMetadataFactory { get; set; }

    internal InnerBrokerEncryptionOptionsFactory EncryptionOptionsFactory { get; set; }

    protected override Humidifier.AmazonMQ.Broker Create()
    {
        var brokerResult = CreateBroker();
        factoryAction?.Invoke(brokerResult);

        return brokerResult;
    }

    private Humidifier.AmazonMQ.Broker CreateBroker()
    {
        var brokerResult = new Humidifier.AmazonMQ.Broker
        {
            GivenName = InputResourceName,
        };

        return brokerResult;
    }
    public override void CreateChildren(Humidifier.AmazonMQ.Broker result)
    {
        base.CreateChildren(result);

        result.Users = UsersFactories.Any() ? UsersFactories.Select(x => x.Build()).ToList() : null;
        result.Tags = TagsFactories.Any() ? TagsFactories.Select(x => x.Build()).ToList() : null;
        result.Configuration ??= ConfigurationFactory?.Build();
        result.MaintenanceWindowStartTime ??= MaintenanceWindowStartTimeFactory?.Build();
        result.Logs ??= LogsFactory?.Build();
        result.LdapServerMetadata ??= LdapServerMetadataFactory?.Build();
        result.EncryptionOptions ??= EncryptionOptionsFactory?.Build();
    }

} // End Of Class

public static class BrokerFactoryExtensions
{
    public static CombinedResult<BrokerFactory, InnerBrokerUserFactory> WithUsers(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null)
    {
        var factory = new InnerBrokerUserFactory(subFactoryAction);
        parentFactory.UsersFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<BrokerFactory, InnerBrokerTagsEntryFactory> WithTags(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null)
    {
        var factory = new InnerBrokerTagsEntryFactory(subFactoryAction);
        parentFactory.TagsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<BrokerFactory, InnerBrokerConfigurationIdFactory> WithConfiguration(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null)
    {
        parentFactory.ConfigurationFactory = new InnerBrokerConfigurationIdFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConfigurationFactory);
    }

    public static CombinedResult<BrokerFactory, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null)
    {
        parentFactory.MaintenanceWindowStartTimeFactory = new InnerBrokerMaintenanceWindowFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.MaintenanceWindowStartTimeFactory);
    }

    public static CombinedResult<BrokerFactory, InnerBrokerLogListFactory> WithLogs(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null)
    {
        parentFactory.LogsFactory = new InnerBrokerLogListFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LogsFactory);
    }

    public static CombinedResult<BrokerFactory, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null)
    {
        parentFactory.LdapServerMetadataFactory = new InnerBrokerLdapServerMetadataFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LdapServerMetadataFactory);
    }

    public static CombinedResult<BrokerFactory, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions(this BrokerFactory parentFactory, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null)
    {
        parentFactory.EncryptionOptionsFactory = new InnerBrokerEncryptionOptionsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.EncryptionOptionsFactory);
    }

    public static CombinedResult<BrokerFactory, T1, InnerBrokerUserFactory> WithUsers<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, WithUsers(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerUserFactory> WithUsers<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, WithUsers(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerUserFactory> WithUsers<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerUserFactory> WithUsers<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerUserFactory> WithUsers<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerUserFactory> WithUsers<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerUserFactory> WithUsers<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerUserFactory> WithUsers<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerUserFactory> WithUsers<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerUserFactory> WithUsers<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerUserFactory> WithUsers<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerUserFactory> WithUsers<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerUserFactory> WithUsers<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerUserFactory> WithUsers<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.User> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithUsers(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerTagsEntryFactory> WithTags<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, WithTags(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerTagsEntryFactory> WithTags<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, WithTags(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerTagsEntryFactory> WithTags<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerTagsEntryFactory> WithTags<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerTagsEntryFactory> WithTags<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerTagsEntryFactory> WithTags<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.TagsEntry> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTags(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerConfigurationIdFactory> WithConfiguration<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, WithConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerConfigurationIdFactory> WithConfiguration<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, WithConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerConfigurationIdFactory> WithConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.ConfigurationId> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerMaintenanceWindowFactory> WithMaintenanceWindowStartTime<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.MaintenanceWindow> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMaintenanceWindowStartTime(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerLogListFactory> WithLogs<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, WithLogs(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerLogListFactory> WithLogs<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, WithLogs(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerLogListFactory> WithLogs<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerLogListFactory> WithLogs<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerLogListFactory> WithLogs<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerLogListFactory> WithLogs<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerLogListFactory> WithLogs<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerLogListFactory> WithLogs<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerLogListFactory> WithLogs<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerLogListFactory> WithLogs<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerLogListFactory> WithLogs<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerLogListFactory> WithLogs<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerLogListFactory> WithLogs<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerLogListFactory> WithLogs<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LogList> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLogs(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerLdapServerMetadataFactory> WithLdapServerMetadata<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.LdapServerMetadata> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLdapServerMetadata(combinedResult.T5, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1>(this CombinedResult<BrokerFactory, T1> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1>(this CombinedResult<T1, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2>(this CombinedResult<BrokerFactory, T1, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2>(this CombinedResult<T1, BrokerFactory, T2> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2>(this CombinedResult<T1, T2, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3>(this CombinedResult<BrokerFactory, T1, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3>(this CombinedResult<T1, BrokerFactory, T2, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3>(this CombinedResult<T1, T2, BrokerFactory, T3> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3>(this CombinedResult<T1, T2, T3, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<BrokerFactory, T1, T2, T3, T4, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3, T4>(this CombinedResult<BrokerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, BrokerFactory, T2, T3, T4, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3, T4>(this CombinedResult<T1, BrokerFactory, T2, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, BrokerFactory, T3, T4, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3, T4>(this CombinedResult<T1, T2, BrokerFactory, T3, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, BrokerFactory, T4, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, BrokerFactory, T4> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, BrokerFactory, InnerBrokerEncryptionOptionsFactory> WithEncryptionOptions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, BrokerFactory> combinedResult, Action<Humidifier.AmazonMQ.BrokerTypes.EncryptionOptions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEncryptionOptions(combinedResult.T5, subFactoryAction));
}
