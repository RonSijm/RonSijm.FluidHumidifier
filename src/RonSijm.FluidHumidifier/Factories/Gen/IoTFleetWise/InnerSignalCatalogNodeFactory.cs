// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.IoTFleetWise;

public class InnerSignalCatalogNodeFactory(Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Node> factoryAction = null) : SubResourceFactory<Humidifier.IoTFleetWise.SignalCatalogTypes.Node>
{

    internal InnerSignalCatalogAttributeFactory AttributeFactory { get; set; }

    internal InnerSignalCatalogBranchFactory BranchFactory { get; set; }

    internal InnerSignalCatalogSensorFactory SensorFactory { get; set; }

    internal InnerSignalCatalogActuatorFactory ActuatorFactory { get; set; }

    protected override Humidifier.IoTFleetWise.SignalCatalogTypes.Node Create()
    {
        var nodeResult = CreateNode();
        factoryAction?.Invoke(nodeResult);

        return nodeResult;
    }

    private Humidifier.IoTFleetWise.SignalCatalogTypes.Node CreateNode()
    {
        var nodeResult = new Humidifier.IoTFleetWise.SignalCatalogTypes.Node();

        return nodeResult;
    }
    public override void CreateChildren(Humidifier.IoTFleetWise.SignalCatalogTypes.Node result)
    {
        base.CreateChildren(result);

        result.Attribute ??= AttributeFactory?.Build();
        result.Branch ??= BranchFactory?.Build();
        result.Sensor ??= SensorFactory?.Build();
        result.Actuator ??= ActuatorFactory?.Build();
    }

} // End Of Class

public static class InnerSignalCatalogNodeFactoryExtensions
{
    public static CombinedResult<InnerSignalCatalogNodeFactory, InnerSignalCatalogAttributeFactory> WithAttribute(this InnerSignalCatalogNodeFactory parentFactory, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null)
    {
        parentFactory.AttributeFactory = new InnerSignalCatalogAttributeFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AttributeFactory);
    }

    public static CombinedResult<InnerSignalCatalogNodeFactory, InnerSignalCatalogBranchFactory> WithBranch(this InnerSignalCatalogNodeFactory parentFactory, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null)
    {
        parentFactory.BranchFactory = new InnerSignalCatalogBranchFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.BranchFactory);
    }

    public static CombinedResult<InnerSignalCatalogNodeFactory, InnerSignalCatalogSensorFactory> WithSensor(this InnerSignalCatalogNodeFactory parentFactory, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null)
    {
        parentFactory.SensorFactory = new InnerSignalCatalogSensorFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SensorFactory);
    }

    public static CombinedResult<InnerSignalCatalogNodeFactory, InnerSignalCatalogActuatorFactory> WithActuator(this InnerSignalCatalogNodeFactory parentFactory, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null)
    {
        parentFactory.ActuatorFactory = new InnerSignalCatalogActuatorFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ActuatorFactory);
    }

    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, InnerSignalCatalogAttributeFactory> WithAttribute<T1>(this CombinedResult<InnerSignalCatalogNodeFactory, T1> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, WithAttribute(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, InnerSignalCatalogAttributeFactory> WithAttribute<T1>(this CombinedResult<T1, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, WithAttribute(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3, T4>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3, T4>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory, InnerSignalCatalogAttributeFactory> WithAttribute<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Attribute> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttribute(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, InnerSignalCatalogBranchFactory> WithBranch<T1>(this CombinedResult<InnerSignalCatalogNodeFactory, T1> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, WithBranch(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, InnerSignalCatalogBranchFactory> WithBranch<T1>(this CombinedResult<T1, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, WithBranch(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, InnerSignalCatalogBranchFactory> WithBranch<T1, T2>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, InnerSignalCatalogBranchFactory> WithBranch<T1, T2>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, InnerSignalCatalogBranchFactory> WithBranch<T1, T2>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3, T4>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3, T4>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory, InnerSignalCatalogBranchFactory> WithBranch<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Branch> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBranch(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, InnerSignalCatalogSensorFactory> WithSensor<T1>(this CombinedResult<InnerSignalCatalogNodeFactory, T1> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, WithSensor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, InnerSignalCatalogSensorFactory> WithSensor<T1>(this CombinedResult<T1, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, WithSensor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, InnerSignalCatalogSensorFactory> WithSensor<T1, T2>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, InnerSignalCatalogSensorFactory> WithSensor<T1, T2>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, InnerSignalCatalogSensorFactory> WithSensor<T1, T2>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3, T4>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3, T4>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory, InnerSignalCatalogSensorFactory> WithSensor<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Sensor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSensor(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, InnerSignalCatalogActuatorFactory> WithActuator<T1>(this CombinedResult<InnerSignalCatalogNodeFactory, T1> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, WithActuator(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, InnerSignalCatalogActuatorFactory> WithActuator<T1>(this CombinedResult<T1, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, WithActuator(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3, T4>(this CombinedResult<InnerSignalCatalogNodeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3, T4>(this CombinedResult<T1, InnerSignalCatalogNodeFactory, T2, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSignalCatalogNodeFactory, T3, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSignalCatalogNodeFactory, T4> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory, InnerSignalCatalogActuatorFactory> WithActuator<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSignalCatalogNodeFactory> combinedResult, Action<Humidifier.IoTFleetWise.SignalCatalogTypes.Actuator> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActuator(combinedResult.T5, subFactoryAction));
}
