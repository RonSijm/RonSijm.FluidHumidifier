// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Glue;

public class CrawlerFactory(string resourceName = null, Action<Humidifier.Glue.Crawler> factoryAction = null) : ResourceFactory<Humidifier.Glue.Crawler>(resourceName)
{

    internal InnerCrawlerSchemaChangePolicyFactory SchemaChangePolicyFactory { get; set; }

    internal InnerCrawlerRecrawlPolicyFactory RecrawlPolicyFactory { get; set; }

    internal InnerCrawlerTargetsFactory TargetsFactory { get; set; }

    internal InnerCrawlerLakeFormationConfigurationFactory LakeFormationConfigurationFactory { get; set; }

    internal InnerCrawlerScheduleFactory ScheduleFactory { get; set; }

    protected override Humidifier.Glue.Crawler Create()
    {
        var crawlerResult = CreateCrawler();
        factoryAction?.Invoke(crawlerResult);

        return crawlerResult;
    }

    private Humidifier.Glue.Crawler CreateCrawler()
    {
        var crawlerResult = new Humidifier.Glue.Crawler
        {
            GivenName = InputResourceName,
        };

        return crawlerResult;
    }
    public override void CreateChildren(Humidifier.Glue.Crawler result)
    {
        base.CreateChildren(result);

        result.SchemaChangePolicy ??= SchemaChangePolicyFactory?.Build();
        result.RecrawlPolicy ??= RecrawlPolicyFactory?.Build();
        result.Targets ??= TargetsFactory?.Build();
        result.LakeFormationConfiguration ??= LakeFormationConfigurationFactory?.Build();
        result.Schedule ??= ScheduleFactory?.Build();
    }

} // End Of Class

public static class CrawlerFactoryExtensions
{
    public static CombinedResult<CrawlerFactory, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy(this CrawlerFactory parentFactory, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null)
    {
        parentFactory.SchemaChangePolicyFactory = new InnerCrawlerSchemaChangePolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SchemaChangePolicyFactory);
    }

    public static CombinedResult<CrawlerFactory, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy(this CrawlerFactory parentFactory, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null)
    {
        parentFactory.RecrawlPolicyFactory = new InnerCrawlerRecrawlPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RecrawlPolicyFactory);
    }

    public static CombinedResult<CrawlerFactory, InnerCrawlerTargetsFactory> WithTargets(this CrawlerFactory parentFactory, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null)
    {
        parentFactory.TargetsFactory = new InnerCrawlerTargetsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TargetsFactory);
    }

    public static CombinedResult<CrawlerFactory, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration(this CrawlerFactory parentFactory, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null)
    {
        parentFactory.LakeFormationConfigurationFactory = new InnerCrawlerLakeFormationConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LakeFormationConfigurationFactory);
    }

    public static CombinedResult<CrawlerFactory, InnerCrawlerScheduleFactory> WithSchedule(this CrawlerFactory parentFactory, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null)
    {
        parentFactory.ScheduleFactory = new InnerCrawlerScheduleFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ScheduleFactory);
    }

    public static CombinedResult<CrawlerFactory, T1, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1>(this CombinedResult<CrawlerFactory, T1> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1>(this CombinedResult<T1, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2>(this CombinedResult<CrawlerFactory, T1, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2>(this CombinedResult<T1, CrawlerFactory, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2>(this CombinedResult<T1, T2, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3>(this CombinedResult<CrawlerFactory, T1, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3>(this CombinedResult<T1, CrawlerFactory, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3>(this CombinedResult<T1, T2, CrawlerFactory, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, T4, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3, T4>(this CombinedResult<CrawlerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, T4, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3, T4>(this CombinedResult<T1, CrawlerFactory, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, T4, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, CrawlerFactory, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, T4, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, CrawlerFactory, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, CrawlerFactory, InnerCrawlerSchemaChangePolicyFactory> WithSchemaChangePolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.SchemaChangePolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchemaChangePolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1>(this CombinedResult<CrawlerFactory, T1> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1>(this CombinedResult<T1, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2>(this CombinedResult<CrawlerFactory, T1, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2>(this CombinedResult<T1, CrawlerFactory, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2>(this CombinedResult<T1, T2, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3>(this CombinedResult<CrawlerFactory, T1, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3>(this CombinedResult<T1, CrawlerFactory, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3>(this CombinedResult<T1, T2, CrawlerFactory, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, T4, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3, T4>(this CombinedResult<CrawlerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, T4, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3, T4>(this CombinedResult<T1, CrawlerFactory, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, T4, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, CrawlerFactory, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, T4, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, CrawlerFactory, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, CrawlerFactory, InnerCrawlerRecrawlPolicyFactory> WithRecrawlPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.RecrawlPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRecrawlPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, InnerCrawlerTargetsFactory> WithTargets<T1>(this CombinedResult<CrawlerFactory, T1> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, InnerCrawlerTargetsFactory> WithTargets<T1>(this CombinedResult<T1, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, InnerCrawlerTargetsFactory> WithTargets<T1, T2>(this CombinedResult<CrawlerFactory, T1, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, InnerCrawlerTargetsFactory> WithTargets<T1, T2>(this CombinedResult<T1, CrawlerFactory, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, InnerCrawlerTargetsFactory> WithTargets<T1, T2>(this CombinedResult<T1, T2, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3>(this CombinedResult<CrawlerFactory, T1, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, CrawlerFactory, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, T2, CrawlerFactory, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3>(this CombinedResult<T1, T2, T3, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T4, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, T4, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<CrawlerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, T4, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, CrawlerFactory, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, T4, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, CrawlerFactory, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, T4, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, CrawlerFactory, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, CrawlerFactory, InnerCrawlerTargetsFactory> WithTargets<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Targets> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTargets(combinedResult.T5, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1>(this CombinedResult<CrawlerFactory, T1> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1>(this CombinedResult<T1, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2>(this CombinedResult<CrawlerFactory, T1, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2>(this CombinedResult<T1, CrawlerFactory, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2>(this CombinedResult<T1, T2, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3>(this CombinedResult<CrawlerFactory, T1, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3>(this CombinedResult<T1, CrawlerFactory, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, CrawlerFactory, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, T4, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3, T4>(this CombinedResult<CrawlerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, T4, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, CrawlerFactory, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, T4, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, CrawlerFactory, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, T4, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, CrawlerFactory, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, CrawlerFactory, InnerCrawlerLakeFormationConfigurationFactory> WithLakeFormationConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.LakeFormationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLakeFormationConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, InnerCrawlerScheduleFactory> WithSchedule<T1>(this CombinedResult<CrawlerFactory, T1> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, InnerCrawlerScheduleFactory> WithSchedule<T1>(this CombinedResult<T1, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, InnerCrawlerScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<CrawlerFactory, T1, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, InnerCrawlerScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<T1, CrawlerFactory, T2> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, InnerCrawlerScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<T1, T2, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<CrawlerFactory, T1, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, CrawlerFactory, T2, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, T2, CrawlerFactory, T3> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, T2, T3, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T4, subFactoryAction));
    public static CombinedResult<CrawlerFactory, T1, T2, T3, T4, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<CrawlerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, CrawlerFactory, T2, T3, T4, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, CrawlerFactory, T2, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, CrawlerFactory, T3, T4, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, CrawlerFactory, T3, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, CrawlerFactory, T4, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, CrawlerFactory, T4> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, CrawlerFactory, InnerCrawlerScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, CrawlerFactory> combinedResult, Action<Humidifier.Glue.CrawlerTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T5, subFactoryAction));
}
