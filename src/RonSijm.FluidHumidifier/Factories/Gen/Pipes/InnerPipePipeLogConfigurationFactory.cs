// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Pipes;

public class InnerPipePipeLogConfigurationFactory(Action<Humidifier.Pipes.PipeTypes.PipeLogConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.Pipes.PipeTypes.PipeLogConfiguration>
{

    internal InnerPipeFirehoseLogDestinationFactory FirehoseLogDestinationFactory { get; set; }

    internal InnerPipeCloudwatchLogsLogDestinationFactory CloudwatchLogsLogDestinationFactory { get; set; }

    internal InnerPipeS3LogDestinationFactory S3LogDestinationFactory { get; set; }

    protected override Humidifier.Pipes.PipeTypes.PipeLogConfiguration Create()
    {
        var pipeLogConfigurationResult = CreatePipeLogConfiguration();
        factoryAction?.Invoke(pipeLogConfigurationResult);

        return pipeLogConfigurationResult;
    }

    private Humidifier.Pipes.PipeTypes.PipeLogConfiguration CreatePipeLogConfiguration()
    {
        var pipeLogConfigurationResult = new Humidifier.Pipes.PipeTypes.PipeLogConfiguration();

        return pipeLogConfigurationResult;
    }
    public override void CreateChildren(Humidifier.Pipes.PipeTypes.PipeLogConfiguration result)
    {
        base.CreateChildren(result);

        result.FirehoseLogDestination ??= FirehoseLogDestinationFactory?.Build();
        result.CloudwatchLogsLogDestination ??= CloudwatchLogsLogDestinationFactory?.Build();
        result.S3LogDestination ??= S3LogDestinationFactory?.Build();
    }

} // End Of Class

public static class InnerPipePipeLogConfigurationFactoryExtensions
{
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination(this InnerPipePipeLogConfigurationFactory parentFactory, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null)
    {
        parentFactory.FirehoseLogDestinationFactory = new InnerPipeFirehoseLogDestinationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.FirehoseLogDestinationFactory);
    }

    public static CombinedResult<InnerPipePipeLogConfigurationFactory, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination(this InnerPipePipeLogConfigurationFactory parentFactory, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null)
    {
        parentFactory.CloudwatchLogsLogDestinationFactory = new InnerPipeCloudwatchLogsLogDestinationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.CloudwatchLogsLogDestinationFactory);
    }

    public static CombinedResult<InnerPipePipeLogConfigurationFactory, InnerPipeS3LogDestinationFactory> WithS3LogDestination(this InnerPipePipeLogConfigurationFactory parentFactory, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null)
    {
        parentFactory.S3LogDestinationFactory = new InnerPipeS3LogDestinationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.S3LogDestinationFactory);
    }

    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3, T4>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory, InnerPipeFirehoseLogDestinationFactory> WithFirehoseLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.FirehoseLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFirehoseLogDestination(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3, T4>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory, InnerPipeCloudwatchLogsLogDestinationFactory> WithCloudwatchLogsLogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.CloudwatchLogsLogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCloudwatchLogsLogDestination(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithS3LogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, WithS3LogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3, T4>(this CombinedResult<InnerPipePipeLogConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipePipeLogConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipePipeLogConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipePipeLogConfigurationFactory, T4> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory, InnerPipeS3LogDestinationFactory> WithS3LogDestination<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipePipeLogConfigurationFactory> combinedResult, Action<Humidifier.Pipes.PipeTypes.S3LogDestination> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithS3LogDestination(combinedResult.T5, subFactoryAction));
}
