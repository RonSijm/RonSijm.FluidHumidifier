// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.CustomerProfiles;

public class InnerDomainRuleBasedMatchingFactory(Action<Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching> factoryAction = null) : SubResourceFactory<Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching>
{

    internal InnerDomainAttributeTypesSelectorFactory AttributeTypesSelectorFactory { get; set; }

    internal InnerDomainConflictResolutionFactory ConflictResolutionFactory { get; set; }

    internal InnerDomainExportingConfigFactory ExportingConfigFactory { get; set; }

    protected override Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching Create()
    {
        var ruleBasedMatchingResult = CreateRuleBasedMatching();
        factoryAction?.Invoke(ruleBasedMatchingResult);

        return ruleBasedMatchingResult;
    }

    private Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching CreateRuleBasedMatching()
    {
        var ruleBasedMatchingResult = new Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching();

        return ruleBasedMatchingResult;
    }
    public override void CreateChildren(Humidifier.CustomerProfiles.DomainTypes.RuleBasedMatching result)
    {
        base.CreateChildren(result);

        result.AttributeTypesSelector ??= AttributeTypesSelectorFactory?.Build();
        result.ConflictResolution ??= ConflictResolutionFactory?.Build();
        result.ExportingConfig ??= ExportingConfigFactory?.Build();
    }

} // End Of Class

public static class InnerDomainRuleBasedMatchingFactoryExtensions
{
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector(this InnerDomainRuleBasedMatchingFactory parentFactory, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null)
    {
        parentFactory.AttributeTypesSelectorFactory = new InnerDomainAttributeTypesSelectorFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AttributeTypesSelectorFactory);
    }

    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, InnerDomainConflictResolutionFactory> WithConflictResolution(this InnerDomainRuleBasedMatchingFactory parentFactory, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null)
    {
        parentFactory.ConflictResolutionFactory = new InnerDomainConflictResolutionFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConflictResolutionFactory);
    }

    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, InnerDomainExportingConfigFactory> WithExportingConfig(this InnerDomainRuleBasedMatchingFactory parentFactory, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null)
    {
        parentFactory.ExportingConfigFactory = new InnerDomainExportingConfigFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ExportingConfigFactory);
    }

    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3, T4>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3, T4>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory, InnerDomainAttributeTypesSelectorFactory> WithAttributeTypesSelector<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.AttributeTypesSelector> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAttributeTypesSelector(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, InnerDomainConflictResolutionFactory> WithConflictResolution<T1>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, WithConflictResolution(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, InnerDomainConflictResolutionFactory> WithConflictResolution<T1>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, WithConflictResolution(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3, T4>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3, T4>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory, InnerDomainConflictResolutionFactory> WithConflictResolution<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ConflictResolution> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConflictResolution(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, InnerDomainExportingConfigFactory> WithExportingConfig<T1>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithExportingConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, InnerDomainExportingConfigFactory> WithExportingConfig<T1>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithExportingConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3, T4>(this CombinedResult<InnerDomainRuleBasedMatchingFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3, T4>(this CombinedResult<T1, InnerDomainRuleBasedMatchingFactory, T2, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDomainRuleBasedMatchingFactory, T3, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDomainRuleBasedMatchingFactory, T4> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory, InnerDomainExportingConfigFactory> WithExportingConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDomainRuleBasedMatchingFactory> combinedResult, Action<Humidifier.CustomerProfiles.DomainTypes.ExportingConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithExportingConfig(combinedResult.T5, subFactoryAction));
}
