using RonSijm.FluidHumidifier.Features.Decorating.ReflectionHelpers;
using RonSijm.FluidHumidifier.Features.Factories.Interfaces;

namespace RonSijm.FluidHumidifier.Factories;

public class StackFactory : Features.Factories.Base.BaseFactory<Stack>, IHaveStack
{
    public StackFactory(string stackName = null, Action<Stack> factoryAction = null)
    {
        var stack = new Stack();
        factoryAction?.Invoke(stack);

        Stack = stack;
    }
    public Stack Stack { get; set; }
    private List<ACMPCA.CertificateFactory> ACMPCACertificateFactories { get; set; } = [];

    private List<CertificateManager.CertificateFactory> CertificateManagerCertificateFactories { get; set; } = [];

    private List<DMS.CertificateFactory> DMSCertificateFactories { get; set; } = [];

    private List<IoT.CertificateFactory> IoTCertificateFactories { get; set; } = [];

    private List<Lightsail.CertificateFactory> LightsailCertificateFactories { get; set; } = [];

    private List<Transfer.CertificateFactory> TransferCertificateFactories { get; set; } = [];

    private List<ACMPCA.CertificateAuthorityFactory> CertificateAuthorityFactories { get; set; } = [];

    private List<ACMPCA.CertificateAuthorityActivationFactory> CertificateAuthorityActivationFactories { get; set; } = [];

    private List<ACMPCA.PermissionFactory> ACMPCAPermissionFactories { get; set; } = [];

    private List<Lambda.PermissionFactory> LambdaPermissionFactories { get; set; } = [];

    private List<RAM.PermissionFactory> RAMPermissionFactories { get; set; } = [];

    private List<APS.RuleGroupsNamespaceFactory> RuleGroupsNamespaceFactories { get; set; } = [];

    private List<APS.ScraperFactory> ScraperFactories { get; set; } = [];

    private List<APS.WorkspaceFactory> APSWorkspaceFactories { get; set; } = [];

    private List<Grafana.WorkspaceFactory> GrafanaWorkspaceFactories { get; set; } = [];

    private List<IoTTwinMaker.WorkspaceFactory> IoTTwinMakerWorkspaceFactories { get; set; } = [];

    private List<WorkSpaces.WorkspaceFactory> WorkSpacesWorkspaceFactories { get; set; } = [];

    private List<ARCZonalShift.AutoshiftObserverNotificationStatusFactory> AutoshiftObserverNotificationStatusFactories { get; set; } = [];

    private List<ARCZonalShift.ZonalAutoshiftConfigurationFactory> ZonalAutoshiftConfigurationFactories { get; set; } = [];

    private List<AccessAnalyzer.AnalyzerFactory> AnalyzerFactories { get; set; } = [];

    private List<AmazonMQ.BrokerFactory> BrokerFactories { get; set; } = [];

    private List<AmazonMQ.ConfigurationFactory> AmazonMQConfigurationFactories { get; set; } = [];

    private List<MSK.ConfigurationFactory> MSKConfigurationFactories { get; set; } = [];

    private List<AmazonMQ.ConfigurationAssociationFactory> ConfigurationAssociationFactories { get; set; } = [];

    private List<Amplify.AppFactory> AmplifyAppFactories { get; set; } = [];

    private List<OpsWorks.AppFactory> OpsWorksAppFactories { get; set; } = [];

    private List<Pinpoint.AppFactory> PinpointAppFactories { get; set; } = [];

    private List<ResilienceHub.AppFactory> ResilienceHubAppFactories { get; set; } = [];

    private List<SageMaker.AppFactory> SageMakerAppFactories { get; set; } = [];

    private List<Amplify.BranchFactory> BranchFactories { get; set; } = [];

    private List<Amplify.DomainFactory> AmplifyDomainFactories { get; set; } = [];

    private List<CodeArtifact.DomainFactory> CodeArtifactDomainFactories { get; set; } = [];

    private List<CustomerProfiles.DomainFactory> CustomerProfilesDomainFactories { get; set; } = [];

    private List<DataZone.DomainFactory> DataZoneDomainFactories { get; set; } = [];

    private List<Elasticsearch.DomainFactory> ElasticsearchDomainFactories { get; set; } = [];

    private List<OpenSearchService.DomainFactory> OpenSearchServiceDomainFactories { get; set; } = [];

    private List<SDB.DomainFactory> SDBDomainFactories { get; set; } = [];

    private List<SageMaker.DomainFactory> SageMakerDomainFactories { get; set; } = [];

    private List<VoiceID.DomainFactory> VoiceIDDomainFactories { get; set; } = [];

    private List<AmplifyUIBuilder.ComponentFactory> AmplifyUIBuilderComponentFactories { get; set; } = [];

    private List<ImageBuilder.ComponentFactory> ImageBuilderComponentFactories { get; set; } = [];

    private List<AmplifyUIBuilder.FormFactory> FormFactories { get; set; } = [];

    private List<AmplifyUIBuilder.ThemeFactory> AmplifyUIBuilderThemeFactories { get; set; } = [];

    private List<QuickSight.ThemeFactory> QuickSightThemeFactories { get; set; } = [];

    private List<ApiGateway.AccountFactory> ApiGatewayAccountFactories { get; set; } = [];

    private List<CertificateManager.AccountFactory> CertificateManagerAccountFactories { get; set; } = [];

    private List<Organizations.AccountFactory> OrganizationsAccountFactories { get; set; } = [];

    private List<ApiGateway.ApiKeyFactory> ApiGatewayApiKeyFactories { get; set; } = [];

    private List<AppSync.ApiKeyFactory> AppSyncApiKeyFactories { get; set; } = [];

    private List<ApiGateway.AuthorizerFactory> ApiGatewayAuthorizerFactories { get; set; } = [];

    private List<ApiGatewayV2.AuthorizerFactory> ApiGatewayV2AuthorizerFactories { get; set; } = [];

    private List<IoT.AuthorizerFactory> IoTAuthorizerFactories { get; set; } = [];

    private List<ApiGateway.BasePathMappingFactory> BasePathMappingFactories { get; set; } = [];

    private List<ApiGateway.ClientCertificateFactory> ClientCertificateFactories { get; set; } = [];

    private List<ApiGateway.DeploymentFactory> ApiGatewayDeploymentFactories { get; set; } = [];

    private List<ApiGatewayV2.DeploymentFactory> ApiGatewayV2DeploymentFactories { get; set; } = [];

    private List<AppConfig.DeploymentFactory> AppConfigDeploymentFactories { get; set; } = [];

    private List<GreengrassV2.DeploymentFactory> GreengrassV2DeploymentFactories { get; set; } = [];

    private List<LaunchWizard.DeploymentFactory> LaunchWizardDeploymentFactories { get; set; } = [];

    private List<ApiGateway.DocumentationPartFactory> DocumentationPartFactories { get; set; } = [];

    private List<ApiGateway.DocumentationVersionFactory> DocumentationVersionFactories { get; set; } = [];

    private List<ApiGateway.DomainNameFactory> ApiGatewayDomainNameFactories { get; set; } = [];

    private List<ApiGatewayV2.DomainNameFactory> ApiGatewayV2DomainNameFactories { get; set; } = [];

    private List<AppSync.DomainNameFactory> AppSyncDomainNameFactories { get; set; } = [];

    private List<ApiGateway.GatewayResponseFactory> GatewayResponseFactories { get; set; } = [];

    private List<ApiGateway.MethodFactory> MethodFactories { get; set; } = [];

    private List<ApiGateway.ModelFactory> ApiGatewayModelFactories { get; set; } = [];

    private List<ApiGatewayV2.ModelFactory> ApiGatewayV2ModelFactories { get; set; } = [];

    private List<SageMaker.ModelFactory> SageMakerModelFactories { get; set; } = [];

    private List<ApiGateway.RequestValidatorFactory> RequestValidatorFactories { get; set; } = [];

    private List<ApiGateway.ResourceFactory> ApiGatewayResourceFactories { get; set; } = [];

    private List<LakeFormation.ResourceFactory> LakeFormationResourceFactories { get; set; } = [];

    private List<ApiGateway.RestApiFactory> RestApiFactories { get; set; } = [];

    private List<ApiGateway.StageFactory> ApiGatewayStageFactories { get; set; } = [];

    private List<ApiGatewayV2.StageFactory> ApiGatewayV2StageFactories { get; set; } = [];

    private List<IVS.StageFactory> IVSStageFactories { get; set; } = [];

    private List<ApiGateway.UsagePlanFactory> UsagePlanFactories { get; set; } = [];

    private List<ApiGateway.UsagePlanKeyFactory> UsagePlanKeyFactories { get; set; } = [];

    private List<ApiGateway.VpcLinkFactory> ApiGatewayVpcLinkFactories { get; set; } = [];

    private List<ApiGatewayV2.VpcLinkFactory> ApiGatewayV2VpcLinkFactories { get; set; } = [];

    private List<ApiGatewayV2.ApiFactory> ApiFactories { get; set; } = [];

    private List<ApiGatewayV2.ApiGatewayManagedOverridesFactory> ApiGatewayManagedOverridesFactories { get; set; } = [];

    private List<ApiGatewayV2.ApiMappingFactory> ApiMappingFactories { get; set; } = [];

    private List<ApiGatewayV2.IntegrationFactory> ApiGatewayV2IntegrationFactories { get; set; } = [];

    private List<CustomerProfiles.IntegrationFactory> CustomerProfilesIntegrationFactories { get; set; } = [];

    private List<RDS.IntegrationFactory> RDSIntegrationFactories { get; set; } = [];

    private List<ApiGatewayV2.IntegrationResponseFactory> IntegrationResponseFactories { get; set; } = [];

    private List<ApiGatewayV2.RouteFactory> ApiGatewayV2RouteFactories { get; set; } = [];

    private List<AppMesh.RouteFactory> AppMeshRouteFactories { get; set; } = [];

    private List<EC2.RouteFactory> EC2RouteFactories { get; set; } = [];

    private List<RefactorSpaces.RouteFactory> RefactorSpacesRouteFactories { get; set; } = [];

    private List<ApiGatewayV2.RouteResponseFactory> RouteResponseFactories { get; set; } = [];

    private List<AppConfig.ApplicationFactory> AppConfigApplicationFactories { get; set; } = [];

    private List<AppIntegrations.ApplicationFactory> AppIntegrationsApplicationFactories { get; set; } = [];

    private List<AppStream.ApplicationFactory> AppStreamApplicationFactories { get; set; } = [];

    private List<ApplicationInsights.ApplicationFactory> ApplicationInsightsApplicationFactories { get; set; } = [];

    private List<CodeDeploy.ApplicationFactory> CodeDeployApplicationFactories { get; set; } = [];

    private List<EMRServerless.ApplicationFactory> EMRServerlessApplicationFactories { get; set; } = [];

    private List<ElasticBeanstalk.ApplicationFactory> ElasticBeanstalkApplicationFactories { get; set; } = [];

    private List<IoTFleetHub.ApplicationFactory> IoTFleetHubApplicationFactories { get; set; } = [];

    private List<KinesisAnalytics.ApplicationFactory> KinesisAnalyticsApplicationFactories { get; set; } = [];

    private List<KinesisAnalyticsV2.ApplicationFactory> KinesisAnalyticsV2ApplicationFactories { get; set; } = [];

    private List<M2.ApplicationFactory> M2ApplicationFactories { get; set; } = [];

    private List<QBusiness.ApplicationFactory> QBusinessApplicationFactories { get; set; } = [];

    private List<RefactorSpaces.ApplicationFactory> RefactorSpacesApplicationFactories { get; set; } = [];

    private List<SSO.ApplicationFactory> SSOApplicationFactories { get; set; } = [];

    private List<ServiceCatalogAppRegistry.ApplicationFactory> ServiceCatalogAppRegistryApplicationFactories { get; set; } = [];

    private List<SystemsManagerSAP.ApplicationFactory> SystemsManagerSAPApplicationFactories { get; set; } = [];

    private List<AppConfig.ConfigurationProfileFactory> ConfigurationProfileFactories { get; set; } = [];

    private List<AppConfig.DeploymentStrategyFactory> DeploymentStrategyFactories { get; set; } = [];

    private List<AppConfig.EnvironmentFactory> AppConfigEnvironmentFactories { get; set; } = [];

    private List<DataZone.EnvironmentFactory> DataZoneEnvironmentFactories { get; set; } = [];

    private List<ElasticBeanstalk.EnvironmentFactory> ElasticBeanstalkEnvironmentFactories { get; set; } = [];

    private List<FinSpace.EnvironmentFactory> FinSpaceEnvironmentFactories { get; set; } = [];

    private List<M2.EnvironmentFactory> M2EnvironmentFactories { get; set; } = [];

    private List<MWAA.EnvironmentFactory> MWAAEnvironmentFactories { get; set; } = [];

    private List<RefactorSpaces.EnvironmentFactory> RefactorSpacesEnvironmentFactories { get; set; } = [];

    private List<WorkSpacesThinClient.EnvironmentFactory> WorkSpacesThinClientEnvironmentFactories { get; set; } = [];

    private List<AppConfig.ExtensionFactory> ExtensionFactories { get; set; } = [];

    private List<AppConfig.ExtensionAssociationFactory> ExtensionAssociationFactories { get; set; } = [];

    private List<AppConfig.HostedConfigurationVersionFactory> HostedConfigurationVersionFactories { get; set; } = [];

    private List<AppFlow.ConnectorFactory> AppFlowConnectorFactories { get; set; } = [];

    private List<KafkaConnect.ConnectorFactory> KafkaConnectConnectorFactories { get; set; } = [];

    private List<PCAConnectorAD.ConnectorFactory> PCAConnectorADConnectorFactories { get; set; } = [];

    private List<PCAConnectorSCEP.ConnectorFactory> PCAConnectorSCEPConnectorFactories { get; set; } = [];

    private List<Transfer.ConnectorFactory> TransferConnectorFactories { get; set; } = [];

    private List<AppFlow.ConnectorProfileFactory> ConnectorProfileFactories { get; set; } = [];

    private List<AppFlow.FlowFactory> AppFlowFlowFactories { get; set; } = [];

    private List<Bedrock.FlowFactory> BedrockFlowFactories { get; set; } = [];

    private List<MediaConnect.FlowFactory> MediaConnectFlowFactories { get; set; } = [];

    private List<AppIntegrations.DataIntegrationFactory> DataIntegrationFactories { get; set; } = [];

    private List<AppIntegrations.EventIntegrationFactory> EventIntegrationFactories { get; set; } = [];

    private List<AppMesh.GatewayRouteFactory> GatewayRouteFactories { get; set; } = [];

    private List<AppMesh.MeshFactory> MeshFactories { get; set; } = [];

    private List<AppMesh.VirtualGatewayFactory> VirtualGatewayFactories { get; set; } = [];

    private List<AppMesh.VirtualNodeFactory> VirtualNodeFactories { get; set; } = [];

    private List<AppMesh.VirtualRouterFactory> VirtualRouterFactories { get; set; } = [];

    private List<AppMesh.VirtualServiceFactory> VirtualServiceFactories { get; set; } = [];

    private List<AppRunner.AutoScalingConfigurationFactory> AutoScalingConfigurationFactories { get; set; } = [];

    private List<AppRunner.ObservabilityConfigurationFactory> ObservabilityConfigurationFactories { get; set; } = [];

    private List<AppRunner.ServiceFactory> AppRunnerServiceFactories { get; set; } = [];

    private List<ECS.ServiceFactory> ECSServiceFactories { get; set; } = [];

    private List<RefactorSpaces.ServiceFactory> RefactorSpacesServiceFactories { get; set; } = [];

    private List<ServiceDiscovery.ServiceFactory> ServiceDiscoveryServiceFactories { get; set; } = [];

    private List<VpcLattice.ServiceFactory> VpcLatticeServiceFactories { get; set; } = [];

    private List<AppRunner.VpcConnectorFactory> VpcConnectorFactories { get; set; } = [];

    private List<AppRunner.VpcIngressConnectionFactory> VpcIngressConnectionFactories { get; set; } = [];

    private List<AppStream.AppBlockFactory> AppBlockFactories { get; set; } = [];

    private List<AppStream.AppBlockBuilderFactory> AppBlockBuilderFactories { get; set; } = [];

    private List<AppStream.ApplicationEntitlementAssociationFactory> ApplicationEntitlementAssociationFactories { get; set; } = [];

    private List<AppStream.ApplicationFleetAssociationFactory> ApplicationFleetAssociationFactories { get; set; } = [];

    private List<AppStream.DirectoryConfigFactory> DirectoryConfigFactories { get; set; } = [];

    private List<AppStream.EntitlementFactory> EntitlementFactories { get; set; } = [];

    private List<AppStream.FleetFactory> AppStreamFleetFactories { get; set; } = [];

    private List<CodeBuild.FleetFactory> CodeBuildFleetFactories { get; set; } = [];

    private List<Deadline.FleetFactory> DeadlineFleetFactories { get; set; } = [];

    private List<GameLift.FleetFactory> GameLiftFleetFactories { get; set; } = [];

    private List<IoTFleetWise.FleetFactory> IoTFleetWiseFleetFactories { get; set; } = [];

    private List<RoboMaker.FleetFactory> RoboMakerFleetFactories { get; set; } = [];

    private List<AppStream.ImageBuilderFactory> ImageBuilderFactories { get; set; } = [];

    private List<AppStream.StackFactory> AppStreamStackFactories { get; set; } = [];

    private List<CloudFormation.StackFactory> CloudFormationStackFactories { get; set; } = [];

    private List<OpsWorks.StackFactory> OpsWorksStackFactories { get; set; } = [];

    private List<AppStream.StackFleetAssociationFactory> StackFleetAssociationFactories { get; set; } = [];

    private List<AppStream.StackUserAssociationFactory> StackUserAssociationFactories { get; set; } = [];

    private List<AppStream.UserFactory> AppStreamUserFactories { get; set; } = [];

    private List<Connect.UserFactory> ConnectUserFactories { get; set; } = [];

    private List<ElastiCache.UserFactory> ElastiCacheUserFactories { get; set; } = [];

    private List<IAM.UserFactory> IAMUserFactories { get; set; } = [];

    private List<MemoryDB.UserFactory> MemoryDBUserFactories { get; set; } = [];

    private List<Transfer.UserFactory> TransferUserFactories { get; set; } = [];

    private List<AppSync.ApiCacheFactory> ApiCacheFactories { get; set; } = [];

    private List<AppSync.DataSourceFactory> AppSyncDataSourceFactories { get; set; } = [];

    private List<Bedrock.DataSourceFactory> BedrockDataSourceFactories { get; set; } = [];

    private List<DataZone.DataSourceFactory> DataZoneDataSourceFactories { get; set; } = [];

    private List<Kendra.DataSourceFactory> KendraDataSourceFactories { get; set; } = [];

    private List<QBusiness.DataSourceFactory> QBusinessDataSourceFactories { get; set; } = [];

    private List<QuickSight.DataSourceFactory> QuickSightDataSourceFactories { get; set; } = [];

    private List<AppSync.DomainNameApiAssociationFactory> DomainNameApiAssociationFactories { get; set; } = [];

    private List<AppSync.FunctionConfigurationFactory> FunctionConfigurationFactories { get; set; } = [];

    private List<AppSync.GraphQLApiFactory> GraphQLApiFactories { get; set; } = [];

    private List<AppSync.GraphQLSchemaFactory> GraphQLSchemaFactories { get; set; } = [];

    private List<AppSync.ResolverFactory> ResolverFactories { get; set; } = [];

    private List<AppSync.SourceApiAssociationFactory> SourceApiAssociationFactories { get; set; } = [];

    private List<AppTest.TestCaseFactory> TestCaseFactories { get; set; } = [];

    private List<ApplicationAutoScaling.ScalableTargetFactory> ScalableTargetFactories { get; set; } = [];

    private List<ApplicationAutoScaling.ScalingPolicyFactory> ApplicationAutoScalingScalingPolicyFactories { get; set; } = [];

    private List<AutoScaling.ScalingPolicyFactory> AutoScalingScalingPolicyFactories { get; set; } = [];

    private List<ApplicationSignals.ServiceLevelObjectiveFactory> ServiceLevelObjectiveFactories { get; set; } = [];

    private List<Athena.CapacityReservationFactory> AthenaCapacityReservationFactories { get; set; } = [];

    private List<EC2.CapacityReservationFactory> EC2CapacityReservationFactories { get; set; } = [];

    private List<Athena.DataCatalogFactory> DataCatalogFactories { get; set; } = [];

    private List<Athena.NamedQueryFactory> NamedQueryFactories { get; set; } = [];

    private List<Athena.PreparedStatementFactory> PreparedStatementFactories { get; set; } = [];

    private List<Athena.WorkGroupFactory> WorkGroupFactories { get; set; } = [];

    private List<AuditManager.AssessmentFactory> AssessmentFactories { get; set; } = [];

    private List<AutoScaling.AutoScalingGroupFactory> AutoScalingGroupFactories { get; set; } = [];

    private List<AutoScaling.LaunchConfigurationFactory> LaunchConfigurationFactories { get; set; } = [];

    private List<AutoScaling.LifecycleHookFactory> LifecycleHookFactories { get; set; } = [];

    private List<AutoScaling.ScheduledActionFactory> AutoScalingScheduledActionFactories { get; set; } = [];

    private List<Redshift.ScheduledActionFactory> RedshiftScheduledActionFactories { get; set; } = [];

    private List<AutoScaling.WarmPoolFactory> WarmPoolFactories { get; set; } = [];

    private List<AutoScalingPlans.ScalingPlanFactory> ScalingPlanFactories { get; set; } = [];

    private List<B2BI.CapabilityFactory> CapabilityFactories { get; set; } = [];

    private List<B2BI.PartnershipFactory> PartnershipFactories { get; set; } = [];

    private List<B2BI.ProfileFactory> B2BIProfileFactories { get; set; } = [];

    private List<RolesAnywhere.ProfileFactory> RolesAnywhereProfileFactories { get; set; } = [];

    private List<Route53Profiles.ProfileFactory> Route53ProfilesProfileFactories { get; set; } = [];

    private List<Transfer.ProfileFactory> TransferProfileFactories { get; set; } = [];

    private List<B2BI.TransformerFactory> TransformerFactories { get; set; } = [];

    private List<BCMDataExports.ExportFactory> ExportFactories { get; set; } = [];

    private List<Backup.BackupPlanFactory> BackupPlanFactories { get; set; } = [];

    private List<Backup.BackupSelectionFactory> BackupSelectionFactories { get; set; } = [];

    private List<Backup.BackupVaultFactory> BackupVaultFactories { get; set; } = [];

    private List<Backup.FrameworkFactory> FrameworkFactories { get; set; } = [];

    private List<Backup.ReportPlanFactory> ReportPlanFactories { get; set; } = [];

    private List<Backup.RestoreTestingPlanFactory> RestoreTestingPlanFactories { get; set; } = [];

    private List<Backup.RestoreTestingSelectionFactory> RestoreTestingSelectionFactories { get; set; } = [];

    private List<BackupGateway.HypervisorFactory> HypervisorFactories { get; set; } = [];

    private List<Batch.ComputeEnvironmentFactory> ComputeEnvironmentFactories { get; set; } = [];

    private List<Batch.JobDefinitionFactory> JobDefinitionFactories { get; set; } = [];

    private List<Batch.JobQueueFactory> JobQueueFactories { get; set; } = [];

    private List<Batch.SchedulingPolicyFactory> SchedulingPolicyFactories { get; set; } = [];

    private List<Bedrock.AgentFactory> BedrockAgentFactories { get; set; } = [];

    private List<DataSync.AgentFactory> DataSyncAgentFactories { get; set; } = [];

    private List<Bedrock.AgentAliasFactory> AgentAliasFactories { get; set; } = [];

    private List<Bedrock.FlowAliasFactory> FlowAliasFactories { get; set; } = [];

    private List<Bedrock.FlowVersionFactory> FlowVersionFactories { get; set; } = [];

    private List<Bedrock.GuardrailFactory> GuardrailFactories { get; set; } = [];

    private List<Bedrock.GuardrailVersionFactory> GuardrailVersionFactories { get; set; } = [];

    private List<Bedrock.KnowledgeBaseFactory> BedrockKnowledgeBaseFactories { get; set; } = [];

    private List<Wisdom.KnowledgeBaseFactory> WisdomKnowledgeBaseFactories { get; set; } = [];

    private List<Bedrock.PromptFactory> BedrockPromptFactories { get; set; } = [];

    private List<Connect.PromptFactory> ConnectPromptFactories { get; set; } = [];

    private List<Bedrock.PromptVersionFactory> PromptVersionFactories { get; set; } = [];

    private List<BillingConductor.BillingGroupFactory> BillingConductorBillingGroupFactories { get; set; } = [];

    private List<IoT.BillingGroupFactory> IoTBillingGroupFactories { get; set; } = [];

    private List<BillingConductor.CustomLineItemFactory> CustomLineItemFactories { get; set; } = [];

    private List<BillingConductor.PricingPlanFactory> PricingPlanFactories { get; set; } = [];

    private List<BillingConductor.PricingRuleFactory> PricingRuleFactories { get; set; } = [];

    private List<Budgets.BudgetFactory> BudgetFactories { get; set; } = [];

    private List<Budgets.BudgetsActionFactory> BudgetsActionFactories { get; set; } = [];

    private List<CE.AnomalyMonitorFactory> AnomalyMonitorFactories { get; set; } = [];

    private List<CE.AnomalySubscriptionFactory> AnomalySubscriptionFactories { get; set; } = [];

    private List<CE.CostCategoryFactory> CostCategoryFactories { get; set; } = [];

    private List<CUR.ReportDefinitionFactory> ReportDefinitionFactories { get; set; } = [];

    private List<Cassandra.KeyspaceFactory> KeyspaceFactories { get; set; } = [];

    private List<Cassandra.TableFactory> CassandraTableFactories { get; set; } = [];

    private List<DynamoDB.TableFactory> DynamoDBTableFactories { get; set; } = [];

    private List<Glue.TableFactory> GlueTableFactories { get; set; } = [];

    private List<Timestream.TableFactory> TimestreamTableFactories { get; set; } = [];

    private List<Chatbot.MicrosoftTeamsChannelConfigurationFactory> MicrosoftTeamsChannelConfigurationFactories { get; set; } = [];

    private List<Chatbot.SlackChannelConfigurationFactory> ChatbotSlackChannelConfigurationFactories { get; set; } = [];

    private List<SupportApp.SlackChannelConfigurationFactory> SupportAppSlackChannelConfigurationFactories { get; set; } = [];

    private List<CleanRooms.AnalysisTemplateFactory> AnalysisTemplateFactories { get; set; } = [];

    private List<CleanRooms.CollaborationFactory> CollaborationFactories { get; set; } = [];

    private List<CleanRooms.ConfiguredTableFactory> ConfiguredTableFactories { get; set; } = [];

    private List<CleanRooms.ConfiguredTableAssociationFactory> ConfiguredTableAssociationFactories { get; set; } = [];

    private List<CleanRooms.IdMappingTableFactory> IdMappingTableFactories { get; set; } = [];

    private List<CleanRooms.IdNamespaceAssociationFactory> IdNamespaceAssociationFactories { get; set; } = [];

    private List<CleanRooms.MembershipFactory> MembershipFactories { get; set; } = [];

    private List<CleanRooms.PrivacyBudgetTemplateFactory> PrivacyBudgetTemplateFactories { get; set; } = [];

    private List<CleanRoomsML.TrainingDatasetFactory> TrainingDatasetFactories { get; set; } = [];

    private List<Cloud9.EnvironmentEC2Factory> EnvironmentEC2Factories { get; set; } = [];

    private List<CloudFormation.CustomResourceFactory> CustomResourceFactories { get; set; } = [];

    private List<CloudFormation.HookDefaultVersionFactory> HookDefaultVersionFactories { get; set; } = [];

    private List<CloudFormation.HookTypeConfigFactory> HookTypeConfigFactories { get; set; } = [];

    private List<CloudFormation.HookVersionFactory> HookVersionFactories { get; set; } = [];

    private List<CloudFormation.MacroFactory> MacroFactories { get; set; } = [];

    private List<CloudFormation.ModuleDefaultVersionFactory> ModuleDefaultVersionFactories { get; set; } = [];

    private List<CloudFormation.ModuleVersionFactory> ModuleVersionFactories { get; set; } = [];

    private List<CloudFormation.PublicTypeVersionFactory> PublicTypeVersionFactories { get; set; } = [];

    private List<CloudFormation.PublisherFactory> PublisherFactories { get; set; } = [];

    private List<CloudFormation.ResourceDefaultVersionFactory> ResourceDefaultVersionFactories { get; set; } = [];

    private List<CloudFormation.ResourceVersionFactory> ResourceVersionFactories { get; set; } = [];

    private List<CloudFormation.StackSetFactory> StackSetFactories { get; set; } = [];

    private List<CloudFormation.TypeActivationFactory> TypeActivationFactories { get; set; } = [];

    private List<CloudFormation.WaitConditionFactory> WaitConditionFactories { get; set; } = [];

    private List<CloudFormation.WaitConditionHandleFactory> WaitConditionHandleFactories { get; set; } = [];

    private List<CloudFront.CachePolicyFactory> CachePolicyFactories { get; set; } = [];

    private List<CloudFront.CloudFrontOriginAccessIdentityFactory> CloudFrontOriginAccessIdentityFactories { get; set; } = [];

    private List<CloudFront.ContinuousDeploymentPolicyFactory> ContinuousDeploymentPolicyFactories { get; set; } = [];

    private List<CloudFront.DistributionFactory> CloudFrontDistributionFactories { get; set; } = [];

    private List<Lightsail.DistributionFactory> LightsailDistributionFactories { get; set; } = [];

    private List<CloudFront.FunctionFactory> CloudFrontFunctionFactories { get; set; } = [];

    private List<Lambda.FunctionFactory> LambdaFunctionFactories { get; set; } = [];

    private List<CloudFront.KeyGroupFactory> KeyGroupFactories { get; set; } = [];

    private List<CloudFront.KeyValueStoreFactory> KeyValueStoreFactories { get; set; } = [];

    private List<CloudFront.MonitoringSubscriptionFactory> MonitoringSubscriptionFactories { get; set; } = [];

    private List<CloudFront.OriginAccessControlFactory> OriginAccessControlFactories { get; set; } = [];

    private List<CloudFront.OriginRequestPolicyFactory> OriginRequestPolicyFactories { get; set; } = [];

    private List<CloudFront.PublicKeyFactory> CloudFrontPublicKeyFactories { get; set; } = [];

    private List<IVS.PublicKeyFactory> IVSPublicKeyFactories { get; set; } = [];

    private List<CloudFront.RealtimeLogConfigFactory> RealtimeLogConfigFactories { get; set; } = [];

    private List<CloudFront.ResponseHeadersPolicyFactory> ResponseHeadersPolicyFactories { get; set; } = [];

    private List<CloudFront.StreamingDistributionFactory> StreamingDistributionFactories { get; set; } = [];

    private List<CloudTrail.ChannelFactory> CloudTrailChannelFactories { get; set; } = [];

    private List<IVS.ChannelFactory> IVSChannelFactories { get; set; } = [];

    private List<IoTAnalytics.ChannelFactory> IoTAnalyticsChannelFactories { get; set; } = [];

    private List<MediaLive.ChannelFactory> MediaLiveChannelFactories { get; set; } = [];

    private List<MediaPackage.ChannelFactory> MediaPackageChannelFactories { get; set; } = [];

    private List<MediaPackageV2.ChannelFactory> MediaPackageV2ChannelFactories { get; set; } = [];

    private List<MediaTailor.ChannelFactory> MediaTailorChannelFactories { get; set; } = [];

    private List<CloudTrail.EventDataStoreFactory> EventDataStoreFactories { get; set; } = [];

    private List<CloudTrail.ResourcePolicyFactory> CloudTrailResourcePolicyFactories { get; set; } = [];

    private List<Lex.ResourcePolicyFactory> LexResourcePolicyFactories { get; set; } = [];

    private List<Logs.ResourcePolicyFactory> LogsResourcePolicyFactories { get; set; } = [];

    private List<Organizations.ResourcePolicyFactory> OrganizationsResourcePolicyFactories { get; set; } = [];

    private List<SSM.ResourcePolicyFactory> SSMResourcePolicyFactories { get; set; } = [];

    private List<SecretsManager.ResourcePolicyFactory> SecretsManagerResourcePolicyFactories { get; set; } = [];

    private List<VpcLattice.ResourcePolicyFactory> VpcLatticeResourcePolicyFactories { get; set; } = [];

    private List<XRay.ResourcePolicyFactory> XRayResourcePolicyFactories { get; set; } = [];

    private List<CloudTrail.TrailFactory> TrailFactories { get; set; } = [];

    private List<CloudWatch.AlarmFactory> CloudWatchAlarmFactories { get; set; } = [];

    private List<Lightsail.AlarmFactory> LightsailAlarmFactories { get; set; } = [];

    private List<CloudWatch.AnomalyDetectorFactory> CloudWatchAnomalyDetectorFactories { get; set; } = [];

    private List<LookoutMetrics.AnomalyDetectorFactory> LookoutMetricsAnomalyDetectorFactories { get; set; } = [];

    private List<CloudWatch.CompositeAlarmFactory> CompositeAlarmFactories { get; set; } = [];

    private List<CloudWatch.DashboardFactory> CloudWatchDashboardFactories { get; set; } = [];

    private List<IoTSiteWise.DashboardFactory> IoTSiteWiseDashboardFactories { get; set; } = [];

    private List<QuickSight.DashboardFactory> QuickSightDashboardFactories { get; set; } = [];

    private List<CloudWatch.InsightRuleFactory> InsightRuleFactories { get; set; } = [];

    private List<CloudWatch.MetricStreamFactory> MetricStreamFactories { get; set; } = [];

    private List<CodeArtifact.PackageGroupFactory> PackageGroupFactories { get; set; } = [];

    private List<CodeArtifact.RepositoryFactory> CodeArtifactRepositoryFactories { get; set; } = [];

    private List<CodeCommit.RepositoryFactory> CodeCommitRepositoryFactories { get; set; } = [];

    private List<ECR.RepositoryFactory> ECRRepositoryFactories { get; set; } = [];

    private List<CodeBuild.ProjectFactory> CodeBuildProjectFactories { get; set; } = [];

    private List<DataBrew.ProjectFactory> DataBrewProjectFactories { get; set; } = [];

    private List<DataZone.ProjectFactory> DataZoneProjectFactories { get; set; } = [];

    private List<Evidently.ProjectFactory> EvidentlyProjectFactories { get; set; } = [];

    private List<IoT1Click.ProjectFactory> IoT1ClickProjectFactories { get; set; } = [];

    private List<IoTSiteWise.ProjectFactory> IoTSiteWiseProjectFactories { get; set; } = [];

    private List<LookoutVision.ProjectFactory> LookoutVisionProjectFactories { get; set; } = [];

    private List<Rekognition.ProjectFactory> RekognitionProjectFactories { get; set; } = [];

    private List<SageMaker.ProjectFactory> SageMakerProjectFactories { get; set; } = [];

    private List<CodeBuild.ReportGroupFactory> ReportGroupFactories { get; set; } = [];

    private List<CodeBuild.SourceCredentialFactory> SourceCredentialFactories { get; set; } = [];

    private List<CodeConnections.ConnectionFactory> CodeConnectionsConnectionFactories { get; set; } = [];

    private List<CodeStarConnections.ConnectionFactory> CodeStarConnectionsConnectionFactories { get; set; } = [];

    private List<Events.ConnectionFactory> EventsConnectionFactories { get; set; } = [];

    private List<Glue.ConnectionFactory> GlueConnectionFactories { get; set; } = [];

    private List<CodeDeploy.DeploymentConfigFactory> DeploymentConfigFactories { get; set; } = [];

    private List<CodeDeploy.DeploymentGroupFactory> DeploymentGroupFactories { get; set; } = [];

    private List<CodeGuruProfiler.ProfilingGroupFactory> ProfilingGroupFactories { get; set; } = [];

    private List<CodeGuruReviewer.RepositoryAssociationFactory> RepositoryAssociationFactories { get; set; } = [];

    private List<CodePipeline.CustomActionTypeFactory> CustomActionTypeFactories { get; set; } = [];

    private List<CodePipeline.PipelineFactory> CodePipelinePipelineFactories { get; set; } = [];

    private List<DataPipeline.PipelineFactory> DataPipelinePipelineFactories { get; set; } = [];

    private List<IoTAnalytics.PipelineFactory> IoTAnalyticsPipelineFactories { get; set; } = [];

    private List<OSIS.PipelineFactory> OSISPipelineFactories { get; set; } = [];

    private List<SageMaker.PipelineFactory> SageMakerPipelineFactories { get; set; } = [];

    private List<CodePipeline.WebhookFactory> WebhookFactories { get; set; } = [];

    private List<CodeStar.GitHubRepositoryFactory> GitHubRepositoryFactories { get; set; } = [];

    private List<CodeStarConnections.RepositoryLinkFactory> RepositoryLinkFactories { get; set; } = [];

    private List<CodeStarConnections.SyncConfigurationFactory> SyncConfigurationFactories { get; set; } = [];

    private List<CodeStarNotifications.NotificationRuleFactory> NotificationRuleFactories { get; set; } = [];

    private List<Cognito.IdentityPoolFactory> IdentityPoolFactories { get; set; } = [];

    private List<Cognito.IdentityPoolPrincipalTagFactory> IdentityPoolPrincipalTagFactories { get; set; } = [];

    private List<Cognito.IdentityPoolRoleAttachmentFactory> IdentityPoolRoleAttachmentFactories { get; set; } = [];

    private List<Cognito.LogDeliveryConfigurationFactory> LogDeliveryConfigurationFactories { get; set; } = [];

    private List<Cognito.UserPoolFactory> UserPoolFactories { get; set; } = [];

    private List<Cognito.UserPoolClientFactory> UserPoolClientFactories { get; set; } = [];

    private List<Cognito.UserPoolDomainFactory> UserPoolDomainFactories { get; set; } = [];

    private List<Cognito.UserPoolGroupFactory> UserPoolGroupFactories { get; set; } = [];

    private List<Cognito.UserPoolIdentityProviderFactory> UserPoolIdentityProviderFactories { get; set; } = [];

    private List<Cognito.UserPoolResourceServerFactory> UserPoolResourceServerFactories { get; set; } = [];

    private List<Cognito.UserPoolRiskConfigurationAttachmentFactory> UserPoolRiskConfigurationAttachmentFactories { get; set; } = [];

    private List<Cognito.UserPoolUICustomizationAttachmentFactory> UserPoolUICustomizationAttachmentFactories { get; set; } = [];

    private List<Cognito.UserPoolUserFactory> UserPoolUserFactories { get; set; } = [];

    private List<Cognito.UserPoolUserToGroupAttachmentFactory> UserPoolUserToGroupAttachmentFactories { get; set; } = [];

    private List<Comprehend.DocumentClassifierFactory> DocumentClassifierFactories { get; set; } = [];

    private List<Comprehend.FlywheelFactory> FlywheelFactories { get; set; } = [];

    private List<Config.AggregationAuthorizationFactory> AggregationAuthorizationFactories { get; set; } = [];

    private List<Config.ConfigRuleFactory> ConfigRuleFactories { get; set; } = [];

    private List<Config.ConfigurationAggregatorFactory> ConfigurationAggregatorFactories { get; set; } = [];

    private List<Config.ConfigurationRecorderFactory> ConfigurationRecorderFactories { get; set; } = [];

    private List<Config.ConformancePackFactory> ConformancePackFactories { get; set; } = [];

    private List<Config.DeliveryChannelFactory> DeliveryChannelFactories { get; set; } = [];

    private List<Config.OrganizationConfigRuleFactory> OrganizationConfigRuleFactories { get; set; } = [];

    private List<Config.OrganizationConformancePackFactory> OrganizationConformancePackFactories { get; set; } = [];

    private List<Config.RemediationConfigurationFactory> RemediationConfigurationFactories { get; set; } = [];

    private List<Config.StoredQueryFactory> StoredQueryFactories { get; set; } = [];

    private List<Connect.AgentStatusFactory> AgentStatusFactories { get; set; } = [];

    private List<Connect.ApprovedOriginFactory> ApprovedOriginFactories { get; set; } = [];

    private List<Connect.ContactFlowFactory> ContactFlowFactories { get; set; } = [];

    private List<Connect.ContactFlowModuleFactory> ContactFlowModuleFactories { get; set; } = [];

    private List<Connect.EvaluationFormFactory> EvaluationFormFactories { get; set; } = [];

    private List<Connect.HoursOfOperationFactory> HoursOfOperationFactories { get; set; } = [];

    private List<Connect.InstanceFactory> ConnectInstanceFactories { get; set; } = [];

    private List<EC2.InstanceFactory> EC2InstanceFactories { get; set; } = [];

    private List<Lightsail.InstanceFactory> LightsailInstanceFactories { get; set; } = [];

    private List<OpsWorks.InstanceFactory> OpsWorksInstanceFactories { get; set; } = [];

    private List<SSO.InstanceFactory> SSOInstanceFactories { get; set; } = [];

    private List<ServiceDiscovery.InstanceFactory> ServiceDiscoveryInstanceFactories { get; set; } = [];

    private List<Connect.InstanceStorageConfigFactory> InstanceStorageConfigFactories { get; set; } = [];

    private List<Connect.IntegrationAssociationFactory> IntegrationAssociationFactories { get; set; } = [];

    private List<Connect.PhoneNumberFactory> PhoneNumberFactories { get; set; } = [];

    private List<Connect.PredefinedAttributeFactory> PredefinedAttributeFactories { get; set; } = [];

    private List<Connect.QueueFactory> ConnectQueueFactories { get; set; } = [];

    private List<Deadline.QueueFactory> DeadlineQueueFactories { get; set; } = [];

    private List<MediaConvert.QueueFactory> MediaConvertQueueFactories { get; set; } = [];

    private List<SQS.QueueFactory> SQSQueueFactories { get; set; } = [];

    private List<Connect.QuickConnectFactory> QuickConnectFactories { get; set; } = [];

    private List<Connect.RoutingProfileFactory> RoutingProfileFactories { get; set; } = [];

    private List<Connect.RuleFactory> ConnectRuleFactories { get; set; } = [];

    private List<Events.RuleFactory> EventsRuleFactories { get; set; } = [];

    private List<VpcLattice.RuleFactory> VpcLatticeRuleFactories { get; set; } = [];

    private List<WAF.RuleFactory> WAFRuleFactories { get; set; } = [];

    private List<WAFRegional.RuleFactory> WAFRegionalRuleFactories { get; set; } = [];

    private List<Connect.SecurityKeyFactory> SecurityKeyFactories { get; set; } = [];

    private List<Connect.SecurityProfileFactory> ConnectSecurityProfileFactories { get; set; } = [];

    private List<IoT.SecurityProfileFactory> IoTSecurityProfileFactories { get; set; } = [];

    private List<Connect.TaskTemplateFactory> TaskTemplateFactories { get; set; } = [];

    private List<Connect.TrafficDistributionGroupFactory> TrafficDistributionGroupFactories { get; set; } = [];

    private List<Connect.UserHierarchyGroupFactory> UserHierarchyGroupFactories { get; set; } = [];

    private List<Connect.UserHierarchyStructureFactory> UserHierarchyStructureFactories { get; set; } = [];

    private List<Connect.ViewFactory> ConnectViewFactories { get; set; } = [];

    private List<ResourceExplorer2.ViewFactory> ResourceExplorer2ViewFactories { get; set; } = [];

    private List<Connect.ViewVersionFactory> ViewVersionFactories { get; set; } = [];

    private List<ConnectCampaigns.CampaignFactory> ConnectCampaignsCampaignFactories { get; set; } = [];

    private List<IoTFleetWise.CampaignFactory> IoTFleetWiseCampaignFactories { get; set; } = [];

    private List<Pinpoint.CampaignFactory> PinpointCampaignFactories { get; set; } = [];

    private List<ControlTower.EnabledBaselineFactory> EnabledBaselineFactories { get; set; } = [];

    private List<ControlTower.EnabledControlFactory> EnabledControlFactories { get; set; } = [];

    private List<ControlTower.LandingZoneFactory> LandingZoneFactories { get; set; } = [];

    private List<CustomerProfiles.CalculatedAttributeDefinitionFactory> CalculatedAttributeDefinitionFactories { get; set; } = [];

    private List<CustomerProfiles.EventStreamFactory> CustomerProfilesEventStreamFactories { get; set; } = [];

    private List<Pinpoint.EventStreamFactory> PinpointEventStreamFactories { get; set; } = [];

    private List<CustomerProfiles.ObjectTypeFactory> ObjectTypeFactories { get; set; } = [];

    private List<DAX.ClusterFactory> DAXClusterFactories { get; set; } = [];

    private List<DocDBElastic.ClusterFactory> DocDBElasticClusterFactories { get; set; } = [];

    private List<ECS.ClusterFactory> ECSClusterFactories { get; set; } = [];

    private List<EKS.ClusterFactory> EKSClusterFactories { get; set; } = [];

    private List<EMR.ClusterFactory> EMRClusterFactories { get; set; } = [];

    private List<MSK.ClusterFactory> MSKClusterFactories { get; set; } = [];

    private List<MediaLive.ClusterFactory> MediaLiveClusterFactories { get; set; } = [];

    private List<MemoryDB.ClusterFactory> MemoryDBClusterFactories { get; set; } = [];

    private List<Redshift.ClusterFactory> RedshiftClusterFactories { get; set; } = [];

    private List<Route53RecoveryControl.ClusterFactory> Route53RecoveryControlClusterFactories { get; set; } = [];

    private List<SageMaker.ClusterFactory> SageMakerClusterFactories { get; set; } = [];

    private List<DAX.ParameterGroupFactory> DAXParameterGroupFactories { get; set; } = [];

    private List<ElastiCache.ParameterGroupFactory> ElastiCacheParameterGroupFactories { get; set; } = [];

    private List<MemoryDB.ParameterGroupFactory> MemoryDBParameterGroupFactories { get; set; } = [];

    private List<DAX.SubnetGroupFactory> DAXSubnetGroupFactories { get; set; } = [];

    private List<ElastiCache.SubnetGroupFactory> ElastiCacheSubnetGroupFactories { get; set; } = [];

    private List<MemoryDB.SubnetGroupFactory> MemoryDBSubnetGroupFactories { get; set; } = [];

    private List<DLM.LifecyclePolicyFactory> DLMLifecyclePolicyFactories { get; set; } = [];

    private List<ImageBuilder.LifecyclePolicyFactory> ImageBuilderLifecyclePolicyFactories { get; set; } = [];

    private List<OpenSearchServerless.LifecyclePolicyFactory> OpenSearchServerlessLifecyclePolicyFactories { get; set; } = [];

    private List<DMS.DataProviderFactory> DataProviderFactories { get; set; } = [];

    private List<DMS.EndpointFactory> DMSEndpointFactories { get; set; } = [];

    private List<Events.EndpointFactory> EventsEndpointFactories { get; set; } = [];

    private List<S3Outposts.EndpointFactory> S3OutpostsEndpointFactories { get; set; } = [];

    private List<SageMaker.EndpointFactory> SageMakerEndpointFactories { get; set; } = [];

    private List<DMS.EventSubscriptionFactory> DMSEventSubscriptionFactories { get; set; } = [];

    private List<DocDB.EventSubscriptionFactory> DocDBEventSubscriptionFactories { get; set; } = [];

    private List<Neptune.EventSubscriptionFactory> NeptuneEventSubscriptionFactories { get; set; } = [];

    private List<RDS.EventSubscriptionFactory> RDSEventSubscriptionFactories { get; set; } = [];

    private List<Redshift.EventSubscriptionFactory> RedshiftEventSubscriptionFactories { get; set; } = [];

    private List<DMS.InstanceProfileFactory> DMSInstanceProfileFactories { get; set; } = [];

    private List<IAM.InstanceProfileFactory> IAMInstanceProfileFactories { get; set; } = [];

    private List<DMS.MigrationProjectFactory> MigrationProjectFactories { get; set; } = [];

    private List<DMS.ReplicationConfigFactory> ReplicationConfigFactories { get; set; } = [];

    private List<DMS.ReplicationInstanceFactory> ReplicationInstanceFactories { get; set; } = [];

    private List<DMS.ReplicationSubnetGroupFactory> ReplicationSubnetGroupFactories { get; set; } = [];

    private List<DMS.ReplicationTaskFactory> ReplicationTaskFactories { get; set; } = [];

    private List<DataBrew.DatasetFactory> DataBrewDatasetFactories { get; set; } = [];

    private List<Forecast.DatasetFactory> ForecastDatasetFactories { get; set; } = [];

    private List<IoTAnalytics.DatasetFactory> IoTAnalyticsDatasetFactories { get; set; } = [];

    private List<Personalize.DatasetFactory> PersonalizeDatasetFactories { get; set; } = [];

    private List<DataBrew.JobFactory> DataBrewJobFactories { get; set; } = [];

    private List<Glue.JobFactory> GlueJobFactories { get; set; } = [];

    private List<DataBrew.RecipeFactory> RecipeFactories { get; set; } = [];

    private List<DataBrew.RulesetFactory> RulesetFactories { get; set; } = [];

    private List<DataBrew.ScheduleFactory> DataBrewScheduleFactories { get; set; } = [];

    private List<Scheduler.ScheduleFactory> SchedulerScheduleFactories { get; set; } = [];

    private List<DataSync.LocationAzureBlobFactory> LocationAzureBlobFactories { get; set; } = [];

    private List<DataSync.LocationEFSFactory> LocationEFSFactories { get; set; } = [];

    private List<DataSync.LocationFSxLustreFactory> LocationFSxLustreFactories { get; set; } = [];

    private List<DataSync.LocationFSxONTAPFactory> LocationFSxONTAPFactories { get; set; } = [];

    private List<DataSync.LocationFSxOpenZFSFactory> LocationFSxOpenZFSFactories { get; set; } = [];

    private List<DataSync.LocationFSxWindowsFactory> LocationFSxWindowsFactories { get; set; } = [];

    private List<DataSync.LocationHDFSFactory> LocationHDFSFactories { get; set; } = [];

    private List<DataSync.LocationNFSFactory> LocationNFSFactories { get; set; } = [];

    private List<DataSync.LocationObjectStorageFactory> LocationObjectStorageFactories { get; set; } = [];

    private List<DataSync.LocationS3Factory> LocationS3Factories { get; set; } = [];

    private List<DataSync.LocationSMBFactory> LocationSMBFactories { get; set; } = [];

    private List<DataSync.StorageSystemFactory> StorageSystemFactories { get; set; } = [];

    private List<DataSync.TaskFactory> TaskFactories { get; set; } = [];

    private List<DataZone.EnvironmentActionsFactory> EnvironmentActionsFactories { get; set; } = [];

    private List<DataZone.EnvironmentBlueprintConfigurationFactory> EnvironmentBlueprintConfigurationFactories { get; set; } = [];

    private List<DataZone.EnvironmentProfileFactory> EnvironmentProfileFactories { get; set; } = [];

    private List<DataZone.GroupProfileFactory> GroupProfileFactories { get; set; } = [];

    private List<DataZone.ProjectMembershipFactory> ProjectMembershipFactories { get; set; } = [];

    private List<DataZone.SubscriptionTargetFactory> SubscriptionTargetFactories { get; set; } = [];

    private List<DataZone.UserProfileFactory> DataZoneUserProfileFactories { get; set; } = [];

    private List<OpsWorks.UserProfileFactory> OpsWorksUserProfileFactories { get; set; } = [];

    private List<SageMaker.UserProfileFactory> SageMakerUserProfileFactories { get; set; } = [];

    private List<Deadline.FarmFactory> FarmFactories { get; set; } = [];

    private List<Deadline.LicenseEndpointFactory> LicenseEndpointFactories { get; set; } = [];

    private List<Deadline.MeteredProductFactory> MeteredProductFactories { get; set; } = [];

    private List<Deadline.MonitorFactory> DeadlineMonitorFactories { get; set; } = [];

    private List<InternetMonitor.MonitorFactory> InternetMonitorMonitorFactories { get; set; } = [];

    private List<Deadline.QueueEnvironmentFactory> QueueEnvironmentFactories { get; set; } = [];

    private List<Deadline.QueueFleetAssociationFactory> QueueFleetAssociationFactories { get; set; } = [];

    private List<Deadline.StorageProfileFactory> StorageProfileFactories { get; set; } = [];

    private List<Detective.GraphFactory> DetectiveGraphFactories { get; set; } = [];

    private List<NeptuneGraph.GraphFactory> NeptuneGraphGraphFactories { get; set; } = [];

    private List<Detective.MemberInvitationFactory> MemberInvitationFactories { get; set; } = [];

    private List<Detective.OrganizationAdminFactory> OrganizationAdminFactories { get; set; } = [];

    private List<DevOpsGuru.LogAnomalyDetectionIntegrationFactory> LogAnomalyDetectionIntegrationFactories { get; set; } = [];

    private List<DevOpsGuru.NotificationChannelFactory> DevOpsGuruNotificationChannelFactories { get; set; } = [];

    private List<FMS.NotificationChannelFactory> FMSNotificationChannelFactories { get; set; } = [];

    private List<DevOpsGuru.ResourceCollectionFactory> ResourceCollectionFactories { get; set; } = [];

    private List<DirectoryService.MicrosoftADFactory> MicrosoftADFactories { get; set; } = [];

    private List<DirectoryService.SimpleADFactory> SimpleADFactories { get; set; } = [];

    private List<DocDB.DBClusterFactory> DocDBDBClusterFactories { get; set; } = [];

    private List<Neptune.DBClusterFactory> NeptuneDBClusterFactories { get; set; } = [];

    private List<RDS.DBClusterFactory> RDSDBClusterFactories { get; set; } = [];

    private List<DocDB.DBClusterParameterGroupFactory> DocDBDBClusterParameterGroupFactories { get; set; } = [];

    private List<Neptune.DBClusterParameterGroupFactory> NeptuneDBClusterParameterGroupFactories { get; set; } = [];

    private List<RDS.DBClusterParameterGroupFactory> RDSDBClusterParameterGroupFactories { get; set; } = [];

    private List<DocDB.DBInstanceFactory> DocDBDBInstanceFactories { get; set; } = [];

    private List<Neptune.DBInstanceFactory> NeptuneDBInstanceFactories { get; set; } = [];

    private List<RDS.DBInstanceFactory> RDSDBInstanceFactories { get; set; } = [];

    private List<DocDB.DBSubnetGroupFactory> DocDBDBSubnetGroupFactories { get; set; } = [];

    private List<Neptune.DBSubnetGroupFactory> NeptuneDBSubnetGroupFactories { get; set; } = [];

    private List<RDS.DBSubnetGroupFactory> RDSDBSubnetGroupFactories { get; set; } = [];

    private List<DynamoDB.GlobalTableFactory> GlobalTableFactories { get; set; } = [];

    private List<EC2.CapacityReservationFleetFactory> CapacityReservationFleetFactories { get; set; } = [];

    private List<EC2.CarrierGatewayFactory> CarrierGatewayFactories { get; set; } = [];

    private List<EC2.ClientVpnAuthorizationRuleFactory> ClientVpnAuthorizationRuleFactories { get; set; } = [];

    private List<EC2.ClientVpnEndpointFactory> ClientVpnEndpointFactories { get; set; } = [];

    private List<EC2.ClientVpnRouteFactory> ClientVpnRouteFactories { get; set; } = [];

    private List<EC2.ClientVpnTargetNetworkAssociationFactory> ClientVpnTargetNetworkAssociationFactories { get; set; } = [];

    private List<EC2.CustomerGatewayFactory> CustomerGatewayFactories { get; set; } = [];

    private List<EC2.DHCPOptionsFactory> DHCPOptionsFactories { get; set; } = [];

    private List<EC2.EC2FleetFactory> EC2FleetFactories { get; set; } = [];

    private List<EC2.EIPFactory> EIPFactories { get; set; } = [];

    private List<EC2.EIPAssociationFactory> EIPAssociationFactories { get; set; } = [];

    private List<EC2.EgressOnlyInternetGatewayFactory> EgressOnlyInternetGatewayFactories { get; set; } = [];

    private List<EC2.EnclaveCertificateIamRoleAssociationFactory> EnclaveCertificateIamRoleAssociationFactories { get; set; } = [];

    private List<EC2.FlowLogFactory> FlowLogFactories { get; set; } = [];

    private List<EC2.GatewayRouteTableAssociationFactory> GatewayRouteTableAssociationFactories { get; set; } = [];

    private List<EC2.HostFactory> HostFactories { get; set; } = [];

    private List<EC2.IPAMFactory> IPAMFactories { get; set; } = [];

    private List<EC2.IPAMAllocationFactory> IPAMAllocationFactories { get; set; } = [];

    private List<EC2.IPAMPoolFactory> IPAMPoolFactories { get; set; } = [];

    private List<EC2.IPAMPoolCidrFactory> IPAMPoolCidrFactories { get; set; } = [];

    private List<EC2.IPAMResourceDiscoveryFactory> IPAMResourceDiscoveryFactories { get; set; } = [];

    private List<EC2.IPAMResourceDiscoveryAssociationFactory> IPAMResourceDiscoveryAssociationFactories { get; set; } = [];

    private List<EC2.IPAMScopeFactory> IPAMScopeFactories { get; set; } = [];

    private List<EC2.InstanceConnectEndpointFactory> InstanceConnectEndpointFactories { get; set; } = [];

    private List<EC2.InternetGatewayFactory> InternetGatewayFactories { get; set; } = [];

    private List<EC2.KeyPairFactory> KeyPairFactories { get; set; } = [];

    private List<EC2.LaunchTemplateFactory> LaunchTemplateFactories { get; set; } = [];

    private List<EC2.LocalGatewayRouteFactory> LocalGatewayRouteFactories { get; set; } = [];

    private List<EC2.LocalGatewayRouteTableFactory> LocalGatewayRouteTableFactories { get; set; } = [];

    private List<EC2.LocalGatewayRouteTableVPCAssociationFactory> LocalGatewayRouteTableVPCAssociationFactories { get; set; } = [];

    private List<EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactory> LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactories { get; set; } = [];

    private List<EC2.NatGatewayFactory> NatGatewayFactories { get; set; } = [];

    private List<EC2.NetworkAclFactory> NetworkAclFactories { get; set; } = [];

    private List<EC2.NetworkAclEntryFactory> NetworkAclEntryFactories { get; set; } = [];

    private List<EC2.NetworkInsightsAccessScopeFactory> NetworkInsightsAccessScopeFactories { get; set; } = [];

    private List<EC2.NetworkInsightsAccessScopeAnalysisFactory> NetworkInsightsAccessScopeAnalysisFactories { get; set; } = [];

    private List<EC2.NetworkInsightsAnalysisFactory> NetworkInsightsAnalysisFactories { get; set; } = [];

    private List<EC2.NetworkInsightsPathFactory> NetworkInsightsPathFactories { get; set; } = [];

    private List<EC2.NetworkInterfaceFactory> NetworkInterfaceFactories { get; set; } = [];

    private List<EC2.NetworkInterfaceAttachmentFactory> NetworkInterfaceAttachmentFactories { get; set; } = [];

    private List<EC2.NetworkInterfacePermissionFactory> NetworkInterfacePermissionFactories { get; set; } = [];

    private List<EC2.NetworkPerformanceMetricSubscriptionFactory> NetworkPerformanceMetricSubscriptionFactories { get; set; } = [];

    private List<EC2.PlacementGroupFactory> PlacementGroupFactories { get; set; } = [];

    private List<EC2.PrefixListFactory> PrefixListFactories { get; set; } = [];

    private List<EC2.RouteTableFactory> RouteTableFactories { get; set; } = [];

    private List<EC2.SecurityGroupFactory> EC2SecurityGroupFactories { get; set; } = [];

    private List<ElastiCache.SecurityGroupFactory> ElastiCacheSecurityGroupFactories { get; set; } = [];

    private List<EC2.SecurityGroupEgressFactory> SecurityGroupEgressFactories { get; set; } = [];

    private List<EC2.SecurityGroupIngressFactory> EC2SecurityGroupIngressFactories { get; set; } = [];

    private List<ElastiCache.SecurityGroupIngressFactory> ElastiCacheSecurityGroupIngressFactories { get; set; } = [];

    private List<EC2.SnapshotBlockPublicAccessFactory> SnapshotBlockPublicAccessFactories { get; set; } = [];

    private List<EC2.SpotFleetFactory> SpotFleetFactories { get; set; } = [];

    private List<EC2.SubnetFactory> SubnetFactories { get; set; } = [];

    private List<EC2.SubnetCidrBlockFactory> SubnetCidrBlockFactories { get; set; } = [];

    private List<EC2.SubnetNetworkAclAssociationFactory> SubnetNetworkAclAssociationFactories { get; set; } = [];

    private List<EC2.SubnetRouteTableAssociationFactory> SubnetRouteTableAssociationFactories { get; set; } = [];

    private List<EC2.TrafficMirrorFilterFactory> TrafficMirrorFilterFactories { get; set; } = [];

    private List<EC2.TrafficMirrorFilterRuleFactory> TrafficMirrorFilterRuleFactories { get; set; } = [];

    private List<EC2.TrafficMirrorSessionFactory> TrafficMirrorSessionFactories { get; set; } = [];

    private List<EC2.TrafficMirrorTargetFactory> TrafficMirrorTargetFactories { get; set; } = [];

    private List<EC2.TransitGatewayFactory> TransitGatewayFactories { get; set; } = [];

    private List<EC2.TransitGatewayAttachmentFactory> TransitGatewayAttachmentFactories { get; set; } = [];

    private List<EC2.TransitGatewayConnectFactory> TransitGatewayConnectFactories { get; set; } = [];

    private List<EC2.TransitGatewayMulticastDomainFactory> TransitGatewayMulticastDomainFactories { get; set; } = [];

    private List<EC2.TransitGatewayMulticastDomainAssociationFactory> TransitGatewayMulticastDomainAssociationFactories { get; set; } = [];

    private List<EC2.TransitGatewayMulticastGroupMemberFactory> TransitGatewayMulticastGroupMemberFactories { get; set; } = [];

    private List<EC2.TransitGatewayMulticastGroupSourceFactory> TransitGatewayMulticastGroupSourceFactories { get; set; } = [];

    private List<EC2.TransitGatewayPeeringAttachmentFactory> TransitGatewayPeeringAttachmentFactories { get; set; } = [];

    private List<EC2.TransitGatewayRouteFactory> TransitGatewayRouteFactories { get; set; } = [];

    private List<EC2.TransitGatewayRouteTableFactory> TransitGatewayRouteTableFactories { get; set; } = [];

    private List<EC2.TransitGatewayRouteTableAssociationFactory> TransitGatewayRouteTableAssociationFactories { get; set; } = [];

    private List<EC2.TransitGatewayRouteTablePropagationFactory> TransitGatewayRouteTablePropagationFactories { get; set; } = [];

    private List<EC2.TransitGatewayVpcAttachmentFactory> TransitGatewayVpcAttachmentFactories { get; set; } = [];

    private List<EC2.VPCFactory> VPCFactories { get; set; } = [];

    private List<EC2.VPCCidrBlockFactory> VPCCidrBlockFactories { get; set; } = [];

    private List<EC2.VPCDHCPOptionsAssociationFactory> VPCDHCPOptionsAssociationFactories { get; set; } = [];

    private List<EC2.VPCEndpointFactory> VPCEndpointFactories { get; set; } = [];

    private List<EC2.VPCEndpointConnectionNotificationFactory> VPCEndpointConnectionNotificationFactories { get; set; } = [];

    private List<EC2.VPCEndpointServiceFactory> VPCEndpointServiceFactories { get; set; } = [];

    private List<EC2.VPCEndpointServicePermissionsFactory> VPCEndpointServicePermissionsFactories { get; set; } = [];

    private List<EC2.VPCGatewayAttachmentFactory> VPCGatewayAttachmentFactories { get; set; } = [];

    private List<EC2.VPCPeeringConnectionFactory> VPCPeeringConnectionFactories { get; set; } = [];

    private List<EC2.VPNConnectionFactory> VPNConnectionFactories { get; set; } = [];

    private List<EC2.VPNConnectionRouteFactory> VPNConnectionRouteFactories { get; set; } = [];

    private List<EC2.VPNGatewayFactory> VPNGatewayFactories { get; set; } = [];

    private List<EC2.VPNGatewayRoutePropagationFactory> VPNGatewayRoutePropagationFactories { get; set; } = [];

    private List<EC2.VerifiedAccessEndpointFactory> VerifiedAccessEndpointFactories { get; set; } = [];

    private List<EC2.VerifiedAccessGroupFactory> VerifiedAccessGroupFactories { get; set; } = [];

    private List<EC2.VerifiedAccessInstanceFactory> VerifiedAccessInstanceFactories { get; set; } = [];

    private List<EC2.VerifiedAccessTrustProviderFactory> VerifiedAccessTrustProviderFactories { get; set; } = [];

    private List<EC2.VolumeFactory> EC2VolumeFactories { get; set; } = [];

    private List<FSx.VolumeFactory> FSxVolumeFactories { get; set; } = [];

    private List<OpsWorks.VolumeFactory> OpsWorksVolumeFactories { get; set; } = [];

    private List<EC2.VolumeAttachmentFactory> VolumeAttachmentFactories { get; set; } = [];

    private List<ECR.PublicRepositoryFactory> PublicRepositoryFactories { get; set; } = [];

    private List<ECR.PullThroughCacheRuleFactory> PullThroughCacheRuleFactories { get; set; } = [];

    private List<ECR.RegistryPolicyFactory> ECRRegistryPolicyFactories { get; set; } = [];

    private List<EventSchemas.RegistryPolicyFactory> EventSchemasRegistryPolicyFactories { get; set; } = [];

    private List<ECR.ReplicationConfigurationFactory> ReplicationConfigurationFactories { get; set; } = [];

    private List<ECR.RepositoryCreationTemplateFactory> RepositoryCreationTemplateFactories { get; set; } = [];

    private List<ECS.CapacityProviderFactory> CapacityProviderFactories { get; set; } = [];

    private List<ECS.ClusterCapacityProviderAssociationsFactory> ClusterCapacityProviderAssociationsFactories { get; set; } = [];

    private List<ECS.PrimaryTaskSetFactory> PrimaryTaskSetFactories { get; set; } = [];

    private List<ECS.TaskDefinitionFactory> ECSTaskDefinitionFactories { get; set; } = [];

    private List<IoTWireless.TaskDefinitionFactory> IoTWirelessTaskDefinitionFactories { get; set; } = [];

    private List<ECS.TaskSetFactory> TaskSetFactories { get; set; } = [];

    private List<EFS.AccessPointFactory> EFSAccessPointFactories { get; set; } = [];

    private List<S3.AccessPointFactory> S3AccessPointFactories { get; set; } = [];

    private List<S3ObjectLambda.AccessPointFactory> S3ObjectLambdaAccessPointFactories { get; set; } = [];

    private List<S3Outposts.AccessPointFactory> S3OutpostsAccessPointFactories { get; set; } = [];

    private List<EFS.FileSystemFactory> EFSFileSystemFactories { get; set; } = [];

    private List<FSx.FileSystemFactory> FSxFileSystemFactories { get; set; } = [];

    private List<EFS.MountTargetFactory> MountTargetFactories { get; set; } = [];

    private List<EKS.AccessEntryFactory> AccessEntryFactories { get; set; } = [];

    private List<EKS.AddonFactory> AddonFactories { get; set; } = [];

    private List<EKS.FargateProfileFactory> FargateProfileFactories { get; set; } = [];

    private List<EKS.IdentityProviderConfigFactory> IdentityProviderConfigFactories { get; set; } = [];

    private List<EKS.NodegroupFactory> NodegroupFactories { get; set; } = [];

    private List<EKS.PodIdentityAssociationFactory> PodIdentityAssociationFactories { get; set; } = [];

    private List<EMR.InstanceFleetConfigFactory> InstanceFleetConfigFactories { get; set; } = [];

    private List<EMR.InstanceGroupConfigFactory> InstanceGroupConfigFactories { get; set; } = [];

    private List<EMR.SecurityConfigurationFactory> EMRSecurityConfigurationFactories { get; set; } = [];

    private List<Glue.SecurityConfigurationFactory> GlueSecurityConfigurationFactories { get; set; } = [];

    private List<EMR.StepFactory> StepFactories { get; set; } = [];

    private List<EMR.StudioFactory> EMRStudioFactories { get; set; } = [];

    private List<NimbleStudio.StudioFactory> NimbleStudioStudioFactories { get; set; } = [];

    private List<EMR.StudioSessionMappingFactory> StudioSessionMappingFactories { get; set; } = [];

    private List<EMR.WALWorkspaceFactory> WALWorkspaceFactories { get; set; } = [];

    private List<EMRContainers.VirtualClusterFactory> VirtualClusterFactories { get; set; } = [];

    private List<ElastiCache.CacheClusterFactory> CacheClusterFactories { get; set; } = [];

    private List<ElastiCache.GlobalReplicationGroupFactory> GlobalReplicationGroupFactories { get; set; } = [];

    private List<ElastiCache.ReplicationGroupFactory> ReplicationGroupFactories { get; set; } = [];

    private List<ElastiCache.ServerlessCacheFactory> ServerlessCacheFactories { get; set; } = [];

    private List<ElastiCache.UserGroupFactory> UserGroupFactories { get; set; } = [];

    private List<ElasticBeanstalk.ApplicationVersionFactory> ApplicationVersionFactories { get; set; } = [];

    private List<ElasticBeanstalk.ConfigurationTemplateFactory> ConfigurationTemplateFactories { get; set; } = [];

    private List<ElasticLoadBalancing.LoadBalancerFactory> ElasticLoadBalancingLoadBalancerFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.LoadBalancerFactory> ElasticLoadBalancingV2LoadBalancerFactories { get; set; } = [];

    private List<Lightsail.LoadBalancerFactory> LightsailLoadBalancerFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.ListenerFactory> ElasticLoadBalancingV2ListenerFactories { get; set; } = [];

    private List<GlobalAccelerator.ListenerFactory> GlobalAcceleratorListenerFactories { get; set; } = [];

    private List<VpcLattice.ListenerFactory> VpcLatticeListenerFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.ListenerCertificateFactory> ListenerCertificateFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.ListenerRuleFactory> ListenerRuleFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.TargetGroupFactory> ElasticLoadBalancingV2TargetGroupFactories { get; set; } = [];

    private List<VpcLattice.TargetGroupFactory> VpcLatticeTargetGroupFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.TrustStoreFactory> ElasticLoadBalancingV2TrustStoreFactories { get; set; } = [];

    private List<WorkSpacesWeb.TrustStoreFactory> WorkSpacesWebTrustStoreFactories { get; set; } = [];

    private List<ElasticLoadBalancingV2.TrustStoreRevocationFactory> TrustStoreRevocationFactories { get; set; } = [];

    private List<EntityResolution.IdMappingWorkflowFactory> IdMappingWorkflowFactories { get; set; } = [];

    private List<EntityResolution.IdNamespaceFactory> IdNamespaceFactories { get; set; } = [];

    private List<EntityResolution.MatchingWorkflowFactory> MatchingWorkflowFactories { get; set; } = [];

    private List<EntityResolution.PolicyStatementFactory> PolicyStatementFactories { get; set; } = [];

    private List<EntityResolution.SchemaMappingFactory> SchemaMappingFactories { get; set; } = [];

    private List<EventSchemas.DiscovererFactory> DiscovererFactories { get; set; } = [];

    private List<EventSchemas.RegistryFactory> EventSchemasRegistryFactories { get; set; } = [];

    private List<Glue.RegistryFactory> GlueRegistryFactories { get; set; } = [];

    private List<EventSchemas.SchemaFactory> EventSchemasSchemaFactories { get; set; } = [];

    private List<Glue.SchemaFactory> GlueSchemaFactories { get; set; } = [];

    private List<Personalize.SchemaFactory> PersonalizeSchemaFactories { get; set; } = [];

    private List<Events.ApiDestinationFactory> ApiDestinationFactories { get; set; } = [];

    private List<Events.ArchiveFactory> ArchiveFactories { get; set; } = [];

    private List<Events.EventBusFactory> EventBusFactories { get; set; } = [];

    private List<Events.EventBusPolicyFactory> EventBusPolicyFactories { get; set; } = [];

    private List<Evidently.ExperimentFactory> ExperimentFactories { get; set; } = [];

    private List<Evidently.FeatureFactory> FeatureFactories { get; set; } = [];

    private List<Evidently.LaunchFactory> LaunchFactories { get; set; } = [];

    private List<Evidently.SegmentFactory> EvidentlySegmentFactories { get; set; } = [];

    private List<Pinpoint.SegmentFactory> PinpointSegmentFactories { get; set; } = [];

    private List<FIS.ExperimentTemplateFactory> ExperimentTemplateFactories { get; set; } = [];

    private List<FIS.TargetAccountConfigurationFactory> TargetAccountConfigurationFactories { get; set; } = [];

    private List<FMS.PolicyFactory> FMSPolicyFactories { get; set; } = [];

    private List<IAM.PolicyFactory> IAMPolicyFactories { get; set; } = [];

    private List<IoT.PolicyFactory> IoTPolicyFactories { get; set; } = [];

    private List<Organizations.PolicyFactory> OrganizationsPolicyFactories { get; set; } = [];

    private List<VerifiedPermissions.PolicyFactory> VerifiedPermissionsPolicyFactories { get; set; } = [];

    private List<FMS.ResourceSetFactory> FMSResourceSetFactories { get; set; } = [];

    private List<Route53RecoveryReadiness.ResourceSetFactory> Route53RecoveryReadinessResourceSetFactories { get; set; } = [];

    private List<FSx.DataRepositoryAssociationFactory> DataRepositoryAssociationFactories { get; set; } = [];

    private List<FSx.SnapshotFactory> SnapshotFactories { get; set; } = [];

    private List<FSx.StorageVirtualMachineFactory> StorageVirtualMachineFactories { get; set; } = [];

    private List<Forecast.DatasetGroupFactory> ForecastDatasetGroupFactories { get; set; } = [];

    private List<Personalize.DatasetGroupFactory> PersonalizeDatasetGroupFactories { get; set; } = [];

    private List<FraudDetector.DetectorFactory> FraudDetectorDetectorFactories { get; set; } = [];

    private List<GuardDuty.DetectorFactory> GuardDutyDetectorFactories { get; set; } = [];

    private List<FraudDetector.EntityTypeFactory> EntityTypeFactories { get; set; } = [];

    private List<FraudDetector.EventTypeFactory> EventTypeFactories { get; set; } = [];

    private List<FraudDetector.LabelFactory> LabelFactories { get; set; } = [];

    private List<FraudDetector.ListFactory> ListFactories { get; set; } = [];

    private List<FraudDetector.OutcomeFactory> OutcomeFactories { get; set; } = [];

    private List<FraudDetector.VariableFactory> VariableFactories { get; set; } = [];

    private List<GameLift.AliasFactory> GameLiftAliasFactories { get; set; } = [];

    private List<KMS.AliasFactory> KMSAliasFactories { get; set; } = [];

    private List<Lambda.AliasFactory> LambdaAliasFactories { get; set; } = [];

    private List<PaymentCryptography.AliasFactory> PaymentCryptographyAliasFactories { get; set; } = [];

    private List<GameLift.BuildFactory> BuildFactories { get; set; } = [];

    private List<GameLift.ContainerGroupDefinitionFactory> ContainerGroupDefinitionFactories { get; set; } = [];

    private List<GameLift.GameServerGroupFactory> GameServerGroupFactories { get; set; } = [];

    private List<GameLift.GameSessionQueueFactory> GameSessionQueueFactories { get; set; } = [];

    private List<GameLift.LocationFactory> LocationFactories { get; set; } = [];

    private List<GameLift.MatchmakingConfigurationFactory> MatchmakingConfigurationFactories { get; set; } = [];

    private List<GameLift.MatchmakingRuleSetFactory> MatchmakingRuleSetFactories { get; set; } = [];

    private List<GameLift.ScriptFactory> ScriptFactories { get; set; } = [];

    private List<GlobalAccelerator.AcceleratorFactory> AcceleratorFactories { get; set; } = [];

    private List<GlobalAccelerator.CrossAccountAttachmentFactory> CrossAccountAttachmentFactories { get; set; } = [];

    private List<GlobalAccelerator.EndpointGroupFactory> EndpointGroupFactories { get; set; } = [];

    private List<Glue.ClassifierFactory> ClassifierFactories { get; set; } = [];

    private List<Glue.CrawlerFactory> CrawlerFactories { get; set; } = [];

    private List<Glue.CustomEntityTypeFactory> CustomEntityTypeFactories { get; set; } = [];

    private List<Glue.DataCatalogEncryptionSettingsFactory> DataCatalogEncryptionSettingsFactories { get; set; } = [];

    private List<Glue.DataQualityRulesetFactory> DataQualityRulesetFactories { get; set; } = [];

    private List<Glue.DatabaseFactory> GlueDatabaseFactories { get; set; } = [];

    private List<Lightsail.DatabaseFactory> LightsailDatabaseFactories { get; set; } = [];

    private List<Timestream.DatabaseFactory> TimestreamDatabaseFactories { get; set; } = [];

    private List<Glue.DevEndpointFactory> DevEndpointFactories { get; set; } = [];

    private List<Glue.MLTransformFactory> MLTransformFactories { get; set; } = [];

    private List<Glue.PartitionFactory> PartitionFactories { get; set; } = [];

    private List<Glue.SchemaVersionFactory> SchemaVersionFactories { get; set; } = [];

    private List<Glue.SchemaVersionMetadataFactory> SchemaVersionMetadataFactories { get; set; } = [];

    private List<Glue.TableOptimizerFactory> TableOptimizerFactories { get; set; } = [];

    private List<Glue.TriggerFactory> TriggerFactories { get; set; } = [];

    private List<Glue.WorkflowFactory> GlueWorkflowFactories { get; set; } = [];

    private List<ImageBuilder.WorkflowFactory> ImageBuilderWorkflowFactories { get; set; } = [];

    private List<Omics.WorkflowFactory> OmicsWorkflowFactories { get; set; } = [];

    private List<Transfer.WorkflowFactory> TransferWorkflowFactories { get; set; } = [];

    private List<Greengrass.ConnectorDefinitionFactory> ConnectorDefinitionFactories { get; set; } = [];

    private List<Greengrass.ConnectorDefinitionVersionFactory> ConnectorDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.CoreDefinitionFactory> CoreDefinitionFactories { get; set; } = [];

    private List<Greengrass.CoreDefinitionVersionFactory> CoreDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.DeviceDefinitionFactory> DeviceDefinitionFactories { get; set; } = [];

    private List<Greengrass.DeviceDefinitionVersionFactory> DeviceDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.FunctionDefinitionFactory> FunctionDefinitionFactories { get; set; } = [];

    private List<Greengrass.FunctionDefinitionVersionFactory> FunctionDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.GroupFactory> GreengrassGroupFactories { get; set; } = [];

    private List<IAM.GroupFactory> IAMGroupFactories { get; set; } = [];

    private List<IdentityStore.GroupFactory> IdentityStoreGroupFactories { get; set; } = [];

    private List<ResourceGroups.GroupFactory> ResourceGroupsGroupFactories { get; set; } = [];

    private List<Synthetics.GroupFactory> SyntheticsGroupFactories { get; set; } = [];

    private List<XRay.GroupFactory> XRayGroupFactories { get; set; } = [];

    private List<Greengrass.GroupVersionFactory> GroupVersionFactories { get; set; } = [];

    private List<Greengrass.LoggerDefinitionFactory> LoggerDefinitionFactories { get; set; } = [];

    private List<Greengrass.LoggerDefinitionVersionFactory> LoggerDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.ResourceDefinitionFactory> ResourceDefinitionFactories { get; set; } = [];

    private List<Greengrass.ResourceDefinitionVersionFactory> ResourceDefinitionVersionFactories { get; set; } = [];

    private List<Greengrass.SubscriptionDefinitionFactory> SubscriptionDefinitionFactories { get; set; } = [];

    private List<Greengrass.SubscriptionDefinitionVersionFactory> SubscriptionDefinitionVersionFactories { get; set; } = [];

    private List<GreengrassV2.ComponentVersionFactory> ComponentVersionFactories { get; set; } = [];

    private List<GroundStation.ConfigFactory> ConfigFactories { get; set; } = [];

    private List<GroundStation.DataflowEndpointGroupFactory> DataflowEndpointGroupFactories { get; set; } = [];

    private List<GroundStation.MissionProfileFactory> MissionProfileFactories { get; set; } = [];

    private List<GuardDuty.FilterFactory> GuardDutyFilterFactories { get; set; } = [];

    private List<InspectorV2.FilterFactory> InspectorV2FilterFactories { get; set; } = [];

    private List<GuardDuty.IPSetFactory> GuardDutyIPSetFactories { get; set; } = [];

    private List<WAF.IPSetFactory> WAFIPSetFactories { get; set; } = [];

    private List<WAFRegional.IPSetFactory> WAFRegionalIPSetFactories { get; set; } = [];

    private List<WAFv2.IPSetFactory> WAFv2IPSetFactories { get; set; } = [];

    private List<GuardDuty.MalwareProtectionPlanFactory> MalwareProtectionPlanFactories { get; set; } = [];

    private List<GuardDuty.MasterFactory> MasterFactories { get; set; } = [];

    private List<GuardDuty.MemberFactory> GuardDutyMemberFactories { get; set; } = [];

    private List<ManagedBlockchain.MemberFactory> ManagedBlockchainMemberFactories { get; set; } = [];

    private List<GuardDuty.ThreatIntelSetFactory> ThreatIntelSetFactories { get; set; } = [];

    private List<HealthImaging.DatastoreFactory> HealthImagingDatastoreFactories { get; set; } = [];

    private List<IoTAnalytics.DatastoreFactory> IoTAnalyticsDatastoreFactories { get; set; } = [];

    private List<HealthLake.FHIRDatastoreFactory> FHIRDatastoreFactories { get; set; } = [];

    private List<IAM.AccessKeyFactory> AccessKeyFactories { get; set; } = [];

    private List<IAM.GroupPolicyFactory> GroupPolicyFactories { get; set; } = [];

    private List<IAM.ManagedPolicyFactory> ManagedPolicyFactories { get; set; } = [];

    private List<IAM.OIDCProviderFactory> OIDCProviderFactories { get; set; } = [];

    private List<IAM.RoleFactory> RoleFactories { get; set; } = [];

    private List<IAM.RolePolicyFactory> RolePolicyFactories { get; set; } = [];

    private List<IAM.SAMLProviderFactory> SAMLProviderFactories { get; set; } = [];

    private List<IAM.ServerCertificateFactory> ServerCertificateFactories { get; set; } = [];

    private List<IAM.ServiceLinkedRoleFactory> ServiceLinkedRoleFactories { get; set; } = [];

    private List<IAM.UserPolicyFactory> UserPolicyFactories { get; set; } = [];

    private List<IAM.UserToGroupAdditionFactory> UserToGroupAdditionFactories { get; set; } = [];

    private List<IAM.VirtualMFADeviceFactory> VirtualMFADeviceFactories { get; set; } = [];

    private List<IVS.EncoderConfigurationFactory> EncoderConfigurationFactories { get; set; } = [];

    private List<IVS.PlaybackKeyPairFactory> PlaybackKeyPairFactories { get; set; } = [];

    private List<IVS.PlaybackRestrictionPolicyFactory> PlaybackRestrictionPolicyFactories { get; set; } = [];

    private List<IVS.RecordingConfigurationFactory> RecordingConfigurationFactories { get; set; } = [];

    private List<IVS.StorageConfigurationFactory> StorageConfigurationFactories { get; set; } = [];

    private List<IVS.StreamKeyFactory> StreamKeyFactories { get; set; } = [];

    private List<IVSChat.LoggingConfigurationFactory> IVSChatLoggingConfigurationFactories { get; set; } = [];

    private List<NetworkFirewall.LoggingConfigurationFactory> NetworkFirewallLoggingConfigurationFactories { get; set; } = [];

    private List<WAFv2.LoggingConfigurationFactory> WAFv2LoggingConfigurationFactories { get; set; } = [];

    private List<IVSChat.RoomFactory> RoomFactories { get; set; } = [];

    private List<IdentityStore.GroupMembershipFactory> GroupMembershipFactories { get; set; } = [];

    private List<ImageBuilder.ContainerRecipeFactory> ContainerRecipeFactories { get; set; } = [];

    private List<ImageBuilder.DistributionConfigurationFactory> DistributionConfigurationFactories { get; set; } = [];

    private List<ImageBuilder.ImageFactory> ImageBuilderImageFactories { get; set; } = [];

    private List<SageMaker.ImageFactory> SageMakerImageFactories { get; set; } = [];

    private List<ImageBuilder.ImagePipelineFactory> ImagePipelineFactories { get; set; } = [];

    private List<ImageBuilder.ImageRecipeFactory> ImageRecipeFactories { get; set; } = [];

    private List<ImageBuilder.InfrastructureConfigurationFactory> InfrastructureConfigurationFactories { get; set; } = [];

    private List<Inspector.AssessmentTargetFactory> AssessmentTargetFactories { get; set; } = [];

    private List<Inspector.AssessmentTemplateFactory> AssessmentTemplateFactories { get; set; } = [];

    private List<Inspector.ResourceGroupFactory> ResourceGroupFactories { get; set; } = [];

    private List<InspectorV2.CisScanConfigurationFactory> CisScanConfigurationFactories { get; set; } = [];

    private List<IoT1Click.DeviceFactory> IoT1ClickDeviceFactories { get; set; } = [];

    private List<NetworkManager.DeviceFactory> NetworkManagerDeviceFactories { get; set; } = [];

    private List<SageMaker.DeviceFactory> SageMakerDeviceFactories { get; set; } = [];

    private List<IoT1Click.PlacementFactory> PlacementFactories { get; set; } = [];

    private List<IoT.AccountAuditConfigurationFactory> AccountAuditConfigurationFactories { get; set; } = [];

    private List<IoT.CACertificateFactory> CACertificateFactories { get; set; } = [];

    private List<IoT.CertificateProviderFactory> CertificateProviderFactories { get; set; } = [];

    private List<IoT.CustomMetricFactory> CustomMetricFactories { get; set; } = [];

    private List<IoT.DimensionFactory> DimensionFactories { get; set; } = [];

    private List<IoT.DomainConfigurationFactory> DomainConfigurationFactories { get; set; } = [];

    private List<IoT.FleetMetricFactory> FleetMetricFactories { get; set; } = [];

    private List<IoT.JobTemplateFactory> IoTJobTemplateFactories { get; set; } = [];

    private List<MediaConvert.JobTemplateFactory> MediaConvertJobTemplateFactories { get; set; } = [];

    private List<IoT.LoggingFactory> LoggingFactories { get; set; } = [];

    private List<IoT.MitigationActionFactory> MitigationActionFactories { get; set; } = [];

    private List<IoT.PolicyPrincipalAttachmentFactory> PolicyPrincipalAttachmentFactories { get; set; } = [];

    private List<IoT.ProvisioningTemplateFactory> ProvisioningTemplateFactories { get; set; } = [];

    private List<IoT.ResourceSpecificLoggingFactory> ResourceSpecificLoggingFactories { get; set; } = [];

    private List<IoT.RoleAliasFactory> RoleAliasFactories { get; set; } = [];

    private List<IoT.ScheduledAuditFactory> ScheduledAuditFactories { get; set; } = [];

    private List<IoT.SoftwarePackageFactory> SoftwarePackageFactories { get; set; } = [];

    private List<IoT.SoftwarePackageVersionFactory> SoftwarePackageVersionFactories { get; set; } = [];

    private List<IoT.ThingFactory> ThingFactories { get; set; } = [];

    private List<IoT.ThingGroupFactory> ThingGroupFactories { get; set; } = [];

    private List<IoT.ThingPrincipalAttachmentFactory> ThingPrincipalAttachmentFactories { get; set; } = [];

    private List<IoT.ThingTypeFactory> ThingTypeFactories { get; set; } = [];

    private List<IoT.TopicRuleFactory> TopicRuleFactories { get; set; } = [];

    private List<IoT.TopicRuleDestinationFactory> TopicRuleDestinationFactories { get; set; } = [];

    private List<IoTCoreDeviceAdvisor.SuiteDefinitionFactory> SuiteDefinitionFactories { get; set; } = [];

    private List<IoTEvents.AlarmModelFactory> AlarmModelFactories { get; set; } = [];

    private List<IoTEvents.DetectorModelFactory> DetectorModelFactories { get; set; } = [];

    private List<IoTEvents.InputFactory> IoTEventsInputFactories { get; set; } = [];

    private List<MediaLive.InputFactory> MediaLiveInputFactories { get; set; } = [];

    private List<IoTFleetWise.DecoderManifestFactory> DecoderManifestFactories { get; set; } = [];

    private List<IoTFleetWise.ModelManifestFactory> ModelManifestFactories { get; set; } = [];

    private List<IoTFleetWise.SignalCatalogFactory> SignalCatalogFactories { get; set; } = [];

    private List<IoTFleetWise.VehicleFactory> VehicleFactories { get; set; } = [];

    private List<IoTSiteWise.AccessPolicyFactory> IoTSiteWiseAccessPolicyFactories { get; set; } = [];

    private List<OpenSearchServerless.AccessPolicyFactory> OpenSearchServerlessAccessPolicyFactories { get; set; } = [];

    private List<IoTSiteWise.AssetFactory> IoTSiteWiseAssetFactories { get; set; } = [];

    private List<MediaPackage.AssetFactory> MediaPackageAssetFactories { get; set; } = [];

    private List<IoTSiteWise.AssetModelFactory> AssetModelFactories { get; set; } = [];

    private List<IoTSiteWise.GatewayFactory> IoTSiteWiseGatewayFactories { get; set; } = [];

    private List<MediaConnect.GatewayFactory> MediaConnectGatewayFactories { get; set; } = [];

    private List<IoTSiteWise.PortalFactory> IoTSiteWisePortalFactories { get; set; } = [];

    private List<WorkSpacesWeb.PortalFactory> WorkSpacesWebPortalFactories { get; set; } = [];

    private List<IoTThingsGraph.FlowTemplateFactory> FlowTemplateFactories { get; set; } = [];

    private List<IoTTwinMaker.ComponentTypeFactory> ComponentTypeFactories { get; set; } = [];

    private List<IoTTwinMaker.EntityFactory> EntityFactories { get; set; } = [];

    private List<IoTTwinMaker.SceneFactory> SceneFactories { get; set; } = [];

    private List<IoTTwinMaker.SyncJobFactory> SyncJobFactories { get; set; } = [];

    private List<IoTWireless.DestinationFactory> IoTWirelessDestinationFactories { get; set; } = [];

    private List<Logs.DestinationFactory> LogsDestinationFactories { get; set; } = [];

    private List<IoTWireless.DeviceProfileFactory> DeviceProfileFactories { get; set; } = [];

    private List<IoTWireless.FuotaTaskFactory> FuotaTaskFactories { get; set; } = [];

    private List<IoTWireless.MulticastGroupFactory> MulticastGroupFactories { get; set; } = [];

    private List<IoTWireless.NetworkAnalyzerConfigurationFactory> NetworkAnalyzerConfigurationFactories { get; set; } = [];

    private List<IoTWireless.PartnerAccountFactory> PartnerAccountFactories { get; set; } = [];

    private List<IoTWireless.ServiceProfileFactory> ServiceProfileFactories { get; set; } = [];

    private List<IoTWireless.WirelessDeviceFactory> WirelessDeviceFactories { get; set; } = [];

    private List<IoTWireless.WirelessDeviceImportTaskFactory> WirelessDeviceImportTaskFactories { get; set; } = [];

    private List<IoTWireless.WirelessGatewayFactory> WirelessGatewayFactories { get; set; } = [];

    private List<KMS.KeyFactory> KMSKeyFactories { get; set; } = [];

    private List<PaymentCryptography.KeyFactory> PaymentCryptographyKeyFactories { get; set; } = [];

    private List<KMS.ReplicaKeyFactory> ReplicaKeyFactories { get; set; } = [];

    private List<KafkaConnect.CustomPluginFactory> CustomPluginFactories { get; set; } = [];

    private List<KafkaConnect.WorkerConfigurationFactory> WorkerConfigurationFactories { get; set; } = [];

    private List<Kendra.FaqFactory> FaqFactories { get; set; } = [];

    private List<Kendra.IndexFactory> KendraIndexFactories { get; set; } = [];

    private List<QBusiness.IndexFactory> QBusinessIndexFactories { get; set; } = [];

    private List<ResourceExplorer2.IndexFactory> ResourceExplorer2IndexFactories { get; set; } = [];

    private List<KendraRanking.ExecutionPlanFactory> ExecutionPlanFactories { get; set; } = [];

    private List<Kinesis.StreamFactory> KinesisStreamFactories { get; set; } = [];

    private List<KinesisVideo.StreamFactory> KinesisVideoStreamFactories { get; set; } = [];

    private List<QLDB.StreamFactory> QLDBStreamFactories { get; set; } = [];

    private List<Kinesis.StreamConsumerFactory> StreamConsumerFactories { get; set; } = [];

    private List<KinesisAnalytics.ApplicationOutputFactory> KinesisAnalyticsApplicationOutputFactories { get; set; } = [];

    private List<KinesisAnalyticsV2.ApplicationOutputFactory> KinesisAnalyticsV2ApplicationOutputFactories { get; set; } = [];

    private List<KinesisAnalytics.ApplicationReferenceDataSourceFactory> KinesisAnalyticsApplicationReferenceDataSourceFactories { get; set; } = [];

    private List<KinesisAnalyticsV2.ApplicationReferenceDataSourceFactory> KinesisAnalyticsV2ApplicationReferenceDataSourceFactories { get; set; } = [];

    private List<KinesisAnalyticsV2.ApplicationCloudWatchLoggingOptionFactory> ApplicationCloudWatchLoggingOptionFactories { get; set; } = [];

    private List<KinesisFirehose.DeliveryStreamFactory> DeliveryStreamFactories { get; set; } = [];

    private List<KinesisVideo.SignalingChannelFactory> SignalingChannelFactories { get; set; } = [];

    private List<LakeFormation.DataCellsFilterFactory> DataCellsFilterFactories { get; set; } = [];

    private List<LakeFormation.DataLakeSettingsFactory> DataLakeSettingsFactories { get; set; } = [];

    private List<LakeFormation.PermissionsFactory> PermissionsFactories { get; set; } = [];

    private List<LakeFormation.PrincipalPermissionsFactory> PrincipalPermissionsFactories { get; set; } = [];

    private List<LakeFormation.TagFactory> TagFactories { get; set; } = [];

    private List<LakeFormation.TagAssociationFactory> TagAssociationFactories { get; set; } = [];

    private List<Lambda.CodeSigningConfigFactory> CodeSigningConfigFactories { get; set; } = [];

    private List<Lambda.EventInvokeConfigFactory> EventInvokeConfigFactories { get; set; } = [];

    private List<Lambda.EventSourceMappingFactory> EventSourceMappingFactories { get; set; } = [];

    private List<Lambda.LayerVersionFactory> LayerVersionFactories { get; set; } = [];

    private List<Lambda.LayerVersionPermissionFactory> LayerVersionPermissionFactories { get; set; } = [];

    private List<Lambda.UrlFactory> UrlFactories { get; set; } = [];

    private List<Lambda.VersionFactory> VersionFactories { get; set; } = [];

    private List<Lex.BotFactory> BotFactories { get; set; } = [];

    private List<Lex.BotAliasFactory> BotAliasFactories { get; set; } = [];

    private List<Lex.BotVersionFactory> BotVersionFactories { get; set; } = [];

    private List<LicenseManager.GrantFactory> GrantFactories { get; set; } = [];

    private List<LicenseManager.LicenseFactory> LicenseFactories { get; set; } = [];

    private List<Lightsail.BucketFactory> LightsailBucketFactories { get; set; } = [];

    private List<S3.BucketFactory> S3BucketFactories { get; set; } = [];

    private List<S3Outposts.BucketFactory> S3OutpostsBucketFactories { get; set; } = [];

    private List<Lightsail.ContainerFactory> LightsailContainerFactories { get; set; } = [];

    private List<MediaStore.ContainerFactory> MediaStoreContainerFactories { get; set; } = [];

    private List<Lightsail.DiskFactory> DiskFactories { get; set; } = [];

    private List<Lightsail.LoadBalancerTlsCertificateFactory> LoadBalancerTlsCertificateFactories { get; set; } = [];

    private List<Lightsail.StaticIpFactory> StaticIpFactories { get; set; } = [];

    private List<Location.APIKeyFactory> APIKeyFactories { get; set; } = [];

    private List<Location.GeofenceCollectionFactory> GeofenceCollectionFactories { get; set; } = [];

    private List<Location.MapFactory> MapFactories { get; set; } = [];

    private List<Location.PlaceIndexFactory> PlaceIndexFactories { get; set; } = [];

    private List<Location.RouteCalculatorFactory> RouteCalculatorFactories { get; set; } = [];

    private List<Location.TrackerFactory> TrackerFactories { get; set; } = [];

    private List<Location.TrackerConsumerFactory> TrackerConsumerFactories { get; set; } = [];

    private List<Logs.AccountPolicyFactory> AccountPolicyFactories { get; set; } = [];

    private List<Logs.DeliveryFactory> DeliveryFactories { get; set; } = [];

    private List<Logs.DeliveryDestinationFactory> DeliveryDestinationFactories { get; set; } = [];

    private List<Logs.DeliverySourceFactory> DeliverySourceFactories { get; set; } = [];

    private List<Logs.LogAnomalyDetectorFactory> LogAnomalyDetectorFactories { get; set; } = [];

    private List<Logs.LogGroupFactory> LogGroupFactories { get; set; } = [];

    private List<Logs.LogStreamFactory> LogStreamFactories { get; set; } = [];

    private List<Logs.MetricFilterFactory> MetricFilterFactories { get; set; } = [];

    private List<Logs.QueryDefinitionFactory> QueryDefinitionFactories { get; set; } = [];

    private List<Logs.SubscriptionFilterFactory> SubscriptionFilterFactories { get; set; } = [];

    private List<LookoutEquipment.InferenceSchedulerFactory> InferenceSchedulerFactories { get; set; } = [];

    private List<LookoutMetrics.AlertFactory> AlertFactories { get; set; } = [];

    private List<MSK.BatchScramSecretFactory> BatchScramSecretFactories { get; set; } = [];

    private List<MSK.ClusterPolicyFactory> ClusterPolicyFactories { get; set; } = [];

    private List<MSK.ReplicatorFactory> ReplicatorFactories { get; set; } = [];

    private List<MSK.ServerlessClusterFactory> ServerlessClusterFactories { get; set; } = [];

    private List<MSK.VpcConnectionFactory> VpcConnectionFactories { get; set; } = [];

    private List<Macie.AllowListFactory> AllowListFactories { get; set; } = [];

    private List<Macie.CustomDataIdentifierFactory> CustomDataIdentifierFactories { get; set; } = [];

    private List<Macie.FindingsFilterFactory> FindingsFilterFactories { get; set; } = [];

    private List<Macie.SessionFactory> SessionFactories { get; set; } = [];

    private List<ManagedBlockchain.AccessorFactory> AccessorFactories { get; set; } = [];

    private List<ManagedBlockchain.NodeFactory> NodeFactories { get; set; } = [];

    private List<MediaConnect.BridgeFactory> BridgeFactories { get; set; } = [];

    private List<MediaConnect.BridgeOutputFactory> BridgeOutputFactories { get; set; } = [];

    private List<MediaConnect.BridgeSourceFactory> BridgeSourceFactories { get; set; } = [];

    private List<MediaConnect.FlowEntitlementFactory> FlowEntitlementFactories { get; set; } = [];

    private List<MediaConnect.FlowOutputFactory> FlowOutputFactories { get; set; } = [];

    private List<MediaConnect.FlowSourceFactory> FlowSourceFactories { get; set; } = [];

    private List<MediaConnect.FlowVpcInterfaceFactory> FlowVpcInterfaceFactories { get; set; } = [];

    private List<MediaConvert.PresetFactory> PresetFactories { get; set; } = [];

    private List<MediaLive.ChannelPlacementGroupFactory> ChannelPlacementGroupFactories { get; set; } = [];

    private List<MediaLive.CloudWatchAlarmTemplateFactory> CloudWatchAlarmTemplateFactories { get; set; } = [];

    private List<MediaLive.CloudWatchAlarmTemplateGroupFactory> CloudWatchAlarmTemplateGroupFactories { get; set; } = [];

    private List<MediaLive.EventBridgeRuleTemplateFactory> EventBridgeRuleTemplateFactories { get; set; } = [];

    private List<MediaLive.EventBridgeRuleTemplateGroupFactory> EventBridgeRuleTemplateGroupFactories { get; set; } = [];

    private List<MediaLive.InputSecurityGroupFactory> InputSecurityGroupFactories { get; set; } = [];

    private List<MediaLive.MultiplexFactory> MultiplexFactories { get; set; } = [];

    private List<MediaLive.MultiplexprogramFactory> MultiplexprogramFactories { get; set; } = [];

    private List<MediaLive.NetworkFactory> NetworkFactories { get; set; } = [];

    private List<MediaLive.SdiSourceFactory> SdiSourceFactories { get; set; } = [];

    private List<MediaLive.SignalMapFactory> SignalMapFactories { get; set; } = [];

    private List<MediaPackage.OriginEndpointFactory> MediaPackageOriginEndpointFactories { get; set; } = [];

    private List<MediaPackageV2.OriginEndpointFactory> MediaPackageV2OriginEndpointFactories { get; set; } = [];

    private List<MediaPackage.PackagingConfigurationFactory> PackagingConfigurationFactories { get; set; } = [];

    private List<MediaPackage.PackagingGroupFactory> PackagingGroupFactories { get; set; } = [];

    private List<MediaPackageV2.ChannelGroupFactory> ChannelGroupFactories { get; set; } = [];

    private List<MediaPackageV2.ChannelPolicyFactory> MediaPackageV2ChannelPolicyFactories { get; set; } = [];

    private List<MediaTailor.ChannelPolicyFactory> MediaTailorChannelPolicyFactories { get; set; } = [];

    private List<MediaPackageV2.OriginEndpointPolicyFactory> OriginEndpointPolicyFactories { get; set; } = [];

    private List<MediaTailor.LiveSourceFactory> LiveSourceFactories { get; set; } = [];

    private List<MediaTailor.PlaybackConfigurationFactory> PlaybackConfigurationFactories { get; set; } = [];

    private List<MediaTailor.SourceLocationFactory> SourceLocationFactories { get; set; } = [];

    private List<MediaTailor.VodSourceFactory> VodSourceFactories { get; set; } = [];

    private List<MemoryDB.ACLFactory> ACLFactories { get; set; } = [];

    private List<Neptune.DBParameterGroupFactory> NeptuneDBParameterGroupFactories { get; set; } = [];

    private List<RDS.DBParameterGroupFactory> RDSDBParameterGroupFactories { get; set; } = [];

    private List<NeptuneGraph.PrivateGraphEndpointFactory> PrivateGraphEndpointFactories { get; set; } = [];

    private List<NetworkFirewall.FirewallFactory> FirewallFactories { get; set; } = [];

    private List<NetworkFirewall.FirewallPolicyFactory> FirewallPolicyFactories { get; set; } = [];

    private List<NetworkFirewall.RuleGroupFactory> NetworkFirewallRuleGroupFactories { get; set; } = [];

    private List<WAFv2.RuleGroupFactory> WAFv2RuleGroupFactories { get; set; } = [];

    private List<NetworkFirewall.TLSInspectionConfigurationFactory> TLSInspectionConfigurationFactories { get; set; } = [];

    private List<NetworkManager.ConnectAttachmentFactory> ConnectAttachmentFactories { get; set; } = [];

    private List<NetworkManager.ConnectPeerFactory> ConnectPeerFactories { get; set; } = [];

    private List<NetworkManager.CoreNetworkFactory> CoreNetworkFactories { get; set; } = [];

    private List<NetworkManager.CustomerGatewayAssociationFactory> CustomerGatewayAssociationFactories { get; set; } = [];

    private List<NetworkManager.GlobalNetworkFactory> GlobalNetworkFactories { get; set; } = [];

    private List<NetworkManager.LinkFactory> NetworkManagerLinkFactories { get; set; } = [];

    private List<Oam.LinkFactory> OamLinkFactories { get; set; } = [];

    private List<NetworkManager.LinkAssociationFactory> LinkAssociationFactories { get; set; } = [];

    private List<NetworkManager.SiteFactory> SiteFactories { get; set; } = [];

    private List<NetworkManager.SiteToSiteVpnAttachmentFactory> SiteToSiteVpnAttachmentFactories { get; set; } = [];

    private List<NetworkManager.TransitGatewayPeeringFactory> TransitGatewayPeeringFactories { get; set; } = [];

    private List<NetworkManager.TransitGatewayRegistrationFactory> TransitGatewayRegistrationFactories { get; set; } = [];

    private List<NetworkManager.TransitGatewayRouteTableAttachmentFactory> TransitGatewayRouteTableAttachmentFactories { get; set; } = [];

    private List<NetworkManager.VpcAttachmentFactory> VpcAttachmentFactories { get; set; } = [];

    private List<NimbleStudio.LaunchProfileFactory> LaunchProfileFactories { get; set; } = [];

    private List<NimbleStudio.StreamingImageFactory> StreamingImageFactories { get; set; } = [];

    private List<NimbleStudio.StudioComponentFactory> StudioComponentFactories { get; set; } = [];

    private List<Oam.SinkFactory> SinkFactories { get; set; } = [];

    private List<Omics.AnnotationStoreFactory> AnnotationStoreFactories { get; set; } = [];

    private List<Omics.ReferenceStoreFactory> ReferenceStoreFactories { get; set; } = [];

    private List<Omics.RunGroupFactory> RunGroupFactories { get; set; } = [];

    private List<Omics.SequenceStoreFactory> SequenceStoreFactories { get; set; } = [];

    private List<Omics.VariantStoreFactory> VariantStoreFactories { get; set; } = [];

    private List<OpenSearchServerless.CollectionFactory> OpenSearchServerlessCollectionFactories { get; set; } = [];

    private List<Rekognition.CollectionFactory> RekognitionCollectionFactories { get; set; } = [];

    private List<OpenSearchServerless.SecurityConfigFactory> SecurityConfigFactories { get; set; } = [];

    private List<OpenSearchServerless.SecurityPolicyFactory> SecurityPolicyFactories { get; set; } = [];

    private List<OpenSearchServerless.VpcEndpointFactory> VpcEndpointFactories { get; set; } = [];

    private List<OpsWorks.ElasticLoadBalancerAttachmentFactory> ElasticLoadBalancerAttachmentFactories { get; set; } = [];

    private List<OpsWorks.LayerFactory> LayerFactories { get; set; } = [];

    private List<OpsWorksCM.ServerFactory> OpsWorksCMServerFactories { get; set; } = [];

    private List<Transfer.ServerFactory> TransferServerFactories { get; set; } = [];

    private List<Organizations.OrganizationFactory> OrganizationFactories { get; set; } = [];

    private List<Organizations.OrganizationalUnitFactory> OrganizationalUnitFactories { get; set; } = [];

    private List<PCAConnectorAD.DirectoryRegistrationFactory> DirectoryRegistrationFactories { get; set; } = [];

    private List<PCAConnectorAD.ServicePrincipalNameFactory> ServicePrincipalNameFactories { get; set; } = [];

    private List<PCAConnectorAD.TemplateFactory> PCAConnectorADTemplateFactories { get; set; } = [];

    private List<QuickSight.TemplateFactory> QuickSightTemplateFactories { get; set; } = [];

    private List<SES.TemplateFactory> SESTemplateFactories { get; set; } = [];

    private List<PCAConnectorAD.TemplateGroupAccessControlEntryFactory> TemplateGroupAccessControlEntryFactories { get; set; } = [];

    private List<PCAConnectorSCEP.ChallengeFactory> ChallengeFactories { get; set; } = [];

    private List<Panorama.ApplicationInstanceFactory> ApplicationInstanceFactories { get; set; } = [];

    private List<Panorama.PackageFactory> PackageFactories { get; set; } = [];

    private List<Panorama.PackageVersionFactory> PackageVersionFactories { get; set; } = [];

    private List<Personalize.SolutionFactory> SolutionFactories { get; set; } = [];

    private List<Pinpoint.ADMChannelFactory> ADMChannelFactories { get; set; } = [];

    private List<Pinpoint.APNSChannelFactory> APNSChannelFactories { get; set; } = [];

    private List<Pinpoint.APNSSandboxChannelFactory> APNSSandboxChannelFactories { get; set; } = [];

    private List<Pinpoint.APNSVoipChannelFactory> APNSVoipChannelFactories { get; set; } = [];

    private List<Pinpoint.APNSVoipSandboxChannelFactory> APNSVoipSandboxChannelFactories { get; set; } = [];

    private List<Pinpoint.ApplicationSettingsFactory> ApplicationSettingsFactories { get; set; } = [];

    private List<Pinpoint.BaiduChannelFactory> BaiduChannelFactories { get; set; } = [];

    private List<Pinpoint.EmailChannelFactory> EmailChannelFactories { get; set; } = [];

    private List<Pinpoint.EmailTemplateFactory> EmailTemplateFactories { get; set; } = [];

    private List<Pinpoint.GCMChannelFactory> GCMChannelFactories { get; set; } = [];

    private List<Pinpoint.InAppTemplateFactory> InAppTemplateFactories { get; set; } = [];

    private List<Pinpoint.PushTemplateFactory> PushTemplateFactories { get; set; } = [];

    private List<Pinpoint.SMSChannelFactory> SMSChannelFactories { get; set; } = [];

    private List<Pinpoint.SmsTemplateFactory> SmsTemplateFactories { get; set; } = [];

    private List<Pinpoint.VoiceChannelFactory> VoiceChannelFactories { get; set; } = [];

    private List<PinpointEmail.ConfigurationSetFactory> PinpointEmailConfigurationSetFactories { get; set; } = [];

    private List<SES.ConfigurationSetFactory> SESConfigurationSetFactories { get; set; } = [];

    private List<PinpointEmail.ConfigurationSetEventDestinationFactory> PinpointEmailConfigurationSetEventDestinationFactories { get; set; } = [];

    private List<SES.ConfigurationSetEventDestinationFactory> SESConfigurationSetEventDestinationFactories { get; set; } = [];

    private List<PinpointEmail.DedicatedIpPoolFactory> PinpointEmailDedicatedIpPoolFactories { get; set; } = [];

    private List<SES.DedicatedIpPoolFactory> SESDedicatedIpPoolFactories { get; set; } = [];

    private List<PinpointEmail.IdentityFactory> IdentityFactories { get; set; } = [];

    private List<Pipes.PipeFactory> PipeFactories { get; set; } = [];

    private List<Proton.EnvironmentAccountConnectionFactory> EnvironmentAccountConnectionFactories { get; set; } = [];

    private List<Proton.EnvironmentTemplateFactory> EnvironmentTemplateFactories { get; set; } = [];

    private List<Proton.ServiceTemplateFactory> ServiceTemplateFactories { get; set; } = [];

    private List<QBusiness.PluginFactory> PluginFactories { get; set; } = [];

    private List<QBusiness.RetrieverFactory> RetrieverFactories { get; set; } = [];

    private List<QBusiness.WebExperienceFactory> WebExperienceFactories { get; set; } = [];

    private List<QLDB.LedgerFactory> LedgerFactories { get; set; } = [];

    private List<QuickSight.AnalysisFactory> AnalysisFactories { get; set; } = [];

    private List<QuickSight.DataSetFactory> DataSetFactories { get; set; } = [];

    private List<QuickSight.RefreshScheduleFactory> RefreshScheduleFactories { get; set; } = [];

    private List<QuickSight.TopicFactory> QuickSightTopicFactories { get; set; } = [];

    private List<SNS.TopicFactory> SNSTopicFactories { get; set; } = [];

    private List<QuickSight.VPCConnectionFactory> VPCConnectionFactories { get; set; } = [];

    private List<RAM.ResourceShareFactory> ResourceShareFactories { get; set; } = [];

    private List<RDS.CustomDBEngineVersionFactory> CustomDBEngineVersionFactories { get; set; } = [];

    private List<RDS.DBProxyFactory> DBProxyFactories { get; set; } = [];

    private List<RDS.DBProxyEndpointFactory> DBProxyEndpointFactories { get; set; } = [];

    private List<RDS.DBProxyTargetGroupFactory> DBProxyTargetGroupFactories { get; set; } = [];

    private List<RDS.DBSecurityGroupFactory> DBSecurityGroupFactories { get; set; } = [];

    private List<RDS.DBSecurityGroupIngressFactory> DBSecurityGroupIngressFactories { get; set; } = [];

    private List<RDS.GlobalClusterFactory> GlobalClusterFactories { get; set; } = [];

    private List<RDS.OptionGroupFactory> OptionGroupFactories { get; set; } = [];

    private List<RUM.AppMonitorFactory> AppMonitorFactories { get; set; } = [];

    private List<Redshift.ClusterParameterGroupFactory> ClusterParameterGroupFactories { get; set; } = [];

    private List<Redshift.ClusterSecurityGroupFactory> ClusterSecurityGroupFactories { get; set; } = [];

    private List<Redshift.ClusterSecurityGroupIngressFactory> ClusterSecurityGroupIngressFactories { get; set; } = [];

    private List<Redshift.ClusterSubnetGroupFactory> ClusterSubnetGroupFactories { get; set; } = [];

    private List<Redshift.EndpointAccessFactory> EndpointAccessFactories { get; set; } = [];

    private List<Redshift.EndpointAuthorizationFactory> EndpointAuthorizationFactories { get; set; } = [];

    private List<RedshiftServerless.NamespaceFactory> NamespaceFactories { get; set; } = [];

    private List<RedshiftServerless.WorkgroupFactory> WorkgroupFactories { get; set; } = [];

    private List<Rekognition.StreamProcessorFactory> StreamProcessorFactories { get; set; } = [];

    private List<ResilienceHub.ResiliencyPolicyFactory> ResiliencyPolicyFactories { get; set; } = [];

    private List<ResourceExplorer2.DefaultViewAssociationFactory> DefaultViewAssociationFactories { get; set; } = [];

    private List<RoboMaker.RobotFactory> RobotFactories { get; set; } = [];

    private List<RoboMaker.RobotApplicationFactory> RobotApplicationFactories { get; set; } = [];

    private List<RoboMaker.RobotApplicationVersionFactory> RobotApplicationVersionFactories { get; set; } = [];

    private List<RoboMaker.SimulationApplicationFactory> SimulationApplicationFactories { get; set; } = [];

    private List<RoboMaker.SimulationApplicationVersionFactory> SimulationApplicationVersionFactories { get; set; } = [];

    private List<RolesAnywhere.CRLFactory> CRLFactories { get; set; } = [];

    private List<RolesAnywhere.TrustAnchorFactory> TrustAnchorFactories { get; set; } = [];

    private List<Route53.CidrCollectionFactory> CidrCollectionFactories { get; set; } = [];

    private List<Route53.DNSSECFactory> DNSSECFactories { get; set; } = [];

    private List<Route53.HealthCheckFactory> HealthCheckFactories { get; set; } = [];

    private List<Route53.HostedZoneFactory> HostedZoneFactories { get; set; } = [];

    private List<Route53.KeySigningKeyFactory> KeySigningKeyFactories { get; set; } = [];

    private List<Route53.RecordSetFactory> RecordSetFactories { get; set; } = [];

    private List<Route53.RecordSetGroupFactory> RecordSetGroupFactories { get; set; } = [];

    private List<Route53Profiles.ProfileAssociationFactory> ProfileAssociationFactories { get; set; } = [];

    private List<Route53Profiles.ProfileResourceAssociationFactory> ProfileResourceAssociationFactories { get; set; } = [];

    private List<Route53RecoveryControl.ControlPanelFactory> ControlPanelFactories { get; set; } = [];

    private List<Route53RecoveryControl.RoutingControlFactory> RoutingControlFactories { get; set; } = [];

    private List<Route53RecoveryControl.SafetyRuleFactory> SafetyRuleFactories { get; set; } = [];

    private List<Route53RecoveryReadiness.CellFactory> CellFactories { get; set; } = [];

    private List<Route53RecoveryReadiness.ReadinessCheckFactory> ReadinessCheckFactories { get; set; } = [];

    private List<Route53RecoveryReadiness.RecoveryGroupFactory> RecoveryGroupFactories { get; set; } = [];

    private List<Route53Resolver.FirewallDomainListFactory> FirewallDomainListFactories { get; set; } = [];

    private List<Route53Resolver.FirewallRuleGroupFactory> FirewallRuleGroupFactories { get; set; } = [];

    private List<Route53Resolver.FirewallRuleGroupAssociationFactory> FirewallRuleGroupAssociationFactories { get; set; } = [];

    private List<Route53Resolver.OutpostResolverFactory> OutpostResolverFactories { get; set; } = [];

    private List<Route53Resolver.ResolverConfigFactory> ResolverConfigFactories { get; set; } = [];

    private List<Route53Resolver.ResolverDNSSECConfigFactory> ResolverDNSSECConfigFactories { get; set; } = [];

    private List<Route53Resolver.ResolverEndpointFactory> ResolverEndpointFactories { get; set; } = [];

    private List<Route53Resolver.ResolverQueryLoggingConfigFactory> ResolverQueryLoggingConfigFactories { get; set; } = [];

    private List<Route53Resolver.ResolverQueryLoggingConfigAssociationFactory> ResolverQueryLoggingConfigAssociationFactories { get; set; } = [];

    private List<Route53Resolver.ResolverRuleFactory> ResolverRuleFactories { get; set; } = [];

    private List<Route53Resolver.ResolverRuleAssociationFactory> ResolverRuleAssociationFactories { get; set; } = [];

    private List<S3.AccessGrantFactory> AccessGrantFactories { get; set; } = [];

    private List<S3.AccessGrantsInstanceFactory> AccessGrantsInstanceFactories { get; set; } = [];

    private List<S3.AccessGrantsLocationFactory> AccessGrantsLocationFactories { get; set; } = [];

    private List<S3.BucketPolicyFactory> S3BucketPolicyFactories { get; set; } = [];

    private List<S3Express.BucketPolicyFactory> S3ExpressBucketPolicyFactories { get; set; } = [];

    private List<S3Outposts.BucketPolicyFactory> S3OutpostsBucketPolicyFactories { get; set; } = [];

    private List<S3.MultiRegionAccessPointFactory> MultiRegionAccessPointFactories { get; set; } = [];

    private List<S3.MultiRegionAccessPointPolicyFactory> MultiRegionAccessPointPolicyFactories { get; set; } = [];

    private List<S3.StorageLensFactory> StorageLensFactories { get; set; } = [];

    private List<S3.StorageLensGroupFactory> StorageLensGroupFactories { get; set; } = [];

    private List<S3Express.DirectoryBucketFactory> DirectoryBucketFactories { get; set; } = [];

    private List<S3ObjectLambda.AccessPointPolicyFactory> AccessPointPolicyFactories { get; set; } = [];

    private List<SES.ContactListFactory> ContactListFactories { get; set; } = [];

    private List<SES.EmailIdentityFactory> EmailIdentityFactories { get; set; } = [];

    private List<SES.MailManagerAddonInstanceFactory> MailManagerAddonInstanceFactories { get; set; } = [];

    private List<SES.MailManagerAddonSubscriptionFactory> MailManagerAddonSubscriptionFactories { get; set; } = [];

    private List<SES.MailManagerArchiveFactory> MailManagerArchiveFactories { get; set; } = [];

    private List<SES.MailManagerIngressPointFactory> MailManagerIngressPointFactories { get; set; } = [];

    private List<SES.MailManagerRelayFactory> MailManagerRelayFactories { get; set; } = [];

    private List<SES.MailManagerRuleSetFactory> MailManagerRuleSetFactories { get; set; } = [];

    private List<SES.MailManagerTrafficPolicyFactory> MailManagerTrafficPolicyFactories { get; set; } = [];

    private List<SES.ReceiptFilterFactory> ReceiptFilterFactories { get; set; } = [];

    private List<SES.ReceiptRuleFactory> ReceiptRuleFactories { get; set; } = [];

    private List<SES.ReceiptRuleSetFactory> ReceiptRuleSetFactories { get; set; } = [];

    private List<SES.VdmAttributesFactory> VdmAttributesFactories { get; set; } = [];

    private List<SNS.SubscriptionFactory> SubscriptionFactories { get; set; } = [];

    private List<SNS.TopicInlinePolicyFactory> TopicInlinePolicyFactories { get; set; } = [];

    private List<SNS.TopicPolicyFactory> TopicPolicyFactories { get; set; } = [];

    private List<SQS.QueueInlinePolicyFactory> QueueInlinePolicyFactories { get; set; } = [];

    private List<SQS.QueuePolicyFactory> QueuePolicyFactories { get; set; } = [];

    private List<SSM.AssociationFactory> AssociationFactories { get; set; } = [];

    private List<SSM.DocumentFactory> DocumentFactories { get; set; } = [];

    private List<SSM.MaintenanceWindowFactory> MaintenanceWindowFactories { get; set; } = [];

    private List<SSM.MaintenanceWindowTargetFactory> MaintenanceWindowTargetFactories { get; set; } = [];

    private List<SSM.MaintenanceWindowTaskFactory> MaintenanceWindowTaskFactories { get; set; } = [];

    private List<SSM.ParameterFactory> ParameterFactories { get; set; } = [];

    private List<SSM.PatchBaselineFactory> PatchBaselineFactories { get; set; } = [];

    private List<SSM.ResourceDataSyncFactory> ResourceDataSyncFactories { get; set; } = [];

    private List<SSMContacts.ContactFactory> ContactFactories { get; set; } = [];

    private List<SSMContacts.ContactChannelFactory> ContactChannelFactories { get; set; } = [];

    private List<SSMContacts.PlanFactory> PlanFactories { get; set; } = [];

    private List<SSMContacts.RotationFactory> RotationFactories { get; set; } = [];

    private List<SSMIncidents.ReplicationSetFactory> ReplicationSetFactories { get; set; } = [];

    private List<SSMIncidents.ResponsePlanFactory> ResponsePlanFactories { get; set; } = [];

    private List<SSMQuickSetup.ConfigurationManagerFactory> ConfigurationManagerFactories { get; set; } = [];

    private List<SSO.ApplicationAssignmentFactory> ApplicationAssignmentFactories { get; set; } = [];

    private List<SSO.AssignmentFactory> AssignmentFactories { get; set; } = [];

    private List<SSO.InstanceAccessControlAttributeConfigurationFactory> InstanceAccessControlAttributeConfigurationFactories { get; set; } = [];

    private List<SSO.PermissionSetFactory> PermissionSetFactories { get; set; } = [];

    private List<SageMaker.AppImageConfigFactory> AppImageConfigFactories { get; set; } = [];

    private List<SageMaker.CodeRepositoryFactory> CodeRepositoryFactories { get; set; } = [];

    private List<SageMaker.DataQualityJobDefinitionFactory> DataQualityJobDefinitionFactories { get; set; } = [];

    private List<SageMaker.DeviceFleetFactory> DeviceFleetFactories { get; set; } = [];

    private List<SageMaker.EndpointConfigFactory> EndpointConfigFactories { get; set; } = [];

    private List<SageMaker.FeatureGroupFactory> FeatureGroupFactories { get; set; } = [];

    private List<SageMaker.ImageVersionFactory> ImageVersionFactories { get; set; } = [];

    private List<SageMaker.InferenceComponentFactory> InferenceComponentFactories { get; set; } = [];

    private List<SageMaker.InferenceExperimentFactory> InferenceExperimentFactories { get; set; } = [];

    private List<SageMaker.MlflowTrackingServerFactory> MlflowTrackingServerFactories { get; set; } = [];

    private List<SageMaker.ModelBiasJobDefinitionFactory> ModelBiasJobDefinitionFactories { get; set; } = [];

    private List<SageMaker.ModelCardFactory> ModelCardFactories { get; set; } = [];

    private List<SageMaker.ModelExplainabilityJobDefinitionFactory> ModelExplainabilityJobDefinitionFactories { get; set; } = [];

    private List<SageMaker.ModelPackageFactory> ModelPackageFactories { get; set; } = [];

    private List<SageMaker.ModelPackageGroupFactory> ModelPackageGroupFactories { get; set; } = [];

    private List<SageMaker.ModelQualityJobDefinitionFactory> ModelQualityJobDefinitionFactories { get; set; } = [];

    private List<SageMaker.MonitoringScheduleFactory> MonitoringScheduleFactories { get; set; } = [];

    private List<SageMaker.NotebookInstanceFactory> NotebookInstanceFactories { get; set; } = [];

    private List<SageMaker.NotebookInstanceLifecycleConfigFactory> NotebookInstanceLifecycleConfigFactories { get; set; } = [];

    private List<SageMaker.SpaceFactory> SpaceFactories { get; set; } = [];

    private List<SageMaker.StudioLifecycleConfigFactory> StudioLifecycleConfigFactories { get; set; } = [];

    private List<SageMaker.WorkteamFactory> WorkteamFactories { get; set; } = [];

    private List<Scheduler.ScheduleGroupFactory> ScheduleGroupFactories { get; set; } = [];

    private List<SecretsManager.RotationScheduleFactory> RotationScheduleFactories { get; set; } = [];

    private List<SecretsManager.SecretFactory> SecretFactories { get; set; } = [];

    private List<SecretsManager.SecretTargetAttachmentFactory> SecretTargetAttachmentFactories { get; set; } = [];

    private List<SecurityHub.AutomationRuleFactory> AutomationRuleFactories { get; set; } = [];

    private List<SecurityHub.ConfigurationPolicyFactory> ConfigurationPolicyFactories { get; set; } = [];

    private List<SecurityHub.DelegatedAdminFactory> DelegatedAdminFactories { get; set; } = [];

    private List<SecurityHub.FindingAggregatorFactory> FindingAggregatorFactories { get; set; } = [];

    private List<SecurityHub.HubFactory> HubFactories { get; set; } = [];

    private List<SecurityHub.InsightFactory> InsightFactories { get; set; } = [];

    private List<SecurityHub.OrganizationConfigurationFactory> OrganizationConfigurationFactories { get; set; } = [];

    private List<SecurityHub.PolicyAssociationFactory> PolicyAssociationFactories { get; set; } = [];

    private List<SecurityHub.ProductSubscriptionFactory> ProductSubscriptionFactories { get; set; } = [];

    private List<SecurityHub.SecurityControlFactory> SecurityControlFactories { get; set; } = [];

    private List<SecurityHub.StandardFactory> StandardFactories { get; set; } = [];

    private List<SecurityLake.AwsLogSourceFactory> AwsLogSourceFactories { get; set; } = [];

    private List<SecurityLake.DataLakeFactory> DataLakeFactories { get; set; } = [];

    private List<SecurityLake.SubscriberFactory> SubscriberFactories { get; set; } = [];

    private List<SecurityLake.SubscriberNotificationFactory> SubscriberNotificationFactories { get; set; } = [];

    private List<ServiceCatalog.AcceptedPortfolioShareFactory> AcceptedPortfolioShareFactories { get; set; } = [];

    private List<ServiceCatalog.CloudFormationProductFactory> CloudFormationProductFactories { get; set; } = [];

    private List<ServiceCatalog.CloudFormationProvisionedProductFactory> CloudFormationProvisionedProductFactories { get; set; } = [];

    private List<ServiceCatalog.LaunchNotificationConstraintFactory> LaunchNotificationConstraintFactories { get; set; } = [];

    private List<ServiceCatalog.LaunchRoleConstraintFactory> LaunchRoleConstraintFactories { get; set; } = [];

    private List<ServiceCatalog.LaunchTemplateConstraintFactory> LaunchTemplateConstraintFactories { get; set; } = [];

    private List<ServiceCatalog.PortfolioFactory> PortfolioFactories { get; set; } = [];

    private List<ServiceCatalog.PortfolioPrincipalAssociationFactory> PortfolioPrincipalAssociationFactories { get; set; } = [];

    private List<ServiceCatalog.PortfolioProductAssociationFactory> PortfolioProductAssociationFactories { get; set; } = [];

    private List<ServiceCatalog.PortfolioShareFactory> PortfolioShareFactories { get; set; } = [];

    private List<ServiceCatalog.ResourceUpdateConstraintFactory> ResourceUpdateConstraintFactories { get; set; } = [];

    private List<ServiceCatalog.ServiceActionFactory> ServiceActionFactories { get; set; } = [];

    private List<ServiceCatalog.ServiceActionAssociationFactory> ServiceActionAssociationFactories { get; set; } = [];

    private List<ServiceCatalog.StackSetConstraintFactory> StackSetConstraintFactories { get; set; } = [];

    private List<ServiceCatalog.TagOptionFactory> TagOptionFactories { get; set; } = [];

    private List<ServiceCatalog.TagOptionAssociationFactory> TagOptionAssociationFactories { get; set; } = [];

    private List<ServiceCatalogAppRegistry.AttributeGroupFactory> AttributeGroupFactories { get; set; } = [];

    private List<ServiceCatalogAppRegistry.AttributeGroupAssociationFactory> AttributeGroupAssociationFactories { get; set; } = [];

    private List<ServiceCatalogAppRegistry.ResourceAssociationFactory> ResourceAssociationFactories { get; set; } = [];

    private List<ServiceDiscovery.HttpNamespaceFactory> HttpNamespaceFactories { get; set; } = [];

    private List<ServiceDiscovery.PrivateDnsNamespaceFactory> PrivateDnsNamespaceFactories { get; set; } = [];

    private List<ServiceDiscovery.PublicDnsNamespaceFactory> PublicDnsNamespaceFactories { get; set; } = [];

    private List<Shield.DRTAccessFactory> DRTAccessFactories { get; set; } = [];

    private List<Shield.ProactiveEngagementFactory> ProactiveEngagementFactories { get; set; } = [];

    private List<Shield.ProtectionFactory> ProtectionFactories { get; set; } = [];

    private List<Shield.ProtectionGroupFactory> ProtectionGroupFactories { get; set; } = [];

    private List<Signer.ProfilePermissionFactory> ProfilePermissionFactories { get; set; } = [];

    private List<Signer.SigningProfileFactory> SigningProfileFactories { get; set; } = [];

    private List<SimSpaceWeaver.SimulationFactory> SimulationFactories { get; set; } = [];

    private List<StepFunctions.ActivityFactory> ActivityFactories { get; set; } = [];

    private List<StepFunctions.StateMachineFactory> StateMachineFactories { get; set; } = [];

    private List<StepFunctions.StateMachineAliasFactory> StateMachineAliasFactories { get; set; } = [];

    private List<StepFunctions.StateMachineVersionFactory> StateMachineVersionFactories { get; set; } = [];

    private List<SupportApp.AccountAliasFactory> AccountAliasFactories { get; set; } = [];

    private List<SupportApp.SlackWorkspaceConfigurationFactory> SlackWorkspaceConfigurationFactories { get; set; } = [];

    private List<Synthetics.CanaryFactory> CanaryFactories { get; set; } = [];

    private List<Timestream.InfluxDBInstanceFactory> InfluxDBInstanceFactories { get; set; } = [];

    private List<Timestream.ScheduledQueryFactory> ScheduledQueryFactories { get; set; } = [];

    private List<Transfer.AgreementFactory> AgreementFactories { get; set; } = [];

    private List<VerifiedPermissions.IdentitySourceFactory> IdentitySourceFactories { get; set; } = [];

    private List<VerifiedPermissions.PolicyStoreFactory> PolicyStoreFactories { get; set; } = [];

    private List<VerifiedPermissions.PolicyTemplateFactory> PolicyTemplateFactories { get; set; } = [];

    private List<VpcLattice.AccessLogSubscriptionFactory> AccessLogSubscriptionFactories { get; set; } = [];

    private List<VpcLattice.AuthPolicyFactory> AuthPolicyFactories { get; set; } = [];

    private List<VpcLattice.ServiceNetworkFactory> ServiceNetworkFactories { get; set; } = [];

    private List<VpcLattice.ServiceNetworkServiceAssociationFactory> ServiceNetworkServiceAssociationFactories { get; set; } = [];

    private List<VpcLattice.ServiceNetworkVpcAssociationFactory> ServiceNetworkVpcAssociationFactories { get; set; } = [];

    private List<WAF.ByteMatchSetFactory> WAFByteMatchSetFactories { get; set; } = [];

    private List<WAFRegional.ByteMatchSetFactory> WAFRegionalByteMatchSetFactories { get; set; } = [];

    private List<WAF.SizeConstraintSetFactory> WAFSizeConstraintSetFactories { get; set; } = [];

    private List<WAFRegional.SizeConstraintSetFactory> WAFRegionalSizeConstraintSetFactories { get; set; } = [];

    private List<WAF.SqlInjectionMatchSetFactory> WAFSqlInjectionMatchSetFactories { get; set; } = [];

    private List<WAFRegional.SqlInjectionMatchSetFactory> WAFRegionalSqlInjectionMatchSetFactories { get; set; } = [];

    private List<WAF.WebACLFactory> WAFWebACLFactories { get; set; } = [];

    private List<WAFRegional.WebACLFactory> WAFRegionalWebACLFactories { get; set; } = [];

    private List<WAFv2.WebACLFactory> WAFv2WebACLFactories { get; set; } = [];

    private List<WAF.XssMatchSetFactory> WAFXssMatchSetFactories { get; set; } = [];

    private List<WAFRegional.XssMatchSetFactory> WAFRegionalXssMatchSetFactories { get; set; } = [];

    private List<WAFRegional.GeoMatchSetFactory> GeoMatchSetFactories { get; set; } = [];

    private List<WAFRegional.RateBasedRuleFactory> RateBasedRuleFactories { get; set; } = [];

    private List<WAFRegional.RegexPatternSetFactory> WAFRegionalRegexPatternSetFactories { get; set; } = [];

    private List<WAFv2.RegexPatternSetFactory> WAFv2RegexPatternSetFactories { get; set; } = [];

    private List<WAFRegional.WebACLAssociationFactory> WAFRegionalWebACLAssociationFactories { get; set; } = [];

    private List<WAFv2.WebACLAssociationFactory> WAFv2WebACLAssociationFactories { get; set; } = [];

    private List<Wisdom.AssistantFactory> AssistantFactories { get; set; } = [];

    private List<Wisdom.AssistantAssociationFactory> AssistantAssociationFactories { get; set; } = [];

    private List<WorkSpaces.ConnectionAliasFactory> ConnectionAliasFactories { get; set; } = [];

    private List<WorkSpaces.WorkspacesPoolFactory> WorkspacesPoolFactories { get; set; } = [];

    private List<WorkSpacesWeb.BrowserSettingsFactory> BrowserSettingsFactories { get; set; } = [];

    private List<WorkSpacesWeb.IdentityProviderFactory> IdentityProviderFactories { get; set; } = [];

    private List<WorkSpacesWeb.IpAccessSettingsFactory> IpAccessSettingsFactories { get; set; } = [];

    private List<WorkSpacesWeb.NetworkSettingsFactory> NetworkSettingsFactories { get; set; } = [];

    private List<WorkSpacesWeb.UserAccessLoggingSettingsFactory> UserAccessLoggingSettingsFactories { get; set; } = [];

    private List<WorkSpacesWeb.UserSettingsFactory> UserSettingsFactories { get; set; } = [];

    private List<XRay.SamplingRuleFactory> SamplingRuleFactories { get; set; } = [];

    private List<ASK.SkillFactory> SkillFactories { get; set; } = [];

    protected override Stack Create()
    {
        WireChildStack(Stack);
        return Stack;
    }

    public ACMPCA.CertificateFactory WithACMPCACertificate(string resourceName = null, Action<Humidifier.ACMPCA.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateFactory(resourceName, resourceFactoryAction));
        ACMPCACertificateFactories.Add(factory);
        return factory;
    }

    public CertificateManager.CertificateFactory WithCertificateManagerCertificate(string resourceName = null, Action<Humidifier.CertificateManager.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CertificateManager.CertificateFactory(resourceName, resourceFactoryAction));
        CertificateManagerCertificateFactories.Add(factory);
        return factory;
    }

    public DMS.CertificateFactory WithDMSCertificate(string resourceName = null, Action<Humidifier.DMS.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.CertificateFactory(resourceName, resourceFactoryAction));
        DMSCertificateFactories.Add(factory);
        return factory;
    }

    public IoT.CertificateFactory WithIoTCertificate(string resourceName = null, Action<Humidifier.IoT.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CertificateFactory(resourceName, resourceFactoryAction));
        IoTCertificateFactories.Add(factory);
        return factory;
    }

    public Lightsail.CertificateFactory WithLightsailCertificate(string resourceName = null, Action<Humidifier.Lightsail.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.CertificateFactory(resourceName, resourceFactoryAction));
        LightsailCertificateFactories.Add(factory);
        return factory;
    }

    public Transfer.CertificateFactory WithTransferCertificate(string resourceName = null, Action<Humidifier.Transfer.Certificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.CertificateFactory(resourceName, resourceFactoryAction));
        TransferCertificateFactories.Add(factory);
        return factory;
    }

    public ACMPCA.CertificateAuthorityFactory WithCertificateAuthority(string resourceName = null, Action<Humidifier.ACMPCA.CertificateAuthority> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateAuthorityFactory(resourceName, resourceFactoryAction));
        CertificateAuthorityFactories.Add(factory);
        return factory;
    }

    public ACMPCA.CertificateAuthorityActivationFactory WithCertificateAuthorityActivation(string resourceName = null, Action<Humidifier.ACMPCA.CertificateAuthorityActivation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateAuthorityActivationFactory(resourceName, resourceFactoryAction));
        CertificateAuthorityActivationFactories.Add(factory);
        return factory;
    }

    public ACMPCA.PermissionFactory WithACMPCAPermission(string resourceName = null, Action<Humidifier.ACMPCA.Permission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.PermissionFactory(resourceName, resourceFactoryAction));
        ACMPCAPermissionFactories.Add(factory);
        return factory;
    }

    public Lambda.PermissionFactory WithLambdaPermission(string resourceName = null, Action<Humidifier.Lambda.Permission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.PermissionFactory(resourceName, resourceFactoryAction));
        LambdaPermissionFactories.Add(factory);
        return factory;
    }

    public RAM.PermissionFactory WithRAMPermission(string resourceName = null, Action<Humidifier.RAM.Permission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RAM.PermissionFactory(resourceName, resourceFactoryAction));
        RAMPermissionFactories.Add(factory);
        return factory;
    }

    public APS.RuleGroupsNamespaceFactory WithRuleGroupsNamespace(string resourceName = null, Action<Humidifier.APS.RuleGroupsNamespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new APS.RuleGroupsNamespaceFactory(resourceName, resourceFactoryAction));
        RuleGroupsNamespaceFactories.Add(factory);
        return factory;
    }

    public APS.ScraperFactory WithScraper(string resourceName = null, Action<Humidifier.APS.Scraper> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new APS.ScraperFactory(resourceName, resourceFactoryAction));
        ScraperFactories.Add(factory);
        return factory;
    }

    public APS.WorkspaceFactory WithAPSWorkspace(string resourceName = null, Action<Humidifier.APS.Workspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new APS.WorkspaceFactory(resourceName, resourceFactoryAction));
        APSWorkspaceFactories.Add(factory);
        return factory;
    }

    public Grafana.WorkspaceFactory WithGrafanaWorkspace(string resourceName = null, Action<Humidifier.Grafana.Workspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Grafana.WorkspaceFactory(resourceName, resourceFactoryAction));
        GrafanaWorkspaceFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.WorkspaceFactory WithIoTTwinMakerWorkspace(string resourceName = null, Action<Humidifier.IoTTwinMaker.Workspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.WorkspaceFactory(resourceName, resourceFactoryAction));
        IoTTwinMakerWorkspaceFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.WorkspaceFactory WithWorkSpacesWorkspace(string resourceName = null, Action<Humidifier.WorkSpaces.Workspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.WorkspaceFactory(resourceName, resourceFactoryAction));
        WorkSpacesWorkspaceFactories.Add(factory);
        return factory;
    }

    public ARCZonalShift.AutoshiftObserverNotificationStatusFactory WithAutoshiftObserverNotificationStatus(string resourceName = null, Action<Humidifier.ARCZonalShift.AutoshiftObserverNotificationStatus> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ARCZonalShift.AutoshiftObserverNotificationStatusFactory(resourceName, resourceFactoryAction));
        AutoshiftObserverNotificationStatusFactories.Add(factory);
        return factory;
    }

    public ARCZonalShift.ZonalAutoshiftConfigurationFactory WithZonalAutoshiftConfiguration(string resourceName = null, Action<Humidifier.ARCZonalShift.ZonalAutoshiftConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ARCZonalShift.ZonalAutoshiftConfigurationFactory(resourceName, resourceFactoryAction));
        ZonalAutoshiftConfigurationFactories.Add(factory);
        return factory;
    }

    public AccessAnalyzer.AnalyzerFactory WithAnalyzer(string resourceName = null, Action<Humidifier.AccessAnalyzer.Analyzer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AccessAnalyzer.AnalyzerFactory(resourceName, resourceFactoryAction));
        AnalyzerFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.BrokerFactory WithBroker(string resourceName = null, Action<Humidifier.AmazonMQ.Broker> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.BrokerFactory(resourceName, resourceFactoryAction));
        BrokerFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.ConfigurationFactory WithAmazonMQConfiguration(string resourceName = null, Action<Humidifier.AmazonMQ.Configuration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.ConfigurationFactory(resourceName, resourceFactoryAction));
        AmazonMQConfigurationFactories.Add(factory);
        return factory;
    }

    public MSK.ConfigurationFactory WithMSKConfiguration(string resourceName = null, Action<Humidifier.MSK.Configuration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ConfigurationFactory(resourceName, resourceFactoryAction));
        MSKConfigurationFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.ConfigurationAssociationFactory WithConfigurationAssociation(string resourceName = null, Action<Humidifier.AmazonMQ.ConfigurationAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.ConfigurationAssociationFactory(resourceName, resourceFactoryAction));
        ConfigurationAssociationFactories.Add(factory);
        return factory;
    }

    public Amplify.AppFactory WithAmplifyApp(string resourceName = null, Action<Humidifier.Amplify.App> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.AppFactory(resourceName, resourceFactoryAction));
        AmplifyAppFactories.Add(factory);
        return factory;
    }

    public OpsWorks.AppFactory WithOpsWorksApp(string resourceName = null, Action<Humidifier.OpsWorks.App> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.AppFactory(resourceName, resourceFactoryAction));
        OpsWorksAppFactories.Add(factory);
        return factory;
    }

    public Pinpoint.AppFactory WithPinpointApp(string resourceName = null, Action<Humidifier.Pinpoint.App> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.AppFactory(resourceName, resourceFactoryAction));
        PinpointAppFactories.Add(factory);
        return factory;
    }

    public ResilienceHub.AppFactory WithResilienceHubApp(string resourceName = null, Action<Humidifier.ResilienceHub.App> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResilienceHub.AppFactory(resourceName, resourceFactoryAction));
        ResilienceHubAppFactories.Add(factory);
        return factory;
    }

    public SageMaker.AppFactory WithSageMakerApp(string resourceName = null, Action<Humidifier.SageMaker.App> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.AppFactory(resourceName, resourceFactoryAction));
        SageMakerAppFactories.Add(factory);
        return factory;
    }

    public Amplify.BranchFactory WithBranch(string resourceName = null, Action<Humidifier.Amplify.Branch> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.BranchFactory(resourceName, resourceFactoryAction));
        BranchFactories.Add(factory);
        return factory;
    }

    public Amplify.DomainFactory WithAmplifyDomain(string resourceName = null, Action<Humidifier.Amplify.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.DomainFactory(resourceName, resourceFactoryAction));
        AmplifyDomainFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.DomainFactory WithCodeArtifactDomain(string resourceName = null, Action<Humidifier.CodeArtifact.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.DomainFactory(resourceName, resourceFactoryAction));
        CodeArtifactDomainFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.DomainFactory WithCustomerProfilesDomain(string resourceName = null, Action<Humidifier.CustomerProfiles.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.DomainFactory(resourceName, resourceFactoryAction));
        CustomerProfilesDomainFactories.Add(factory);
        return factory;
    }

    public DataZone.DomainFactory WithDataZoneDomain(string resourceName = null, Action<Humidifier.DataZone.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.DomainFactory(resourceName, resourceFactoryAction));
        DataZoneDomainFactories.Add(factory);
        return factory;
    }

    public Elasticsearch.DomainFactory WithElasticsearchDomain(string resourceName = null, Action<Humidifier.Elasticsearch.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Elasticsearch.DomainFactory(resourceName, resourceFactoryAction));
        ElasticsearchDomainFactories.Add(factory);
        return factory;
    }

    public OpenSearchService.DomainFactory WithOpenSearchServiceDomain(string resourceName = null, Action<Humidifier.OpenSearchService.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchService.DomainFactory(resourceName, resourceFactoryAction));
        OpenSearchServiceDomainFactories.Add(factory);
        return factory;
    }

    public SDB.DomainFactory WithSDBDomain(string resourceName = null, Action<Humidifier.SDB.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SDB.DomainFactory(resourceName, resourceFactoryAction));
        SDBDomainFactories.Add(factory);
        return factory;
    }

    public SageMaker.DomainFactory WithSageMakerDomain(string resourceName = null, Action<Humidifier.SageMaker.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DomainFactory(resourceName, resourceFactoryAction));
        SageMakerDomainFactories.Add(factory);
        return factory;
    }

    public VoiceID.DomainFactory WithVoiceIDDomain(string resourceName = null, Action<Humidifier.VoiceID.Domain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VoiceID.DomainFactory(resourceName, resourceFactoryAction));
        VoiceIDDomainFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.ComponentFactory WithAmplifyUIBuilderComponent(string resourceName = null, Action<Humidifier.AmplifyUIBuilder.Component> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.ComponentFactory(resourceName, resourceFactoryAction));
        AmplifyUIBuilderComponentFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ComponentFactory WithImageBuilderComponent(string resourceName = null, Action<Humidifier.ImageBuilder.Component> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ComponentFactory(resourceName, resourceFactoryAction));
        ImageBuilderComponentFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.FormFactory WithForm(string resourceName = null, Action<Humidifier.AmplifyUIBuilder.Form> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.FormFactory(resourceName, resourceFactoryAction));
        FormFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.ThemeFactory WithAmplifyUIBuilderTheme(string resourceName = null, Action<Humidifier.AmplifyUIBuilder.Theme> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.ThemeFactory(resourceName, resourceFactoryAction));
        AmplifyUIBuilderThemeFactories.Add(factory);
        return factory;
    }

    public QuickSight.ThemeFactory WithQuickSightTheme(string resourceName = null, Action<Humidifier.QuickSight.Theme> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.ThemeFactory(resourceName, resourceFactoryAction));
        QuickSightThemeFactories.Add(factory);
        return factory;
    }

    public ApiGateway.AccountFactory WithApiGatewayAccount(string resourceName = null, Action<Humidifier.ApiGateway.Account> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.AccountFactory(resourceName, resourceFactoryAction));
        ApiGatewayAccountFactories.Add(factory);
        return factory;
    }

    public CertificateManager.AccountFactory WithCertificateManagerAccount(string resourceName = null, Action<Humidifier.CertificateManager.Account> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CertificateManager.AccountFactory(resourceName, resourceFactoryAction));
        CertificateManagerAccountFactories.Add(factory);
        return factory;
    }

    public Organizations.AccountFactory WithOrganizationsAccount(string resourceName = null, Action<Humidifier.Organizations.Account> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.AccountFactory(resourceName, resourceFactoryAction));
        OrganizationsAccountFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ApiKeyFactory WithApiGatewayApiKey(string resourceName = null, Action<Humidifier.ApiGateway.ApiKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ApiKeyFactory(resourceName, resourceFactoryAction));
        ApiGatewayApiKeyFactories.Add(factory);
        return factory;
    }

    public AppSync.ApiKeyFactory WithAppSyncApiKey(string resourceName = null, Action<Humidifier.AppSync.ApiKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ApiKeyFactory(resourceName, resourceFactoryAction));
        AppSyncApiKeyFactories.Add(factory);
        return factory;
    }

    public ApiGateway.AuthorizerFactory WithApiGatewayAuthorizer(string resourceName = null, Action<Humidifier.ApiGateway.Authorizer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.AuthorizerFactory(resourceName, resourceFactoryAction));
        ApiGatewayAuthorizerFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.AuthorizerFactory WithApiGatewayV2Authorizer(string resourceName = null, Action<Humidifier.ApiGatewayV2.Authorizer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.AuthorizerFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2AuthorizerFactories.Add(factory);
        return factory;
    }

    public IoT.AuthorizerFactory WithIoTAuthorizer(string resourceName = null, Action<Humidifier.IoT.Authorizer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.AuthorizerFactory(resourceName, resourceFactoryAction));
        IoTAuthorizerFactories.Add(factory);
        return factory;
    }

    public ApiGateway.BasePathMappingFactory WithBasePathMapping(string resourceName = null, Action<Humidifier.ApiGateway.BasePathMapping> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.BasePathMappingFactory(resourceName, resourceFactoryAction));
        BasePathMappingFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ClientCertificateFactory WithClientCertificate(string resourceName = null, Action<Humidifier.ApiGateway.ClientCertificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ClientCertificateFactory(resourceName, resourceFactoryAction));
        ClientCertificateFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DeploymentFactory WithApiGatewayDeployment(string resourceName = null, Action<Humidifier.ApiGateway.Deployment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DeploymentFactory(resourceName, resourceFactoryAction));
        ApiGatewayDeploymentFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.DeploymentFactory WithApiGatewayV2Deployment(string resourceName = null, Action<Humidifier.ApiGatewayV2.Deployment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.DeploymentFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2DeploymentFactories.Add(factory);
        return factory;
    }

    public AppConfig.DeploymentFactory WithAppConfigDeployment(string resourceName = null, Action<Humidifier.AppConfig.Deployment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.DeploymentFactory(resourceName, resourceFactoryAction));
        AppConfigDeploymentFactories.Add(factory);
        return factory;
    }

    public GreengrassV2.DeploymentFactory WithGreengrassV2Deployment(string resourceName = null, Action<Humidifier.GreengrassV2.Deployment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GreengrassV2.DeploymentFactory(resourceName, resourceFactoryAction));
        GreengrassV2DeploymentFactories.Add(factory);
        return factory;
    }

    public LaunchWizard.DeploymentFactory WithLaunchWizardDeployment(string resourceName = null, Action<Humidifier.LaunchWizard.Deployment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LaunchWizard.DeploymentFactory(resourceName, resourceFactoryAction));
        LaunchWizardDeploymentFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DocumentationPartFactory WithDocumentationPart(string resourceName = null, Action<Humidifier.ApiGateway.DocumentationPart> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DocumentationPartFactory(resourceName, resourceFactoryAction));
        DocumentationPartFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DocumentationVersionFactory WithDocumentationVersion(string resourceName = null, Action<Humidifier.ApiGateway.DocumentationVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DocumentationVersionFactory(resourceName, resourceFactoryAction));
        DocumentationVersionFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DomainNameFactory WithApiGatewayDomainName(string resourceName = null, Action<Humidifier.ApiGateway.DomainName> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DomainNameFactory(resourceName, resourceFactoryAction));
        ApiGatewayDomainNameFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.DomainNameFactory WithApiGatewayV2DomainName(string resourceName = null, Action<Humidifier.ApiGatewayV2.DomainName> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.DomainNameFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2DomainNameFactories.Add(factory);
        return factory;
    }

    public AppSync.DomainNameFactory WithAppSyncDomainName(string resourceName = null, Action<Humidifier.AppSync.DomainName> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DomainNameFactory(resourceName, resourceFactoryAction));
        AppSyncDomainNameFactories.Add(factory);
        return factory;
    }

    public ApiGateway.GatewayResponseFactory WithGatewayResponse(string resourceName = null, Action<Humidifier.ApiGateway.GatewayResponse> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.GatewayResponseFactory(resourceName, resourceFactoryAction));
        GatewayResponseFactories.Add(factory);
        return factory;
    }

    public ApiGateway.MethodFactory WithMethod(string resourceName = null, Action<Humidifier.ApiGateway.Method> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.MethodFactory(resourceName, resourceFactoryAction));
        MethodFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ModelFactory WithApiGatewayModel(string resourceName = null, Action<Humidifier.ApiGateway.Model> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ModelFactory(resourceName, resourceFactoryAction));
        ApiGatewayModelFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ModelFactory WithApiGatewayV2Model(string resourceName = null, Action<Humidifier.ApiGatewayV2.Model> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ModelFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2ModelFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelFactory WithSageMakerModel(string resourceName = null, Action<Humidifier.SageMaker.Model> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelFactory(resourceName, resourceFactoryAction));
        SageMakerModelFactories.Add(factory);
        return factory;
    }

    public ApiGateway.RequestValidatorFactory WithRequestValidator(string resourceName = null, Action<Humidifier.ApiGateway.RequestValidator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.RequestValidatorFactory(resourceName, resourceFactoryAction));
        RequestValidatorFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ResourceFactory WithApiGatewayResource(string resourceName = null, Action<Humidifier.ApiGateway.Resource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ResourceFactory(resourceName, resourceFactoryAction));
        ApiGatewayResourceFactories.Add(factory);
        return factory;
    }

    public LakeFormation.ResourceFactory WithLakeFormationResource(string resourceName = null, Action<Humidifier.LakeFormation.Resource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.ResourceFactory(resourceName, resourceFactoryAction));
        LakeFormationResourceFactories.Add(factory);
        return factory;
    }

    public ApiGateway.RestApiFactory WithRestApi(string resourceName = null, Action<Humidifier.ApiGateway.RestApi> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.RestApiFactory(resourceName, resourceFactoryAction));
        RestApiFactories.Add(factory);
        return factory;
    }

    public ApiGateway.StageFactory WithApiGatewayStage(string resourceName = null, Action<Humidifier.ApiGateway.Stage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.StageFactory(resourceName, resourceFactoryAction));
        ApiGatewayStageFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.StageFactory WithApiGatewayV2Stage(string resourceName = null, Action<Humidifier.ApiGatewayV2.Stage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.StageFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2StageFactories.Add(factory);
        return factory;
    }

    public IVS.StageFactory WithIVSStage(string resourceName = null, Action<Humidifier.IVS.Stage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StageFactory(resourceName, resourceFactoryAction));
        IVSStageFactories.Add(factory);
        return factory;
    }

    public ApiGateway.UsagePlanFactory WithUsagePlan(string resourceName = null, Action<Humidifier.ApiGateway.UsagePlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.UsagePlanFactory(resourceName, resourceFactoryAction));
        UsagePlanFactories.Add(factory);
        return factory;
    }

    public ApiGateway.UsagePlanKeyFactory WithUsagePlanKey(string resourceName = null, Action<Humidifier.ApiGateway.UsagePlanKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.UsagePlanKeyFactory(resourceName, resourceFactoryAction));
        UsagePlanKeyFactories.Add(factory);
        return factory;
    }

    public ApiGateway.VpcLinkFactory WithApiGatewayVpcLink(string resourceName = null, Action<Humidifier.ApiGateway.VpcLink> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.VpcLinkFactory(resourceName, resourceFactoryAction));
        ApiGatewayVpcLinkFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.VpcLinkFactory WithApiGatewayV2VpcLink(string resourceName = null, Action<Humidifier.ApiGatewayV2.VpcLink> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.VpcLinkFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2VpcLinkFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiFactory WithApi(string resourceName = null, Action<Humidifier.ApiGatewayV2.Api> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiFactory(resourceName, resourceFactoryAction));
        ApiFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiGatewayManagedOverridesFactory WithApiGatewayManagedOverrides(string resourceName = null, Action<Humidifier.ApiGatewayV2.ApiGatewayManagedOverrides> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiGatewayManagedOverridesFactory(resourceName, resourceFactoryAction));
        ApiGatewayManagedOverridesFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiMappingFactory WithApiMapping(string resourceName = null, Action<Humidifier.ApiGatewayV2.ApiMapping> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiMappingFactory(resourceName, resourceFactoryAction));
        ApiMappingFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.IntegrationFactory WithApiGatewayV2Integration(string resourceName = null, Action<Humidifier.ApiGatewayV2.Integration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.IntegrationFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2IntegrationFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.IntegrationFactory WithCustomerProfilesIntegration(string resourceName = null, Action<Humidifier.CustomerProfiles.Integration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.IntegrationFactory(resourceName, resourceFactoryAction));
        CustomerProfilesIntegrationFactories.Add(factory);
        return factory;
    }

    public RDS.IntegrationFactory WithRDSIntegration(string resourceName = null, Action<Humidifier.RDS.Integration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.IntegrationFactory(resourceName, resourceFactoryAction));
        RDSIntegrationFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.IntegrationResponseFactory WithIntegrationResponse(string resourceName = null, Action<Humidifier.ApiGatewayV2.IntegrationResponse> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.IntegrationResponseFactory(resourceName, resourceFactoryAction));
        IntegrationResponseFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.RouteFactory WithApiGatewayV2Route(string resourceName = null, Action<Humidifier.ApiGatewayV2.Route> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.RouteFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2RouteFactories.Add(factory);
        return factory;
    }

    public AppMesh.RouteFactory WithAppMeshRoute(string resourceName = null, Action<Humidifier.AppMesh.Route> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.RouteFactory(resourceName, resourceFactoryAction));
        AppMeshRouteFactories.Add(factory);
        return factory;
    }

    public EC2.RouteFactory WithEC2Route(string resourceName = null, Action<Humidifier.EC2.Route> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.RouteFactory(resourceName, resourceFactoryAction));
        EC2RouteFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.RouteFactory WithRefactorSpacesRoute(string resourceName = null, Action<Humidifier.RefactorSpaces.Route> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.RouteFactory(resourceName, resourceFactoryAction));
        RefactorSpacesRouteFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.RouteResponseFactory WithRouteResponse(string resourceName = null, Action<Humidifier.ApiGatewayV2.RouteResponse> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.RouteResponseFactory(resourceName, resourceFactoryAction));
        RouteResponseFactories.Add(factory);
        return factory;
    }

    public AppConfig.ApplicationFactory WithAppConfigApplication(string resourceName = null, Action<Humidifier.AppConfig.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ApplicationFactory(resourceName, resourceFactoryAction));
        AppConfigApplicationFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.ApplicationFactory WithAppIntegrationsApplication(string resourceName = null, Action<Humidifier.AppIntegrations.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.ApplicationFactory(resourceName, resourceFactoryAction));
        AppIntegrationsApplicationFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationFactory WithAppStreamApplication(string resourceName = null, Action<Humidifier.AppStream.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationFactory(resourceName, resourceFactoryAction));
        AppStreamApplicationFactories.Add(factory);
        return factory;
    }

    public ApplicationInsights.ApplicationFactory WithApplicationInsightsApplication(string resourceName = null, Action<Humidifier.ApplicationInsights.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationInsights.ApplicationFactory(resourceName, resourceFactoryAction));
        ApplicationInsightsApplicationFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.ApplicationFactory WithCodeDeployApplication(string resourceName = null, Action<Humidifier.CodeDeploy.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.ApplicationFactory(resourceName, resourceFactoryAction));
        CodeDeployApplicationFactories.Add(factory);
        return factory;
    }

    public EMRServerless.ApplicationFactory WithEMRServerlessApplication(string resourceName = null, Action<Humidifier.EMRServerless.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMRServerless.ApplicationFactory(resourceName, resourceFactoryAction));
        EMRServerlessApplicationFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ApplicationFactory WithElasticBeanstalkApplication(string resourceName = null, Action<Humidifier.ElasticBeanstalk.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ApplicationFactory(resourceName, resourceFactoryAction));
        ElasticBeanstalkApplicationFactories.Add(factory);
        return factory;
    }

    public IoTFleetHub.ApplicationFactory WithIoTFleetHubApplication(string resourceName = null, Action<Humidifier.IoTFleetHub.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetHub.ApplicationFactory(resourceName, resourceFactoryAction));
        IoTFleetHubApplicationFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationFactory WithKinesisAnalyticsApplication(string resourceName = null, Action<Humidifier.KinesisAnalytics.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationFactory WithKinesisAnalyticsV2Application(string resourceName = null, Action<Humidifier.KinesisAnalyticsV2.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationFactories.Add(factory);
        return factory;
    }

    public M2.ApplicationFactory WithM2Application(string resourceName = null, Action<Humidifier.M2.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new M2.ApplicationFactory(resourceName, resourceFactoryAction));
        M2ApplicationFactories.Add(factory);
        return factory;
    }

    public QBusiness.ApplicationFactory WithQBusinessApplication(string resourceName = null, Action<Humidifier.QBusiness.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.ApplicationFactory(resourceName, resourceFactoryAction));
        QBusinessApplicationFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.ApplicationFactory WithRefactorSpacesApplication(string resourceName = null, Action<Humidifier.RefactorSpaces.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.ApplicationFactory(resourceName, resourceFactoryAction));
        RefactorSpacesApplicationFactories.Add(factory);
        return factory;
    }

    public SSO.ApplicationFactory WithSSOApplication(string resourceName = null, Action<Humidifier.SSO.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.ApplicationFactory(resourceName, resourceFactoryAction));
        SSOApplicationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.ApplicationFactory WithServiceCatalogAppRegistryApplication(string resourceName = null, Action<Humidifier.ServiceCatalogAppRegistry.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.ApplicationFactory(resourceName, resourceFactoryAction));
        ServiceCatalogAppRegistryApplicationFactories.Add(factory);
        return factory;
    }

    public SystemsManagerSAP.ApplicationFactory WithSystemsManagerSAPApplication(string resourceName = null, Action<Humidifier.SystemsManagerSAP.Application> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SystemsManagerSAP.ApplicationFactory(resourceName, resourceFactoryAction));
        SystemsManagerSAPApplicationFactories.Add(factory);
        return factory;
    }

    public AppConfig.ConfigurationProfileFactory WithConfigurationProfile(string resourceName = null, Action<Humidifier.AppConfig.ConfigurationProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ConfigurationProfileFactory(resourceName, resourceFactoryAction));
        ConfigurationProfileFactories.Add(factory);
        return factory;
    }

    public AppConfig.DeploymentStrategyFactory WithDeploymentStrategy(string resourceName = null, Action<Humidifier.AppConfig.DeploymentStrategy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.DeploymentStrategyFactory(resourceName, resourceFactoryAction));
        DeploymentStrategyFactories.Add(factory);
        return factory;
    }

    public AppConfig.EnvironmentFactory WithAppConfigEnvironment(string resourceName = null, Action<Humidifier.AppConfig.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.EnvironmentFactory(resourceName, resourceFactoryAction));
        AppConfigEnvironmentFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentFactory WithDataZoneEnvironment(string resourceName = null, Action<Humidifier.DataZone.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentFactory(resourceName, resourceFactoryAction));
        DataZoneEnvironmentFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.EnvironmentFactory WithElasticBeanstalkEnvironment(string resourceName = null, Action<Humidifier.ElasticBeanstalk.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.EnvironmentFactory(resourceName, resourceFactoryAction));
        ElasticBeanstalkEnvironmentFactories.Add(factory);
        return factory;
    }

    public FinSpace.EnvironmentFactory WithFinSpaceEnvironment(string resourceName = null, Action<Humidifier.FinSpace.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FinSpace.EnvironmentFactory(resourceName, resourceFactoryAction));
        FinSpaceEnvironmentFactories.Add(factory);
        return factory;
    }

    public M2.EnvironmentFactory WithM2Environment(string resourceName = null, Action<Humidifier.M2.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new M2.EnvironmentFactory(resourceName, resourceFactoryAction));
        M2EnvironmentFactories.Add(factory);
        return factory;
    }

    public MWAA.EnvironmentFactory WithMWAAEnvironment(string resourceName = null, Action<Humidifier.MWAA.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MWAA.EnvironmentFactory(resourceName, resourceFactoryAction));
        MWAAEnvironmentFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.EnvironmentFactory WithRefactorSpacesEnvironment(string resourceName = null, Action<Humidifier.RefactorSpaces.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.EnvironmentFactory(resourceName, resourceFactoryAction));
        RefactorSpacesEnvironmentFactories.Add(factory);
        return factory;
    }

    public WorkSpacesThinClient.EnvironmentFactory WithWorkSpacesThinClientEnvironment(string resourceName = null, Action<Humidifier.WorkSpacesThinClient.Environment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesThinClient.EnvironmentFactory(resourceName, resourceFactoryAction));
        WorkSpacesThinClientEnvironmentFactories.Add(factory);
        return factory;
    }

    public AppConfig.ExtensionFactory WithExtension(string resourceName = null, Action<Humidifier.AppConfig.Extension> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ExtensionFactory(resourceName, resourceFactoryAction));
        ExtensionFactories.Add(factory);
        return factory;
    }

    public AppConfig.ExtensionAssociationFactory WithExtensionAssociation(string resourceName = null, Action<Humidifier.AppConfig.ExtensionAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ExtensionAssociationFactory(resourceName, resourceFactoryAction));
        ExtensionAssociationFactories.Add(factory);
        return factory;
    }

    public AppConfig.HostedConfigurationVersionFactory WithHostedConfigurationVersion(string resourceName = null, Action<Humidifier.AppConfig.HostedConfigurationVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.HostedConfigurationVersionFactory(resourceName, resourceFactoryAction));
        HostedConfigurationVersionFactories.Add(factory);
        return factory;
    }

    public AppFlow.ConnectorFactory WithAppFlowConnector(string resourceName = null, Action<Humidifier.AppFlow.Connector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.ConnectorFactory(resourceName, resourceFactoryAction));
        AppFlowConnectorFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.ConnectorFactory WithKafkaConnectConnector(string resourceName = null, Action<Humidifier.KafkaConnect.Connector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.ConnectorFactory(resourceName, resourceFactoryAction));
        KafkaConnectConnectorFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.ConnectorFactory WithPCAConnectorADConnector(string resourceName = null, Action<Humidifier.PCAConnectorAD.Connector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.ConnectorFactory(resourceName, resourceFactoryAction));
        PCAConnectorADConnectorFactories.Add(factory);
        return factory;
    }

    public PCAConnectorSCEP.ConnectorFactory WithPCAConnectorSCEPConnector(string resourceName = null, Action<Humidifier.PCAConnectorSCEP.Connector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorSCEP.ConnectorFactory(resourceName, resourceFactoryAction));
        PCAConnectorSCEPConnectorFactories.Add(factory);
        return factory;
    }

    public Transfer.ConnectorFactory WithTransferConnector(string resourceName = null, Action<Humidifier.Transfer.Connector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ConnectorFactory(resourceName, resourceFactoryAction));
        TransferConnectorFactories.Add(factory);
        return factory;
    }

    public AppFlow.ConnectorProfileFactory WithConnectorProfile(string resourceName = null, Action<Humidifier.AppFlow.ConnectorProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.ConnectorProfileFactory(resourceName, resourceFactoryAction));
        ConnectorProfileFactories.Add(factory);
        return factory;
    }

    public AppFlow.FlowFactory WithAppFlowFlow(string resourceName = null, Action<Humidifier.AppFlow.Flow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.FlowFactory(resourceName, resourceFactoryAction));
        AppFlowFlowFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowFactory WithBedrockFlow(string resourceName = null, Action<Humidifier.Bedrock.Flow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowFactory(resourceName, resourceFactoryAction));
        BedrockFlowFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowFactory WithMediaConnectFlow(string resourceName = null, Action<Humidifier.MediaConnect.Flow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowFactory(resourceName, resourceFactoryAction));
        MediaConnectFlowFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.DataIntegrationFactory WithDataIntegration(string resourceName = null, Action<Humidifier.AppIntegrations.DataIntegration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.DataIntegrationFactory(resourceName, resourceFactoryAction));
        DataIntegrationFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.EventIntegrationFactory WithEventIntegration(string resourceName = null, Action<Humidifier.AppIntegrations.EventIntegration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.EventIntegrationFactory(resourceName, resourceFactoryAction));
        EventIntegrationFactories.Add(factory);
        return factory;
    }

    public AppMesh.GatewayRouteFactory WithGatewayRoute(string resourceName = null, Action<Humidifier.AppMesh.GatewayRoute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.GatewayRouteFactory(resourceName, resourceFactoryAction));
        GatewayRouteFactories.Add(factory);
        return factory;
    }

    public AppMesh.MeshFactory WithMesh(string resourceName = null, Action<Humidifier.AppMesh.Mesh> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.MeshFactory(resourceName, resourceFactoryAction));
        MeshFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualGatewayFactory WithVirtualGateway(string resourceName = null, Action<Humidifier.AppMesh.VirtualGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualGatewayFactory(resourceName, resourceFactoryAction));
        VirtualGatewayFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualNodeFactory WithVirtualNode(string resourceName = null, Action<Humidifier.AppMesh.VirtualNode> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualNodeFactory(resourceName, resourceFactoryAction));
        VirtualNodeFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualRouterFactory WithVirtualRouter(string resourceName = null, Action<Humidifier.AppMesh.VirtualRouter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualRouterFactory(resourceName, resourceFactoryAction));
        VirtualRouterFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualServiceFactory WithVirtualService(string resourceName = null, Action<Humidifier.AppMesh.VirtualService> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualServiceFactory(resourceName, resourceFactoryAction));
        VirtualServiceFactories.Add(factory);
        return factory;
    }

    public AppRunner.AutoScalingConfigurationFactory WithAutoScalingConfiguration(string resourceName = null, Action<Humidifier.AppRunner.AutoScalingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.AutoScalingConfigurationFactory(resourceName, resourceFactoryAction));
        AutoScalingConfigurationFactories.Add(factory);
        return factory;
    }

    public AppRunner.ObservabilityConfigurationFactory WithObservabilityConfiguration(string resourceName = null, Action<Humidifier.AppRunner.ObservabilityConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.ObservabilityConfigurationFactory(resourceName, resourceFactoryAction));
        ObservabilityConfigurationFactories.Add(factory);
        return factory;
    }

    public AppRunner.ServiceFactory WithAppRunnerService(string resourceName = null, Action<Humidifier.AppRunner.Service> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.ServiceFactory(resourceName, resourceFactoryAction));
        AppRunnerServiceFactories.Add(factory);
        return factory;
    }

    public ECS.ServiceFactory WithECSService(string resourceName = null, Action<Humidifier.ECS.Service> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ServiceFactory(resourceName, resourceFactoryAction));
        ECSServiceFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.ServiceFactory WithRefactorSpacesService(string resourceName = null, Action<Humidifier.RefactorSpaces.Service> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.ServiceFactory(resourceName, resourceFactoryAction));
        RefactorSpacesServiceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.ServiceFactory WithServiceDiscoveryService(string resourceName = null, Action<Humidifier.ServiceDiscovery.Service> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.ServiceFactory(resourceName, resourceFactoryAction));
        ServiceDiscoveryServiceFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceFactory WithVpcLatticeService(string resourceName = null, Action<Humidifier.VpcLattice.Service> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceFactory(resourceName, resourceFactoryAction));
        VpcLatticeServiceFactories.Add(factory);
        return factory;
    }

    public AppRunner.VpcConnectorFactory WithVpcConnector(string resourceName = null, Action<Humidifier.AppRunner.VpcConnector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.VpcConnectorFactory(resourceName, resourceFactoryAction));
        VpcConnectorFactories.Add(factory);
        return factory;
    }

    public AppRunner.VpcIngressConnectionFactory WithVpcIngressConnection(string resourceName = null, Action<Humidifier.AppRunner.VpcIngressConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.VpcIngressConnectionFactory(resourceName, resourceFactoryAction));
        VpcIngressConnectionFactories.Add(factory);
        return factory;
    }

    public AppStream.AppBlockFactory WithAppBlock(string resourceName = null, Action<Humidifier.AppStream.AppBlock> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.AppBlockFactory(resourceName, resourceFactoryAction));
        AppBlockFactories.Add(factory);
        return factory;
    }

    public AppStream.AppBlockBuilderFactory WithAppBlockBuilder(string resourceName = null, Action<Humidifier.AppStream.AppBlockBuilder> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.AppBlockBuilderFactory(resourceName, resourceFactoryAction));
        AppBlockBuilderFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationEntitlementAssociationFactory WithApplicationEntitlementAssociation(string resourceName = null, Action<Humidifier.AppStream.ApplicationEntitlementAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationEntitlementAssociationFactory(resourceName, resourceFactoryAction));
        ApplicationEntitlementAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationFleetAssociationFactory WithApplicationFleetAssociation(string resourceName = null, Action<Humidifier.AppStream.ApplicationFleetAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationFleetAssociationFactory(resourceName, resourceFactoryAction));
        ApplicationFleetAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.DirectoryConfigFactory WithDirectoryConfig(string resourceName = null, Action<Humidifier.AppStream.DirectoryConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.DirectoryConfigFactory(resourceName, resourceFactoryAction));
        DirectoryConfigFactories.Add(factory);
        return factory;
    }

    public AppStream.EntitlementFactory WithEntitlement(string resourceName = null, Action<Humidifier.AppStream.Entitlement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.EntitlementFactory(resourceName, resourceFactoryAction));
        EntitlementFactories.Add(factory);
        return factory;
    }

    public AppStream.FleetFactory WithAppStreamFleet(string resourceName = null, Action<Humidifier.AppStream.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.FleetFactory(resourceName, resourceFactoryAction));
        AppStreamFleetFactories.Add(factory);
        return factory;
    }

    public CodeBuild.FleetFactory WithCodeBuildFleet(string resourceName = null, Action<Humidifier.CodeBuild.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.FleetFactory(resourceName, resourceFactoryAction));
        CodeBuildFleetFactories.Add(factory);
        return factory;
    }

    public Deadline.FleetFactory WithDeadlineFleet(string resourceName = null, Action<Humidifier.Deadline.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.FleetFactory(resourceName, resourceFactoryAction));
        DeadlineFleetFactories.Add(factory);
        return factory;
    }

    public GameLift.FleetFactory WithGameLiftFleet(string resourceName = null, Action<Humidifier.GameLift.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.FleetFactory(resourceName, resourceFactoryAction));
        GameLiftFleetFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.FleetFactory WithIoTFleetWiseFleet(string resourceName = null, Action<Humidifier.IoTFleetWise.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.FleetFactory(resourceName, resourceFactoryAction));
        IoTFleetWiseFleetFactories.Add(factory);
        return factory;
    }

    public RoboMaker.FleetFactory WithRoboMakerFleet(string resourceName = null, Action<Humidifier.RoboMaker.Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.FleetFactory(resourceName, resourceFactoryAction));
        RoboMakerFleetFactories.Add(factory);
        return factory;
    }

    public AppStream.ImageBuilderFactory WithImageBuilder(string resourceName = null, Action<Humidifier.AppStream.ImageBuilder> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ImageBuilderFactory(resourceName, resourceFactoryAction));
        ImageBuilderFactories.Add(factory);
        return factory;
    }

    public AppStream.StackFactory WithAppStreamStack(string resourceName = null, Action<Humidifier.AppStream.Stack> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackFactory(resourceName, resourceFactoryAction));
        AppStreamStackFactories.Add(factory);
        return factory;
    }

    public CloudFormation.StackFactory WithCloudFormationStack(string resourceName = null, Action<Humidifier.CloudFormation.Stack> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.StackFactory(resourceName, resourceFactoryAction));
        CloudFormationStackFactories.Add(factory);
        return factory;
    }

    public OpsWorks.StackFactory WithOpsWorksStack(string resourceName = null, Action<Humidifier.OpsWorks.Stack> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.StackFactory(resourceName, resourceFactoryAction));
        OpsWorksStackFactories.Add(factory);
        return factory;
    }

    public AppStream.StackFleetAssociationFactory WithStackFleetAssociation(string resourceName = null, Action<Humidifier.AppStream.StackFleetAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackFleetAssociationFactory(resourceName, resourceFactoryAction));
        StackFleetAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.StackUserAssociationFactory WithStackUserAssociation(string resourceName = null, Action<Humidifier.AppStream.StackUserAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackUserAssociationFactory(resourceName, resourceFactoryAction));
        StackUserAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.UserFactory WithAppStreamUser(string resourceName = null, Action<Humidifier.AppStream.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.UserFactory(resourceName, resourceFactoryAction));
        AppStreamUserFactories.Add(factory);
        return factory;
    }

    public Connect.UserFactory WithConnectUser(string resourceName = null, Action<Humidifier.Connect.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserFactory(resourceName, resourceFactoryAction));
        ConnectUserFactories.Add(factory);
        return factory;
    }

    public ElastiCache.UserFactory WithElastiCacheUser(string resourceName = null, Action<Humidifier.ElastiCache.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.UserFactory(resourceName, resourceFactoryAction));
        ElastiCacheUserFactories.Add(factory);
        return factory;
    }

    public IAM.UserFactory WithIAMUser(string resourceName = null, Action<Humidifier.IAM.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserFactory(resourceName, resourceFactoryAction));
        IAMUserFactories.Add(factory);
        return factory;
    }

    public MemoryDB.UserFactory WithMemoryDBUser(string resourceName = null, Action<Humidifier.MemoryDB.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.UserFactory(resourceName, resourceFactoryAction));
        MemoryDBUserFactories.Add(factory);
        return factory;
    }

    public Transfer.UserFactory WithTransferUser(string resourceName = null, Action<Humidifier.Transfer.User> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.UserFactory(resourceName, resourceFactoryAction));
        TransferUserFactories.Add(factory);
        return factory;
    }

    public AppSync.ApiCacheFactory WithApiCache(string resourceName = null, Action<Humidifier.AppSync.ApiCache> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ApiCacheFactory(resourceName, resourceFactoryAction));
        ApiCacheFactories.Add(factory);
        return factory;
    }

    public AppSync.DataSourceFactory WithAppSyncDataSource(string resourceName = null, Action<Humidifier.AppSync.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DataSourceFactory(resourceName, resourceFactoryAction));
        AppSyncDataSourceFactories.Add(factory);
        return factory;
    }

    public Bedrock.DataSourceFactory WithBedrockDataSource(string resourceName = null, Action<Humidifier.Bedrock.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.DataSourceFactory(resourceName, resourceFactoryAction));
        BedrockDataSourceFactories.Add(factory);
        return factory;
    }

    public DataZone.DataSourceFactory WithDataZoneDataSource(string resourceName = null, Action<Humidifier.DataZone.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.DataSourceFactory(resourceName, resourceFactoryAction));
        DataZoneDataSourceFactories.Add(factory);
        return factory;
    }

    public Kendra.DataSourceFactory WithKendraDataSource(string resourceName = null, Action<Humidifier.Kendra.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.DataSourceFactory(resourceName, resourceFactoryAction));
        KendraDataSourceFactories.Add(factory);
        return factory;
    }

    public QBusiness.DataSourceFactory WithQBusinessDataSource(string resourceName = null, Action<Humidifier.QBusiness.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.DataSourceFactory(resourceName, resourceFactoryAction));
        QBusinessDataSourceFactories.Add(factory);
        return factory;
    }

    public QuickSight.DataSourceFactory WithQuickSightDataSource(string resourceName = null, Action<Humidifier.QuickSight.DataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DataSourceFactory(resourceName, resourceFactoryAction));
        QuickSightDataSourceFactories.Add(factory);
        return factory;
    }

    public AppSync.DomainNameApiAssociationFactory WithDomainNameApiAssociation(string resourceName = null, Action<Humidifier.AppSync.DomainNameApiAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DomainNameApiAssociationFactory(resourceName, resourceFactoryAction));
        DomainNameApiAssociationFactories.Add(factory);
        return factory;
    }

    public AppSync.FunctionConfigurationFactory WithFunctionConfiguration(string resourceName = null, Action<Humidifier.AppSync.FunctionConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.FunctionConfigurationFactory(resourceName, resourceFactoryAction));
        FunctionConfigurationFactories.Add(factory);
        return factory;
    }

    public AppSync.GraphQLApiFactory WithGraphQLApi(string resourceName = null, Action<Humidifier.AppSync.GraphQLApi> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.GraphQLApiFactory(resourceName, resourceFactoryAction));
        GraphQLApiFactories.Add(factory);
        return factory;
    }

    public AppSync.GraphQLSchemaFactory WithGraphQLSchema(string resourceName = null, Action<Humidifier.AppSync.GraphQLSchema> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.GraphQLSchemaFactory(resourceName, resourceFactoryAction));
        GraphQLSchemaFactories.Add(factory);
        return factory;
    }

    public AppSync.ResolverFactory WithResolver(string resourceName = null, Action<Humidifier.AppSync.Resolver> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ResolverFactory(resourceName, resourceFactoryAction));
        ResolverFactories.Add(factory);
        return factory;
    }

    public AppSync.SourceApiAssociationFactory WithSourceApiAssociation(string resourceName = null, Action<Humidifier.AppSync.SourceApiAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.SourceApiAssociationFactory(resourceName, resourceFactoryAction));
        SourceApiAssociationFactories.Add(factory);
        return factory;
    }

    public AppTest.TestCaseFactory WithTestCase(string resourceName = null, Action<Humidifier.AppTest.TestCase> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AppTest.TestCaseFactory(resourceName, resourceFactoryAction));
        TestCaseFactories.Add(factory);
        return factory;
    }

    public ApplicationAutoScaling.ScalableTargetFactory WithScalableTarget(string resourceName = null, Action<Humidifier.ApplicationAutoScaling.ScalableTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationAutoScaling.ScalableTargetFactory(resourceName, resourceFactoryAction));
        ScalableTargetFactories.Add(factory);
        return factory;
    }

    public ApplicationAutoScaling.ScalingPolicyFactory WithApplicationAutoScalingScalingPolicy(string resourceName = null, Action<Humidifier.ApplicationAutoScaling.ScalingPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationAutoScaling.ScalingPolicyFactory(resourceName, resourceFactoryAction));
        ApplicationAutoScalingScalingPolicyFactories.Add(factory);
        return factory;
    }

    public AutoScaling.ScalingPolicyFactory WithAutoScalingScalingPolicy(string resourceName = null, Action<Humidifier.AutoScaling.ScalingPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.ScalingPolicyFactory(resourceName, resourceFactoryAction));
        AutoScalingScalingPolicyFactories.Add(factory);
        return factory;
    }

    public ApplicationSignals.ServiceLevelObjectiveFactory WithServiceLevelObjective(string resourceName = null, Action<Humidifier.ApplicationSignals.ServiceLevelObjective> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationSignals.ServiceLevelObjectiveFactory(resourceName, resourceFactoryAction));
        ServiceLevelObjectiveFactories.Add(factory);
        return factory;
    }

    public Athena.CapacityReservationFactory WithAthenaCapacityReservation(string resourceName = null, Action<Humidifier.Athena.CapacityReservation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.CapacityReservationFactory(resourceName, resourceFactoryAction));
        AthenaCapacityReservationFactories.Add(factory);
        return factory;
    }

    public EC2.CapacityReservationFactory WithEC2CapacityReservation(string resourceName = null, Action<Humidifier.EC2.CapacityReservation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CapacityReservationFactory(resourceName, resourceFactoryAction));
        EC2CapacityReservationFactories.Add(factory);
        return factory;
    }

    public Athena.DataCatalogFactory WithDataCatalog(string resourceName = null, Action<Humidifier.Athena.DataCatalog> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.DataCatalogFactory(resourceName, resourceFactoryAction));
        DataCatalogFactories.Add(factory);
        return factory;
    }

    public Athena.NamedQueryFactory WithNamedQuery(string resourceName = null, Action<Humidifier.Athena.NamedQuery> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.NamedQueryFactory(resourceName, resourceFactoryAction));
        NamedQueryFactories.Add(factory);
        return factory;
    }

    public Athena.PreparedStatementFactory WithPreparedStatement(string resourceName = null, Action<Humidifier.Athena.PreparedStatement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.PreparedStatementFactory(resourceName, resourceFactoryAction));
        PreparedStatementFactories.Add(factory);
        return factory;
    }

    public Athena.WorkGroupFactory WithWorkGroup(string resourceName = null, Action<Humidifier.Athena.WorkGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.WorkGroupFactory(resourceName, resourceFactoryAction));
        WorkGroupFactories.Add(factory);
        return factory;
    }

    public AuditManager.AssessmentFactory WithAssessment(string resourceName = null, Action<Humidifier.AuditManager.Assessment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AuditManager.AssessmentFactory(resourceName, resourceFactoryAction));
        AssessmentFactories.Add(factory);
        return factory;
    }

    public AutoScaling.AutoScalingGroupFactory WithAutoScalingGroup(string resourceName = null, Action<Humidifier.AutoScaling.AutoScalingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.AutoScalingGroupFactory(resourceName, resourceFactoryAction));
        AutoScalingGroupFactories.Add(factory);
        return factory;
    }

    public AutoScaling.LaunchConfigurationFactory WithLaunchConfiguration(string resourceName = null, Action<Humidifier.AutoScaling.LaunchConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.LaunchConfigurationFactory(resourceName, resourceFactoryAction));
        LaunchConfigurationFactories.Add(factory);
        return factory;
    }

    public AutoScaling.LifecycleHookFactory WithLifecycleHook(string resourceName = null, Action<Humidifier.AutoScaling.LifecycleHook> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.LifecycleHookFactory(resourceName, resourceFactoryAction));
        LifecycleHookFactories.Add(factory);
        return factory;
    }

    public AutoScaling.ScheduledActionFactory WithAutoScalingScheduledAction(string resourceName = null, Action<Humidifier.AutoScaling.ScheduledAction> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.ScheduledActionFactory(resourceName, resourceFactoryAction));
        AutoScalingScheduledActionFactories.Add(factory);
        return factory;
    }

    public Redshift.ScheduledActionFactory WithRedshiftScheduledAction(string resourceName = null, Action<Humidifier.Redshift.ScheduledAction> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ScheduledActionFactory(resourceName, resourceFactoryAction));
        RedshiftScheduledActionFactories.Add(factory);
        return factory;
    }

    public AutoScaling.WarmPoolFactory WithWarmPool(string resourceName = null, Action<Humidifier.AutoScaling.WarmPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.WarmPoolFactory(resourceName, resourceFactoryAction));
        WarmPoolFactories.Add(factory);
        return factory;
    }

    public AutoScalingPlans.ScalingPlanFactory WithScalingPlan(string resourceName = null, Action<Humidifier.AutoScalingPlans.ScalingPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScalingPlans.ScalingPlanFactory(resourceName, resourceFactoryAction));
        ScalingPlanFactories.Add(factory);
        return factory;
    }

    public B2BI.CapabilityFactory WithCapability(string resourceName = null, Action<Humidifier.B2BI.Capability> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.CapabilityFactory(resourceName, resourceFactoryAction));
        CapabilityFactories.Add(factory);
        return factory;
    }

    public B2BI.PartnershipFactory WithPartnership(string resourceName = null, Action<Humidifier.B2BI.Partnership> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.PartnershipFactory(resourceName, resourceFactoryAction));
        PartnershipFactories.Add(factory);
        return factory;
    }

    public B2BI.ProfileFactory WithB2BIProfile(string resourceName = null, Action<Humidifier.B2BI.Profile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.ProfileFactory(resourceName, resourceFactoryAction));
        B2BIProfileFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.ProfileFactory WithRolesAnywhereProfile(string resourceName = null, Action<Humidifier.RolesAnywhere.Profile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.ProfileFactory(resourceName, resourceFactoryAction));
        RolesAnywhereProfileFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileFactory WithRoute53ProfilesProfile(string resourceName = null, Action<Humidifier.Route53Profiles.Profile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileFactory(resourceName, resourceFactoryAction));
        Route53ProfilesProfileFactories.Add(factory);
        return factory;
    }

    public Transfer.ProfileFactory WithTransferProfile(string resourceName = null, Action<Humidifier.Transfer.Profile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ProfileFactory(resourceName, resourceFactoryAction));
        TransferProfileFactories.Add(factory);
        return factory;
    }

    public B2BI.TransformerFactory WithTransformer(string resourceName = null, Action<Humidifier.B2BI.Transformer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.TransformerFactory(resourceName, resourceFactoryAction));
        TransformerFactories.Add(factory);
        return factory;
    }

    public BCMDataExports.ExportFactory WithExport(string resourceName = null, Action<Humidifier.BCMDataExports.Export> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BCMDataExports.ExportFactory(resourceName, resourceFactoryAction));
        ExportFactories.Add(factory);
        return factory;
    }

    public Backup.BackupPlanFactory WithBackupPlan(string resourceName = null, Action<Humidifier.Backup.BackupPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupPlanFactory(resourceName, resourceFactoryAction));
        BackupPlanFactories.Add(factory);
        return factory;
    }

    public Backup.BackupSelectionFactory WithBackupSelection(string resourceName = null, Action<Humidifier.Backup.BackupSelection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupSelectionFactory(resourceName, resourceFactoryAction));
        BackupSelectionFactories.Add(factory);
        return factory;
    }

    public Backup.BackupVaultFactory WithBackupVault(string resourceName = null, Action<Humidifier.Backup.BackupVault> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupVaultFactory(resourceName, resourceFactoryAction));
        BackupVaultFactories.Add(factory);
        return factory;
    }

    public Backup.FrameworkFactory WithFramework(string resourceName = null, Action<Humidifier.Backup.Framework> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.FrameworkFactory(resourceName, resourceFactoryAction));
        FrameworkFactories.Add(factory);
        return factory;
    }

    public Backup.ReportPlanFactory WithReportPlan(string resourceName = null, Action<Humidifier.Backup.ReportPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.ReportPlanFactory(resourceName, resourceFactoryAction));
        ReportPlanFactories.Add(factory);
        return factory;
    }

    public Backup.RestoreTestingPlanFactory WithRestoreTestingPlan(string resourceName = null, Action<Humidifier.Backup.RestoreTestingPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.RestoreTestingPlanFactory(resourceName, resourceFactoryAction));
        RestoreTestingPlanFactories.Add(factory);
        return factory;
    }

    public Backup.RestoreTestingSelectionFactory WithRestoreTestingSelection(string resourceName = null, Action<Humidifier.Backup.RestoreTestingSelection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.RestoreTestingSelectionFactory(resourceName, resourceFactoryAction));
        RestoreTestingSelectionFactories.Add(factory);
        return factory;
    }

    public BackupGateway.HypervisorFactory WithHypervisor(string resourceName = null, Action<Humidifier.BackupGateway.Hypervisor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BackupGateway.HypervisorFactory(resourceName, resourceFactoryAction));
        HypervisorFactories.Add(factory);
        return factory;
    }

    public Batch.ComputeEnvironmentFactory WithComputeEnvironment(string resourceName = null, Action<Humidifier.Batch.ComputeEnvironment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.ComputeEnvironmentFactory(resourceName, resourceFactoryAction));
        ComputeEnvironmentFactories.Add(factory);
        return factory;
    }

    public Batch.JobDefinitionFactory WithJobDefinition(string resourceName = null, Action<Humidifier.Batch.JobDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.JobDefinitionFactory(resourceName, resourceFactoryAction));
        JobDefinitionFactories.Add(factory);
        return factory;
    }

    public Batch.JobQueueFactory WithJobQueue(string resourceName = null, Action<Humidifier.Batch.JobQueue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.JobQueueFactory(resourceName, resourceFactoryAction));
        JobQueueFactories.Add(factory);
        return factory;
    }

    public Batch.SchedulingPolicyFactory WithSchedulingPolicy(string resourceName = null, Action<Humidifier.Batch.SchedulingPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.SchedulingPolicyFactory(resourceName, resourceFactoryAction));
        SchedulingPolicyFactories.Add(factory);
        return factory;
    }

    public Bedrock.AgentFactory WithBedrockAgent(string resourceName = null, Action<Humidifier.Bedrock.Agent> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.AgentFactory(resourceName, resourceFactoryAction));
        BedrockAgentFactories.Add(factory);
        return factory;
    }

    public DataSync.AgentFactory WithDataSyncAgent(string resourceName = null, Action<Humidifier.DataSync.Agent> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.AgentFactory(resourceName, resourceFactoryAction));
        DataSyncAgentFactories.Add(factory);
        return factory;
    }

    public Bedrock.AgentAliasFactory WithAgentAlias(string resourceName = null, Action<Humidifier.Bedrock.AgentAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.AgentAliasFactory(resourceName, resourceFactoryAction));
        AgentAliasFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowAliasFactory WithFlowAlias(string resourceName = null, Action<Humidifier.Bedrock.FlowAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowAliasFactory(resourceName, resourceFactoryAction));
        FlowAliasFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowVersionFactory WithFlowVersion(string resourceName = null, Action<Humidifier.Bedrock.FlowVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowVersionFactory(resourceName, resourceFactoryAction));
        FlowVersionFactories.Add(factory);
        return factory;
    }

    public Bedrock.GuardrailFactory WithGuardrail(string resourceName = null, Action<Humidifier.Bedrock.Guardrail> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.GuardrailFactory(resourceName, resourceFactoryAction));
        GuardrailFactories.Add(factory);
        return factory;
    }

    public Bedrock.GuardrailVersionFactory WithGuardrailVersion(string resourceName = null, Action<Humidifier.Bedrock.GuardrailVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.GuardrailVersionFactory(resourceName, resourceFactoryAction));
        GuardrailVersionFactories.Add(factory);
        return factory;
    }

    public Bedrock.KnowledgeBaseFactory WithBedrockKnowledgeBase(string resourceName = null, Action<Humidifier.Bedrock.KnowledgeBase> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.KnowledgeBaseFactory(resourceName, resourceFactoryAction));
        BedrockKnowledgeBaseFactories.Add(factory);
        return factory;
    }

    public Wisdom.KnowledgeBaseFactory WithWisdomKnowledgeBase(string resourceName = null, Action<Humidifier.Wisdom.KnowledgeBase> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.KnowledgeBaseFactory(resourceName, resourceFactoryAction));
        WisdomKnowledgeBaseFactories.Add(factory);
        return factory;
    }

    public Bedrock.PromptFactory WithBedrockPrompt(string resourceName = null, Action<Humidifier.Bedrock.Prompt> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.PromptFactory(resourceName, resourceFactoryAction));
        BedrockPromptFactories.Add(factory);
        return factory;
    }

    public Connect.PromptFactory WithConnectPrompt(string resourceName = null, Action<Humidifier.Connect.Prompt> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PromptFactory(resourceName, resourceFactoryAction));
        ConnectPromptFactories.Add(factory);
        return factory;
    }

    public Bedrock.PromptVersionFactory WithPromptVersion(string resourceName = null, Action<Humidifier.Bedrock.PromptVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.PromptVersionFactory(resourceName, resourceFactoryAction));
        PromptVersionFactories.Add(factory);
        return factory;
    }

    public BillingConductor.BillingGroupFactory WithBillingConductorBillingGroup(string resourceName = null, Action<Humidifier.BillingConductor.BillingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.BillingGroupFactory(resourceName, resourceFactoryAction));
        BillingConductorBillingGroupFactories.Add(factory);
        return factory;
    }

    public IoT.BillingGroupFactory WithIoTBillingGroup(string resourceName = null, Action<Humidifier.IoT.BillingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.BillingGroupFactory(resourceName, resourceFactoryAction));
        IoTBillingGroupFactories.Add(factory);
        return factory;
    }

    public BillingConductor.CustomLineItemFactory WithCustomLineItem(string resourceName = null, Action<Humidifier.BillingConductor.CustomLineItem> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.CustomLineItemFactory(resourceName, resourceFactoryAction));
        CustomLineItemFactories.Add(factory);
        return factory;
    }

    public BillingConductor.PricingPlanFactory WithPricingPlan(string resourceName = null, Action<Humidifier.BillingConductor.PricingPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.PricingPlanFactory(resourceName, resourceFactoryAction));
        PricingPlanFactories.Add(factory);
        return factory;
    }

    public BillingConductor.PricingRuleFactory WithPricingRule(string resourceName = null, Action<Humidifier.BillingConductor.PricingRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.PricingRuleFactory(resourceName, resourceFactoryAction));
        PricingRuleFactories.Add(factory);
        return factory;
    }

    public Budgets.BudgetFactory WithBudget(string resourceName = null, Action<Humidifier.Budgets.Budget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Budgets.BudgetFactory(resourceName, resourceFactoryAction));
        BudgetFactories.Add(factory);
        return factory;
    }

    public Budgets.BudgetsActionFactory WithBudgetsAction(string resourceName = null, Action<Humidifier.Budgets.BudgetsAction> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Budgets.BudgetsActionFactory(resourceName, resourceFactoryAction));
        BudgetsActionFactories.Add(factory);
        return factory;
    }

    public CE.AnomalyMonitorFactory WithAnomalyMonitor(string resourceName = null, Action<Humidifier.CE.AnomalyMonitor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CE.AnomalyMonitorFactory(resourceName, resourceFactoryAction));
        AnomalyMonitorFactories.Add(factory);
        return factory;
    }

    public CE.AnomalySubscriptionFactory WithAnomalySubscription(string resourceName = null, Action<Humidifier.CE.AnomalySubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CE.AnomalySubscriptionFactory(resourceName, resourceFactoryAction));
        AnomalySubscriptionFactories.Add(factory);
        return factory;
    }

    public CE.CostCategoryFactory WithCostCategory(string resourceName = null, Action<Humidifier.CE.CostCategory> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CE.CostCategoryFactory(resourceName, resourceFactoryAction));
        CostCategoryFactories.Add(factory);
        return factory;
    }

    public CUR.ReportDefinitionFactory WithReportDefinition(string resourceName = null, Action<Humidifier.CUR.ReportDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CUR.ReportDefinitionFactory(resourceName, resourceFactoryAction));
        ReportDefinitionFactories.Add(factory);
        return factory;
    }

    public Cassandra.KeyspaceFactory WithKeyspace(string resourceName = null, Action<Humidifier.Cassandra.Keyspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cassandra.KeyspaceFactory(resourceName, resourceFactoryAction));
        KeyspaceFactories.Add(factory);
        return factory;
    }

    public Cassandra.TableFactory WithCassandraTable(string resourceName = null, Action<Humidifier.Cassandra.Table> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cassandra.TableFactory(resourceName, resourceFactoryAction));
        CassandraTableFactories.Add(factory);
        return factory;
    }

    public DynamoDB.TableFactory WithDynamoDBTable(string resourceName = null, Action<Humidifier.DynamoDB.Table> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DynamoDB.TableFactory(resourceName, resourceFactoryAction));
        DynamoDBTableFactories.Add(factory);
        return factory;
    }

    public Glue.TableFactory WithGlueTable(string resourceName = null, Action<Humidifier.Glue.Table> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TableFactory(resourceName, resourceFactoryAction));
        GlueTableFactories.Add(factory);
        return factory;
    }

    public Timestream.TableFactory WithTimestreamTable(string resourceName = null, Action<Humidifier.Timestream.Table> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.TableFactory(resourceName, resourceFactoryAction));
        TimestreamTableFactories.Add(factory);
        return factory;
    }

    public Chatbot.MicrosoftTeamsChannelConfigurationFactory WithMicrosoftTeamsChannelConfiguration(string resourceName = null, Action<Humidifier.Chatbot.MicrosoftTeamsChannelConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Chatbot.MicrosoftTeamsChannelConfigurationFactory(resourceName, resourceFactoryAction));
        MicrosoftTeamsChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public Chatbot.SlackChannelConfigurationFactory WithChatbotSlackChannelConfiguration(string resourceName = null, Action<Humidifier.Chatbot.SlackChannelConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Chatbot.SlackChannelConfigurationFactory(resourceName, resourceFactoryAction));
        ChatbotSlackChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public SupportApp.SlackChannelConfigurationFactory WithSupportAppSlackChannelConfiguration(string resourceName = null, Action<Humidifier.SupportApp.SlackChannelConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.SlackChannelConfigurationFactory(resourceName, resourceFactoryAction));
        SupportAppSlackChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.AnalysisTemplateFactory WithAnalysisTemplate(string resourceName = null, Action<Humidifier.CleanRooms.AnalysisTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.AnalysisTemplateFactory(resourceName, resourceFactoryAction));
        AnalysisTemplateFactories.Add(factory);
        return factory;
    }

    public CleanRooms.CollaborationFactory WithCollaboration(string resourceName = null, Action<Humidifier.CleanRooms.Collaboration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.CollaborationFactory(resourceName, resourceFactoryAction));
        CollaborationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.ConfiguredTableFactory WithConfiguredTable(string resourceName = null, Action<Humidifier.CleanRooms.ConfiguredTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.ConfiguredTableFactory(resourceName, resourceFactoryAction));
        ConfiguredTableFactories.Add(factory);
        return factory;
    }

    public CleanRooms.ConfiguredTableAssociationFactory WithConfiguredTableAssociation(string resourceName = null, Action<Humidifier.CleanRooms.ConfiguredTableAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.ConfiguredTableAssociationFactory(resourceName, resourceFactoryAction));
        ConfiguredTableAssociationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.IdMappingTableFactory WithIdMappingTable(string resourceName = null, Action<Humidifier.CleanRooms.IdMappingTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.IdMappingTableFactory(resourceName, resourceFactoryAction));
        IdMappingTableFactories.Add(factory);
        return factory;
    }

    public CleanRooms.IdNamespaceAssociationFactory WithIdNamespaceAssociation(string resourceName = null, Action<Humidifier.CleanRooms.IdNamespaceAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.IdNamespaceAssociationFactory(resourceName, resourceFactoryAction));
        IdNamespaceAssociationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.MembershipFactory WithMembership(string resourceName = null, Action<Humidifier.CleanRooms.Membership> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.MembershipFactory(resourceName, resourceFactoryAction));
        MembershipFactories.Add(factory);
        return factory;
    }

    public CleanRooms.PrivacyBudgetTemplateFactory WithPrivacyBudgetTemplate(string resourceName = null, Action<Humidifier.CleanRooms.PrivacyBudgetTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.PrivacyBudgetTemplateFactory(resourceName, resourceFactoryAction));
        PrivacyBudgetTemplateFactories.Add(factory);
        return factory;
    }

    public CleanRoomsML.TrainingDatasetFactory WithTrainingDataset(string resourceName = null, Action<Humidifier.CleanRoomsML.TrainingDataset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRoomsML.TrainingDatasetFactory(resourceName, resourceFactoryAction));
        TrainingDatasetFactories.Add(factory);
        return factory;
    }

    public Cloud9.EnvironmentEC2Factory WithEnvironmentEC2(string resourceName = null, Action<Humidifier.Cloud9.EnvironmentEC2> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cloud9.EnvironmentEC2Factory(resourceName, resourceFactoryAction));
        EnvironmentEC2Factories.Add(factory);
        return factory;
    }

    public CloudFormation.CustomResourceFactory WithCustomResource(string resourceName = null, Action<Humidifier.CloudFormation.CustomResource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.CustomResourceFactory(resourceName, resourceFactoryAction));
        CustomResourceFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookDefaultVersionFactory WithHookDefaultVersion(string resourceName = null, Action<Humidifier.CloudFormation.HookDefaultVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookDefaultVersionFactory(resourceName, resourceFactoryAction));
        HookDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookTypeConfigFactory WithHookTypeConfig(string resourceName = null, Action<Humidifier.CloudFormation.HookTypeConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookTypeConfigFactory(resourceName, resourceFactoryAction));
        HookTypeConfigFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookVersionFactory WithHookVersion(string resourceName = null, Action<Humidifier.CloudFormation.HookVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookVersionFactory(resourceName, resourceFactoryAction));
        HookVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.MacroFactory WithMacro(string resourceName = null, Action<Humidifier.CloudFormation.Macro> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.MacroFactory(resourceName, resourceFactoryAction));
        MacroFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ModuleDefaultVersionFactory WithModuleDefaultVersion(string resourceName = null, Action<Humidifier.CloudFormation.ModuleDefaultVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ModuleDefaultVersionFactory(resourceName, resourceFactoryAction));
        ModuleDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ModuleVersionFactory WithModuleVersion(string resourceName = null, Action<Humidifier.CloudFormation.ModuleVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ModuleVersionFactory(resourceName, resourceFactoryAction));
        ModuleVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.PublicTypeVersionFactory WithPublicTypeVersion(string resourceName = null, Action<Humidifier.CloudFormation.PublicTypeVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.PublicTypeVersionFactory(resourceName, resourceFactoryAction));
        PublicTypeVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.PublisherFactory WithPublisher(string resourceName = null, Action<Humidifier.CloudFormation.Publisher> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.PublisherFactory(resourceName, resourceFactoryAction));
        PublisherFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ResourceDefaultVersionFactory WithResourceDefaultVersion(string resourceName = null, Action<Humidifier.CloudFormation.ResourceDefaultVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ResourceDefaultVersionFactory(resourceName, resourceFactoryAction));
        ResourceDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ResourceVersionFactory WithResourceVersion(string resourceName = null, Action<Humidifier.CloudFormation.ResourceVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ResourceVersionFactory(resourceName, resourceFactoryAction));
        ResourceVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.StackSetFactory WithStackSet(string resourceName = null, Action<Humidifier.CloudFormation.StackSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.StackSetFactory(resourceName, resourceFactoryAction));
        StackSetFactories.Add(factory);
        return factory;
    }

    public CloudFormation.TypeActivationFactory WithTypeActivation(string resourceName = null, Action<Humidifier.CloudFormation.TypeActivation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.TypeActivationFactory(resourceName, resourceFactoryAction));
        TypeActivationFactories.Add(factory);
        return factory;
    }

    public CloudFormation.WaitConditionFactory WithWaitCondition(string resourceName = null, Action<Humidifier.CloudFormation.WaitCondition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.WaitConditionFactory(resourceName, resourceFactoryAction));
        WaitConditionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.WaitConditionHandleFactory WithWaitConditionHandle(string resourceName = null, Action<Humidifier.CloudFormation.WaitConditionHandle> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.WaitConditionHandleFactory(resourceName, resourceFactoryAction));
        WaitConditionHandleFactories.Add(factory);
        return factory;
    }

    public CloudFront.CachePolicyFactory WithCachePolicy(string resourceName = null, Action<Humidifier.CloudFront.CachePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.CachePolicyFactory(resourceName, resourceFactoryAction));
        CachePolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.CloudFrontOriginAccessIdentityFactory WithCloudFrontOriginAccessIdentity(string resourceName = null, Action<Humidifier.CloudFront.CloudFrontOriginAccessIdentity> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.CloudFrontOriginAccessIdentityFactory(resourceName, resourceFactoryAction));
        CloudFrontOriginAccessIdentityFactories.Add(factory);
        return factory;
    }

    public CloudFront.ContinuousDeploymentPolicyFactory WithContinuousDeploymentPolicy(string resourceName = null, Action<Humidifier.CloudFront.ContinuousDeploymentPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.ContinuousDeploymentPolicyFactory(resourceName, resourceFactoryAction));
        ContinuousDeploymentPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.DistributionFactory WithCloudFrontDistribution(string resourceName = null, Action<Humidifier.CloudFront.Distribution> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.DistributionFactory(resourceName, resourceFactoryAction));
        CloudFrontDistributionFactories.Add(factory);
        return factory;
    }

    public Lightsail.DistributionFactory WithLightsailDistribution(string resourceName = null, Action<Humidifier.Lightsail.Distribution> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DistributionFactory(resourceName, resourceFactoryAction));
        LightsailDistributionFactories.Add(factory);
        return factory;
    }

    public CloudFront.FunctionFactory WithCloudFrontFunction(string resourceName = null, Action<Humidifier.CloudFront.Function> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.FunctionFactory(resourceName, resourceFactoryAction));
        CloudFrontFunctionFactories.Add(factory);
        return factory;
    }

    public Lambda.FunctionFactory WithLambdaFunction(string resourceName = null, Action<Humidifier.Lambda.Function> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.FunctionFactory(resourceName, resourceFactoryAction));
        LambdaFunctionFactories.Add(factory);
        return factory;
    }

    public CloudFront.KeyGroupFactory WithKeyGroup(string resourceName = null, Action<Humidifier.CloudFront.KeyGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.KeyGroupFactory(resourceName, resourceFactoryAction));
        KeyGroupFactories.Add(factory);
        return factory;
    }

    public CloudFront.KeyValueStoreFactory WithKeyValueStore(string resourceName = null, Action<Humidifier.CloudFront.KeyValueStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.KeyValueStoreFactory(resourceName, resourceFactoryAction));
        KeyValueStoreFactories.Add(factory);
        return factory;
    }

    public CloudFront.MonitoringSubscriptionFactory WithMonitoringSubscription(string resourceName = null, Action<Humidifier.CloudFront.MonitoringSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.MonitoringSubscriptionFactory(resourceName, resourceFactoryAction));
        MonitoringSubscriptionFactories.Add(factory);
        return factory;
    }

    public CloudFront.OriginAccessControlFactory WithOriginAccessControl(string resourceName = null, Action<Humidifier.CloudFront.OriginAccessControl> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.OriginAccessControlFactory(resourceName, resourceFactoryAction));
        OriginAccessControlFactories.Add(factory);
        return factory;
    }

    public CloudFront.OriginRequestPolicyFactory WithOriginRequestPolicy(string resourceName = null, Action<Humidifier.CloudFront.OriginRequestPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.OriginRequestPolicyFactory(resourceName, resourceFactoryAction));
        OriginRequestPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.PublicKeyFactory WithCloudFrontPublicKey(string resourceName = null, Action<Humidifier.CloudFront.PublicKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.PublicKeyFactory(resourceName, resourceFactoryAction));
        CloudFrontPublicKeyFactories.Add(factory);
        return factory;
    }

    public IVS.PublicKeyFactory WithIVSPublicKey(string resourceName = null, Action<Humidifier.IVS.PublicKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PublicKeyFactory(resourceName, resourceFactoryAction));
        IVSPublicKeyFactories.Add(factory);
        return factory;
    }

    public CloudFront.RealtimeLogConfigFactory WithRealtimeLogConfig(string resourceName = null, Action<Humidifier.CloudFront.RealtimeLogConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.RealtimeLogConfigFactory(resourceName, resourceFactoryAction));
        RealtimeLogConfigFactories.Add(factory);
        return factory;
    }

    public CloudFront.ResponseHeadersPolicyFactory WithResponseHeadersPolicy(string resourceName = null, Action<Humidifier.CloudFront.ResponseHeadersPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.ResponseHeadersPolicyFactory(resourceName, resourceFactoryAction));
        ResponseHeadersPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.StreamingDistributionFactory WithStreamingDistribution(string resourceName = null, Action<Humidifier.CloudFront.StreamingDistribution> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.StreamingDistributionFactory(resourceName, resourceFactoryAction));
        StreamingDistributionFactories.Add(factory);
        return factory;
    }

    public CloudTrail.ChannelFactory WithCloudTrailChannel(string resourceName = null, Action<Humidifier.CloudTrail.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.ChannelFactory(resourceName, resourceFactoryAction));
        CloudTrailChannelFactories.Add(factory);
        return factory;
    }

    public IVS.ChannelFactory WithIVSChannel(string resourceName = null, Action<Humidifier.IVS.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.ChannelFactory(resourceName, resourceFactoryAction));
        IVSChannelFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.ChannelFactory WithIoTAnalyticsChannel(string resourceName = null, Action<Humidifier.IoTAnalytics.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.ChannelFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsChannelFactories.Add(factory);
        return factory;
    }

    public MediaLive.ChannelFactory WithMediaLiveChannel(string resourceName = null, Action<Humidifier.MediaLive.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ChannelFactory(resourceName, resourceFactoryAction));
        MediaLiveChannelFactories.Add(factory);
        return factory;
    }

    public MediaPackage.ChannelFactory WithMediaPackageChannel(string resourceName = null, Action<Humidifier.MediaPackage.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.ChannelFactory(resourceName, resourceFactoryAction));
        MediaPackageChannelFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelFactory WithMediaPackageV2Channel(string resourceName = null, Action<Humidifier.MediaPackageV2.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelFactory(resourceName, resourceFactoryAction));
        MediaPackageV2ChannelFactories.Add(factory);
        return factory;
    }

    public MediaTailor.ChannelFactory WithMediaTailorChannel(string resourceName = null, Action<Humidifier.MediaTailor.Channel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.ChannelFactory(resourceName, resourceFactoryAction));
        MediaTailorChannelFactories.Add(factory);
        return factory;
    }

    public CloudTrail.EventDataStoreFactory WithEventDataStore(string resourceName = null, Action<Humidifier.CloudTrail.EventDataStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.EventDataStoreFactory(resourceName, resourceFactoryAction));
        EventDataStoreFactories.Add(factory);
        return factory;
    }

    public CloudTrail.ResourcePolicyFactory WithCloudTrailResourcePolicy(string resourceName = null, Action<Humidifier.CloudTrail.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        CloudTrailResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Lex.ResourcePolicyFactory WithLexResourcePolicy(string resourceName = null, Action<Humidifier.Lex.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        LexResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Logs.ResourcePolicyFactory WithLogsResourcePolicy(string resourceName = null, Action<Humidifier.Logs.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        LogsResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Organizations.ResourcePolicyFactory WithOrganizationsResourcePolicy(string resourceName = null, Action<Humidifier.Organizations.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        OrganizationsResourcePolicyFactories.Add(factory);
        return factory;
    }

    public SSM.ResourcePolicyFactory WithSSMResourcePolicy(string resourceName = null, Action<Humidifier.SSM.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        SSMResourcePolicyFactories.Add(factory);
        return factory;
    }

    public SecretsManager.ResourcePolicyFactory WithSecretsManagerResourcePolicy(string resourceName = null, Action<Humidifier.SecretsManager.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        SecretsManagerResourcePolicyFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ResourcePolicyFactory WithVpcLatticeResourcePolicy(string resourceName = null, Action<Humidifier.VpcLattice.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        VpcLatticeResourcePolicyFactories.Add(factory);
        return factory;
    }

    public XRay.ResourcePolicyFactory WithXRayResourcePolicy(string resourceName = null, Action<Humidifier.XRay.ResourcePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        XRayResourcePolicyFactories.Add(factory);
        return factory;
    }

    public CloudTrail.TrailFactory WithTrail(string resourceName = null, Action<Humidifier.CloudTrail.Trail> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.TrailFactory(resourceName, resourceFactoryAction));
        TrailFactories.Add(factory);
        return factory;
    }

    public CloudWatch.AlarmFactory WithCloudWatchAlarm(string resourceName = null, Action<Humidifier.CloudWatch.Alarm> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.AlarmFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmFactories.Add(factory);
        return factory;
    }

    public Lightsail.AlarmFactory WithLightsailAlarm(string resourceName = null, Action<Humidifier.Lightsail.Alarm> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.AlarmFactory(resourceName, resourceFactoryAction));
        LightsailAlarmFactories.Add(factory);
        return factory;
    }

    public CloudWatch.AnomalyDetectorFactory WithCloudWatchAnomalyDetector(string resourceName = null, Action<Humidifier.CloudWatch.AnomalyDetector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.AnomalyDetectorFactory(resourceName, resourceFactoryAction));
        CloudWatchAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public LookoutMetrics.AnomalyDetectorFactory WithLookoutMetricsAnomalyDetector(string resourceName = null, Action<Humidifier.LookoutMetrics.AnomalyDetector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutMetrics.AnomalyDetectorFactory(resourceName, resourceFactoryAction));
        LookoutMetricsAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public CloudWatch.CompositeAlarmFactory WithCompositeAlarm(string resourceName = null, Action<Humidifier.CloudWatch.CompositeAlarm> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.CompositeAlarmFactory(resourceName, resourceFactoryAction));
        CompositeAlarmFactories.Add(factory);
        return factory;
    }

    public CloudWatch.DashboardFactory WithCloudWatchDashboard(string resourceName = null, Action<Humidifier.CloudWatch.Dashboard> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.DashboardFactory(resourceName, resourceFactoryAction));
        CloudWatchDashboardFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.DashboardFactory WithIoTSiteWiseDashboard(string resourceName = null, Action<Humidifier.IoTSiteWise.Dashboard> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.DashboardFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseDashboardFactories.Add(factory);
        return factory;
    }

    public QuickSight.DashboardFactory WithQuickSightDashboard(string resourceName = null, Action<Humidifier.QuickSight.Dashboard> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DashboardFactory(resourceName, resourceFactoryAction));
        QuickSightDashboardFactories.Add(factory);
        return factory;
    }

    public CloudWatch.InsightRuleFactory WithInsightRule(string resourceName = null, Action<Humidifier.CloudWatch.InsightRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.InsightRuleFactory(resourceName, resourceFactoryAction));
        InsightRuleFactories.Add(factory);
        return factory;
    }

    public CloudWatch.MetricStreamFactory WithMetricStream(string resourceName = null, Action<Humidifier.CloudWatch.MetricStream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.MetricStreamFactory(resourceName, resourceFactoryAction));
        MetricStreamFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.PackageGroupFactory WithPackageGroup(string resourceName = null, Action<Humidifier.CodeArtifact.PackageGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.PackageGroupFactory(resourceName, resourceFactoryAction));
        PackageGroupFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.RepositoryFactory WithCodeArtifactRepository(string resourceName = null, Action<Humidifier.CodeArtifact.Repository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.RepositoryFactory(resourceName, resourceFactoryAction));
        CodeArtifactRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeCommit.RepositoryFactory WithCodeCommitRepository(string resourceName = null, Action<Humidifier.CodeCommit.Repository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeCommit.RepositoryFactory(resourceName, resourceFactoryAction));
        CodeCommitRepositoryFactories.Add(factory);
        return factory;
    }

    public ECR.RepositoryFactory WithECRRepository(string resourceName = null, Action<Humidifier.ECR.Repository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RepositoryFactory(resourceName, resourceFactoryAction));
        ECRRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeBuild.ProjectFactory WithCodeBuildProject(string resourceName = null, Action<Humidifier.CodeBuild.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.ProjectFactory(resourceName, resourceFactoryAction));
        CodeBuildProjectFactories.Add(factory);
        return factory;
    }

    public DataBrew.ProjectFactory WithDataBrewProject(string resourceName = null, Action<Humidifier.DataBrew.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.ProjectFactory(resourceName, resourceFactoryAction));
        DataBrewProjectFactories.Add(factory);
        return factory;
    }

    public DataZone.ProjectFactory WithDataZoneProject(string resourceName = null, Action<Humidifier.DataZone.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.ProjectFactory(resourceName, resourceFactoryAction));
        DataZoneProjectFactories.Add(factory);
        return factory;
    }

    public Evidently.ProjectFactory WithEvidentlyProject(string resourceName = null, Action<Humidifier.Evidently.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.ProjectFactory(resourceName, resourceFactoryAction));
        EvidentlyProjectFactories.Add(factory);
        return factory;
    }

    public IoT1Click.ProjectFactory WithIoT1ClickProject(string resourceName = null, Action<Humidifier.IoT1Click.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.ProjectFactory(resourceName, resourceFactoryAction));
        IoT1ClickProjectFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.ProjectFactory WithIoTSiteWiseProject(string resourceName = null, Action<Humidifier.IoTSiteWise.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.ProjectFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseProjectFactories.Add(factory);
        return factory;
    }

    public LookoutVision.ProjectFactory WithLookoutVisionProject(string resourceName = null, Action<Humidifier.LookoutVision.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutVision.ProjectFactory(resourceName, resourceFactoryAction));
        LookoutVisionProjectFactories.Add(factory);
        return factory;
    }

    public Rekognition.ProjectFactory WithRekognitionProject(string resourceName = null, Action<Humidifier.Rekognition.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.ProjectFactory(resourceName, resourceFactoryAction));
        RekognitionProjectFactories.Add(factory);
        return factory;
    }

    public SageMaker.ProjectFactory WithSageMakerProject(string resourceName = null, Action<Humidifier.SageMaker.Project> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ProjectFactory(resourceName, resourceFactoryAction));
        SageMakerProjectFactories.Add(factory);
        return factory;
    }

    public CodeBuild.ReportGroupFactory WithReportGroup(string resourceName = null, Action<Humidifier.CodeBuild.ReportGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.ReportGroupFactory(resourceName, resourceFactoryAction));
        ReportGroupFactories.Add(factory);
        return factory;
    }

    public CodeBuild.SourceCredentialFactory WithSourceCredential(string resourceName = null, Action<Humidifier.CodeBuild.SourceCredential> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.SourceCredentialFactory(resourceName, resourceFactoryAction));
        SourceCredentialFactories.Add(factory);
        return factory;
    }

    public CodeConnections.ConnectionFactory WithCodeConnectionsConnection(string resourceName = null, Action<Humidifier.CodeConnections.Connection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeConnections.ConnectionFactory(resourceName, resourceFactoryAction));
        CodeConnectionsConnectionFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.ConnectionFactory WithCodeStarConnectionsConnection(string resourceName = null, Action<Humidifier.CodeStarConnections.Connection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.ConnectionFactory(resourceName, resourceFactoryAction));
        CodeStarConnectionsConnectionFactories.Add(factory);
        return factory;
    }

    public Events.ConnectionFactory WithEventsConnection(string resourceName = null, Action<Humidifier.Events.Connection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ConnectionFactory(resourceName, resourceFactoryAction));
        EventsConnectionFactories.Add(factory);
        return factory;
    }

    public Glue.ConnectionFactory WithGlueConnection(string resourceName = null, Action<Humidifier.Glue.Connection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.ConnectionFactory(resourceName, resourceFactoryAction));
        GlueConnectionFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.DeploymentConfigFactory WithDeploymentConfig(string resourceName = null, Action<Humidifier.CodeDeploy.DeploymentConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.DeploymentConfigFactory(resourceName, resourceFactoryAction));
        DeploymentConfigFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.DeploymentGroupFactory WithDeploymentGroup(string resourceName = null, Action<Humidifier.CodeDeploy.DeploymentGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.DeploymentGroupFactory(resourceName, resourceFactoryAction));
        DeploymentGroupFactories.Add(factory);
        return factory;
    }

    public CodeGuruProfiler.ProfilingGroupFactory WithProfilingGroup(string resourceName = null, Action<Humidifier.CodeGuruProfiler.ProfilingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeGuruProfiler.ProfilingGroupFactory(resourceName, resourceFactoryAction));
        ProfilingGroupFactories.Add(factory);
        return factory;
    }

    public CodeGuruReviewer.RepositoryAssociationFactory WithRepositoryAssociation(string resourceName = null, Action<Humidifier.CodeGuruReviewer.RepositoryAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeGuruReviewer.RepositoryAssociationFactory(resourceName, resourceFactoryAction));
        RepositoryAssociationFactories.Add(factory);
        return factory;
    }

    public CodePipeline.CustomActionTypeFactory WithCustomActionType(string resourceName = null, Action<Humidifier.CodePipeline.CustomActionType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.CustomActionTypeFactory(resourceName, resourceFactoryAction));
        CustomActionTypeFactories.Add(factory);
        return factory;
    }

    public CodePipeline.PipelineFactory WithCodePipelinePipeline(string resourceName = null, Action<Humidifier.CodePipeline.Pipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.PipelineFactory(resourceName, resourceFactoryAction));
        CodePipelinePipelineFactories.Add(factory);
        return factory;
    }

    public DataPipeline.PipelineFactory WithDataPipelinePipeline(string resourceName = null, Action<Humidifier.DataPipeline.Pipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataPipeline.PipelineFactory(resourceName, resourceFactoryAction));
        DataPipelinePipelineFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.PipelineFactory WithIoTAnalyticsPipeline(string resourceName = null, Action<Humidifier.IoTAnalytics.Pipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.PipelineFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsPipelineFactories.Add(factory);
        return factory;
    }

    public OSIS.PipelineFactory WithOSISPipeline(string resourceName = null, Action<Humidifier.OSIS.Pipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OSIS.PipelineFactory(resourceName, resourceFactoryAction));
        OSISPipelineFactories.Add(factory);
        return factory;
    }

    public SageMaker.PipelineFactory WithSageMakerPipeline(string resourceName = null, Action<Humidifier.SageMaker.Pipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.PipelineFactory(resourceName, resourceFactoryAction));
        SageMakerPipelineFactories.Add(factory);
        return factory;
    }

    public CodePipeline.WebhookFactory WithWebhook(string resourceName = null, Action<Humidifier.CodePipeline.Webhook> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.WebhookFactory(resourceName, resourceFactoryAction));
        WebhookFactories.Add(factory);
        return factory;
    }

    public CodeStar.GitHubRepositoryFactory WithGitHubRepository(string resourceName = null, Action<Humidifier.CodeStar.GitHubRepository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStar.GitHubRepositoryFactory(resourceName, resourceFactoryAction));
        GitHubRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.RepositoryLinkFactory WithRepositoryLink(string resourceName = null, Action<Humidifier.CodeStarConnections.RepositoryLink> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.RepositoryLinkFactory(resourceName, resourceFactoryAction));
        RepositoryLinkFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.SyncConfigurationFactory WithSyncConfiguration(string resourceName = null, Action<Humidifier.CodeStarConnections.SyncConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.SyncConfigurationFactory(resourceName, resourceFactoryAction));
        SyncConfigurationFactories.Add(factory);
        return factory;
    }

    public CodeStarNotifications.NotificationRuleFactory WithNotificationRule(string resourceName = null, Action<Humidifier.CodeStarNotifications.NotificationRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarNotifications.NotificationRuleFactory(resourceName, resourceFactoryAction));
        NotificationRuleFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolFactory WithIdentityPool(string resourceName = null, Action<Humidifier.Cognito.IdentityPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolFactory(resourceName, resourceFactoryAction));
        IdentityPoolFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolPrincipalTagFactory WithIdentityPoolPrincipalTag(string resourceName = null, Action<Humidifier.Cognito.IdentityPoolPrincipalTag> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolPrincipalTagFactory(resourceName, resourceFactoryAction));
        IdentityPoolPrincipalTagFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolRoleAttachmentFactory WithIdentityPoolRoleAttachment(string resourceName = null, Action<Humidifier.Cognito.IdentityPoolRoleAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolRoleAttachmentFactory(resourceName, resourceFactoryAction));
        IdentityPoolRoleAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.LogDeliveryConfigurationFactory WithLogDeliveryConfiguration(string resourceName = null, Action<Humidifier.Cognito.LogDeliveryConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.LogDeliveryConfigurationFactory(resourceName, resourceFactoryAction));
        LogDeliveryConfigurationFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolFactory WithUserPool(string resourceName = null, Action<Humidifier.Cognito.UserPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolFactory(resourceName, resourceFactoryAction));
        UserPoolFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolClientFactory WithUserPoolClient(string resourceName = null, Action<Humidifier.Cognito.UserPoolClient> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolClientFactory(resourceName, resourceFactoryAction));
        UserPoolClientFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolDomainFactory WithUserPoolDomain(string resourceName = null, Action<Humidifier.Cognito.UserPoolDomain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolDomainFactory(resourceName, resourceFactoryAction));
        UserPoolDomainFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolGroupFactory WithUserPoolGroup(string resourceName = null, Action<Humidifier.Cognito.UserPoolGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolGroupFactory(resourceName, resourceFactoryAction));
        UserPoolGroupFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolIdentityProviderFactory WithUserPoolIdentityProvider(string resourceName = null, Action<Humidifier.Cognito.UserPoolIdentityProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolIdentityProviderFactory(resourceName, resourceFactoryAction));
        UserPoolIdentityProviderFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolResourceServerFactory WithUserPoolResourceServer(string resourceName = null, Action<Humidifier.Cognito.UserPoolResourceServer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolResourceServerFactory(resourceName, resourceFactoryAction));
        UserPoolResourceServerFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolRiskConfigurationAttachmentFactory WithUserPoolRiskConfigurationAttachment(string resourceName = null, Action<Humidifier.Cognito.UserPoolRiskConfigurationAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolRiskConfigurationAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolRiskConfigurationAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUICustomizationAttachmentFactory WithUserPoolUICustomizationAttachment(string resourceName = null, Action<Humidifier.Cognito.UserPoolUICustomizationAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUICustomizationAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolUICustomizationAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUserFactory WithUserPoolUser(string resourceName = null, Action<Humidifier.Cognito.UserPoolUser> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUserFactory(resourceName, resourceFactoryAction));
        UserPoolUserFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUserToGroupAttachmentFactory WithUserPoolUserToGroupAttachment(string resourceName = null, Action<Humidifier.Cognito.UserPoolUserToGroupAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUserToGroupAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolUserToGroupAttachmentFactories.Add(factory);
        return factory;
    }

    public Comprehend.DocumentClassifierFactory WithDocumentClassifier(string resourceName = null, Action<Humidifier.Comprehend.DocumentClassifier> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Comprehend.DocumentClassifierFactory(resourceName, resourceFactoryAction));
        DocumentClassifierFactories.Add(factory);
        return factory;
    }

    public Comprehend.FlywheelFactory WithFlywheel(string resourceName = null, Action<Humidifier.Comprehend.Flywheel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Comprehend.FlywheelFactory(resourceName, resourceFactoryAction));
        FlywheelFactories.Add(factory);
        return factory;
    }

    public Config.AggregationAuthorizationFactory WithAggregationAuthorization(string resourceName = null, Action<Humidifier.Config.AggregationAuthorization> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.AggregationAuthorizationFactory(resourceName, resourceFactoryAction));
        AggregationAuthorizationFactories.Add(factory);
        return factory;
    }

    public Config.ConfigRuleFactory WithConfigRule(string resourceName = null, Action<Humidifier.Config.ConfigRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigRuleFactory(resourceName, resourceFactoryAction));
        ConfigRuleFactories.Add(factory);
        return factory;
    }

    public Config.ConfigurationAggregatorFactory WithConfigurationAggregator(string resourceName = null, Action<Humidifier.Config.ConfigurationAggregator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigurationAggregatorFactory(resourceName, resourceFactoryAction));
        ConfigurationAggregatorFactories.Add(factory);
        return factory;
    }

    public Config.ConfigurationRecorderFactory WithConfigurationRecorder(string resourceName = null, Action<Humidifier.Config.ConfigurationRecorder> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigurationRecorderFactory(resourceName, resourceFactoryAction));
        ConfigurationRecorderFactories.Add(factory);
        return factory;
    }

    public Config.ConformancePackFactory WithConformancePack(string resourceName = null, Action<Humidifier.Config.ConformancePack> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConformancePackFactory(resourceName, resourceFactoryAction));
        ConformancePackFactories.Add(factory);
        return factory;
    }

    public Config.DeliveryChannelFactory WithDeliveryChannel(string resourceName = null, Action<Humidifier.Config.DeliveryChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.DeliveryChannelFactory(resourceName, resourceFactoryAction));
        DeliveryChannelFactories.Add(factory);
        return factory;
    }

    public Config.OrganizationConfigRuleFactory WithOrganizationConfigRule(string resourceName = null, Action<Humidifier.Config.OrganizationConfigRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.OrganizationConfigRuleFactory(resourceName, resourceFactoryAction));
        OrganizationConfigRuleFactories.Add(factory);
        return factory;
    }

    public Config.OrganizationConformancePackFactory WithOrganizationConformancePack(string resourceName = null, Action<Humidifier.Config.OrganizationConformancePack> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.OrganizationConformancePackFactory(resourceName, resourceFactoryAction));
        OrganizationConformancePackFactories.Add(factory);
        return factory;
    }

    public Config.RemediationConfigurationFactory WithRemediationConfiguration(string resourceName = null, Action<Humidifier.Config.RemediationConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.RemediationConfigurationFactory(resourceName, resourceFactoryAction));
        RemediationConfigurationFactories.Add(factory);
        return factory;
    }

    public Config.StoredQueryFactory WithStoredQuery(string resourceName = null, Action<Humidifier.Config.StoredQuery> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Config.StoredQueryFactory(resourceName, resourceFactoryAction));
        StoredQueryFactories.Add(factory);
        return factory;
    }

    public Connect.AgentStatusFactory WithAgentStatus(string resourceName = null, Action<Humidifier.Connect.AgentStatus> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.AgentStatusFactory(resourceName, resourceFactoryAction));
        AgentStatusFactories.Add(factory);
        return factory;
    }

    public Connect.ApprovedOriginFactory WithApprovedOrigin(string resourceName = null, Action<Humidifier.Connect.ApprovedOrigin> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ApprovedOriginFactory(resourceName, resourceFactoryAction));
        ApprovedOriginFactories.Add(factory);
        return factory;
    }

    public Connect.ContactFlowFactory WithContactFlow(string resourceName = null, Action<Humidifier.Connect.ContactFlow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ContactFlowFactory(resourceName, resourceFactoryAction));
        ContactFlowFactories.Add(factory);
        return factory;
    }

    public Connect.ContactFlowModuleFactory WithContactFlowModule(string resourceName = null, Action<Humidifier.Connect.ContactFlowModule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ContactFlowModuleFactory(resourceName, resourceFactoryAction));
        ContactFlowModuleFactories.Add(factory);
        return factory;
    }

    public Connect.EvaluationFormFactory WithEvaluationForm(string resourceName = null, Action<Humidifier.Connect.EvaluationForm> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.EvaluationFormFactory(resourceName, resourceFactoryAction));
        EvaluationFormFactories.Add(factory);
        return factory;
    }

    public Connect.HoursOfOperationFactory WithHoursOfOperation(string resourceName = null, Action<Humidifier.Connect.HoursOfOperation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.HoursOfOperationFactory(resourceName, resourceFactoryAction));
        HoursOfOperationFactories.Add(factory);
        return factory;
    }

    public Connect.InstanceFactory WithConnectInstance(string resourceName = null, Action<Humidifier.Connect.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.InstanceFactory(resourceName, resourceFactoryAction));
        ConnectInstanceFactories.Add(factory);
        return factory;
    }

    public EC2.InstanceFactory WithEC2Instance(string resourceName = null, Action<Humidifier.EC2.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InstanceFactory(resourceName, resourceFactoryAction));
        EC2InstanceFactories.Add(factory);
        return factory;
    }

    public Lightsail.InstanceFactory WithLightsailInstance(string resourceName = null, Action<Humidifier.Lightsail.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.InstanceFactory(resourceName, resourceFactoryAction));
        LightsailInstanceFactories.Add(factory);
        return factory;
    }

    public OpsWorks.InstanceFactory WithOpsWorksInstance(string resourceName = null, Action<Humidifier.OpsWorks.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.InstanceFactory(resourceName, resourceFactoryAction));
        OpsWorksInstanceFactories.Add(factory);
        return factory;
    }

    public SSO.InstanceFactory WithSSOInstance(string resourceName = null, Action<Humidifier.SSO.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.InstanceFactory(resourceName, resourceFactoryAction));
        SSOInstanceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.InstanceFactory WithServiceDiscoveryInstance(string resourceName = null, Action<Humidifier.ServiceDiscovery.Instance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.InstanceFactory(resourceName, resourceFactoryAction));
        ServiceDiscoveryInstanceFactories.Add(factory);
        return factory;
    }

    public Connect.InstanceStorageConfigFactory WithInstanceStorageConfig(string resourceName = null, Action<Humidifier.Connect.InstanceStorageConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.InstanceStorageConfigFactory(resourceName, resourceFactoryAction));
        InstanceStorageConfigFactories.Add(factory);
        return factory;
    }

    public Connect.IntegrationAssociationFactory WithIntegrationAssociation(string resourceName = null, Action<Humidifier.Connect.IntegrationAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.IntegrationAssociationFactory(resourceName, resourceFactoryAction));
        IntegrationAssociationFactories.Add(factory);
        return factory;
    }

    public Connect.PhoneNumberFactory WithPhoneNumber(string resourceName = null, Action<Humidifier.Connect.PhoneNumber> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PhoneNumberFactory(resourceName, resourceFactoryAction));
        PhoneNumberFactories.Add(factory);
        return factory;
    }

    public Connect.PredefinedAttributeFactory WithPredefinedAttribute(string resourceName = null, Action<Humidifier.Connect.PredefinedAttribute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PredefinedAttributeFactory(resourceName, resourceFactoryAction));
        PredefinedAttributeFactories.Add(factory);
        return factory;
    }

    public Connect.QueueFactory WithConnectQueue(string resourceName = null, Action<Humidifier.Connect.Queue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.QueueFactory(resourceName, resourceFactoryAction));
        ConnectQueueFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueFactory WithDeadlineQueue(string resourceName = null, Action<Humidifier.Deadline.Queue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueFactory(resourceName, resourceFactoryAction));
        DeadlineQueueFactories.Add(factory);
        return factory;
    }

    public MediaConvert.QueueFactory WithMediaConvertQueue(string resourceName = null, Action<Humidifier.MediaConvert.Queue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.QueueFactory(resourceName, resourceFactoryAction));
        MediaConvertQueueFactories.Add(factory);
        return factory;
    }

    public SQS.QueueFactory WithSQSQueue(string resourceName = null, Action<Humidifier.SQS.Queue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueueFactory(resourceName, resourceFactoryAction));
        SQSQueueFactories.Add(factory);
        return factory;
    }

    public Connect.QuickConnectFactory WithQuickConnect(string resourceName = null, Action<Humidifier.Connect.QuickConnect> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.QuickConnectFactory(resourceName, resourceFactoryAction));
        QuickConnectFactories.Add(factory);
        return factory;
    }

    public Connect.RoutingProfileFactory WithRoutingProfile(string resourceName = null, Action<Humidifier.Connect.RoutingProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.RoutingProfileFactory(resourceName, resourceFactoryAction));
        RoutingProfileFactories.Add(factory);
        return factory;
    }

    public Connect.RuleFactory WithConnectRule(string resourceName = null, Action<Humidifier.Connect.Rule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.RuleFactory(resourceName, resourceFactoryAction));
        ConnectRuleFactories.Add(factory);
        return factory;
    }

    public Events.RuleFactory WithEventsRule(string resourceName = null, Action<Humidifier.Events.Rule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.RuleFactory(resourceName, resourceFactoryAction));
        EventsRuleFactories.Add(factory);
        return factory;
    }

    public VpcLattice.RuleFactory WithVpcLatticeRule(string resourceName = null, Action<Humidifier.VpcLattice.Rule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.RuleFactory(resourceName, resourceFactoryAction));
        VpcLatticeRuleFactories.Add(factory);
        return factory;
    }

    public WAF.RuleFactory WithWAFRule(string resourceName = null, Action<Humidifier.WAF.Rule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.RuleFactory(resourceName, resourceFactoryAction));
        WAFRuleFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RuleFactory WithWAFRegionalRule(string resourceName = null, Action<Humidifier.WAFRegional.Rule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RuleFactory(resourceName, resourceFactoryAction));
        WAFRegionalRuleFactories.Add(factory);
        return factory;
    }

    public Connect.SecurityKeyFactory WithSecurityKey(string resourceName = null, Action<Humidifier.Connect.SecurityKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.SecurityKeyFactory(resourceName, resourceFactoryAction));
        SecurityKeyFactories.Add(factory);
        return factory;
    }

    public Connect.SecurityProfileFactory WithConnectSecurityProfile(string resourceName = null, Action<Humidifier.Connect.SecurityProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.SecurityProfileFactory(resourceName, resourceFactoryAction));
        ConnectSecurityProfileFactories.Add(factory);
        return factory;
    }

    public IoT.SecurityProfileFactory WithIoTSecurityProfile(string resourceName = null, Action<Humidifier.IoT.SecurityProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SecurityProfileFactory(resourceName, resourceFactoryAction));
        IoTSecurityProfileFactories.Add(factory);
        return factory;
    }

    public Connect.TaskTemplateFactory WithTaskTemplate(string resourceName = null, Action<Humidifier.Connect.TaskTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.TaskTemplateFactory(resourceName, resourceFactoryAction));
        TaskTemplateFactories.Add(factory);
        return factory;
    }

    public Connect.TrafficDistributionGroupFactory WithTrafficDistributionGroup(string resourceName = null, Action<Humidifier.Connect.TrafficDistributionGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.TrafficDistributionGroupFactory(resourceName, resourceFactoryAction));
        TrafficDistributionGroupFactories.Add(factory);
        return factory;
    }

    public Connect.UserHierarchyGroupFactory WithUserHierarchyGroup(string resourceName = null, Action<Humidifier.Connect.UserHierarchyGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserHierarchyGroupFactory(resourceName, resourceFactoryAction));
        UserHierarchyGroupFactories.Add(factory);
        return factory;
    }

    public Connect.UserHierarchyStructureFactory WithUserHierarchyStructure(string resourceName = null, Action<Humidifier.Connect.UserHierarchyStructure> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserHierarchyStructureFactory(resourceName, resourceFactoryAction));
        UserHierarchyStructureFactories.Add(factory);
        return factory;
    }

    public Connect.ViewFactory WithConnectView(string resourceName = null, Action<Humidifier.Connect.View> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ViewFactory(resourceName, resourceFactoryAction));
        ConnectViewFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.ViewFactory WithResourceExplorer2View(string resourceName = null, Action<Humidifier.ResourceExplorer2.View> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.ViewFactory(resourceName, resourceFactoryAction));
        ResourceExplorer2ViewFactories.Add(factory);
        return factory;
    }

    public Connect.ViewVersionFactory WithViewVersion(string resourceName = null, Action<Humidifier.Connect.ViewVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ViewVersionFactory(resourceName, resourceFactoryAction));
        ViewVersionFactories.Add(factory);
        return factory;
    }

    public ConnectCampaigns.CampaignFactory WithConnectCampaignsCampaign(string resourceName = null, Action<Humidifier.ConnectCampaigns.Campaign> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ConnectCampaigns.CampaignFactory(resourceName, resourceFactoryAction));
        ConnectCampaignsCampaignFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.CampaignFactory WithIoTFleetWiseCampaign(string resourceName = null, Action<Humidifier.IoTFleetWise.Campaign> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.CampaignFactory(resourceName, resourceFactoryAction));
        IoTFleetWiseCampaignFactories.Add(factory);
        return factory;
    }

    public Pinpoint.CampaignFactory WithPinpointCampaign(string resourceName = null, Action<Humidifier.Pinpoint.Campaign> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.CampaignFactory(resourceName, resourceFactoryAction));
        PinpointCampaignFactories.Add(factory);
        return factory;
    }

    public ControlTower.EnabledBaselineFactory WithEnabledBaseline(string resourceName = null, Action<Humidifier.ControlTower.EnabledBaseline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.EnabledBaselineFactory(resourceName, resourceFactoryAction));
        EnabledBaselineFactories.Add(factory);
        return factory;
    }

    public ControlTower.EnabledControlFactory WithEnabledControl(string resourceName = null, Action<Humidifier.ControlTower.EnabledControl> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.EnabledControlFactory(resourceName, resourceFactoryAction));
        EnabledControlFactories.Add(factory);
        return factory;
    }

    public ControlTower.LandingZoneFactory WithLandingZone(string resourceName = null, Action<Humidifier.ControlTower.LandingZone> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.LandingZoneFactory(resourceName, resourceFactoryAction));
        LandingZoneFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.CalculatedAttributeDefinitionFactory WithCalculatedAttributeDefinition(string resourceName = null, Action<Humidifier.CustomerProfiles.CalculatedAttributeDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.CalculatedAttributeDefinitionFactory(resourceName, resourceFactoryAction));
        CalculatedAttributeDefinitionFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.EventStreamFactory WithCustomerProfilesEventStream(string resourceName = null, Action<Humidifier.CustomerProfiles.EventStream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.EventStreamFactory(resourceName, resourceFactoryAction));
        CustomerProfilesEventStreamFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EventStreamFactory WithPinpointEventStream(string resourceName = null, Action<Humidifier.Pinpoint.EventStream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EventStreamFactory(resourceName, resourceFactoryAction));
        PinpointEventStreamFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.ObjectTypeFactory WithObjectType(string resourceName = null, Action<Humidifier.CustomerProfiles.ObjectType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.ObjectTypeFactory(resourceName, resourceFactoryAction));
        ObjectTypeFactories.Add(factory);
        return factory;
    }

    public DAX.ClusterFactory WithDAXCluster(string resourceName = null, Action<Humidifier.DAX.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.ClusterFactory(resourceName, resourceFactoryAction));
        DAXClusterFactories.Add(factory);
        return factory;
    }

    public DocDBElastic.ClusterFactory WithDocDBElasticCluster(string resourceName = null, Action<Humidifier.DocDBElastic.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDBElastic.ClusterFactory(resourceName, resourceFactoryAction));
        DocDBElasticClusterFactories.Add(factory);
        return factory;
    }

    public ECS.ClusterFactory WithECSCluster(string resourceName = null, Action<Humidifier.ECS.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ClusterFactory(resourceName, resourceFactoryAction));
        ECSClusterFactories.Add(factory);
        return factory;
    }

    public EKS.ClusterFactory WithEKSCluster(string resourceName = null, Action<Humidifier.EKS.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.ClusterFactory(resourceName, resourceFactoryAction));
        EKSClusterFactories.Add(factory);
        return factory;
    }

    public EMR.ClusterFactory WithEMRCluster(string resourceName = null, Action<Humidifier.EMR.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.ClusterFactory(resourceName, resourceFactoryAction));
        EMRClusterFactories.Add(factory);
        return factory;
    }

    public MSK.ClusterFactory WithMSKCluster(string resourceName = null, Action<Humidifier.MSK.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ClusterFactory(resourceName, resourceFactoryAction));
        MSKClusterFactories.Add(factory);
        return factory;
    }

    public MediaLive.ClusterFactory WithMediaLiveCluster(string resourceName = null, Action<Humidifier.MediaLive.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ClusterFactory(resourceName, resourceFactoryAction));
        MediaLiveClusterFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ClusterFactory WithMemoryDBCluster(string resourceName = null, Action<Humidifier.MemoryDB.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ClusterFactory(resourceName, resourceFactoryAction));
        MemoryDBClusterFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterFactory WithRedshiftCluster(string resourceName = null, Action<Humidifier.Redshift.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterFactory(resourceName, resourceFactoryAction));
        RedshiftClusterFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.ClusterFactory WithRoute53RecoveryControlCluster(string resourceName = null, Action<Humidifier.Route53RecoveryControl.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.ClusterFactory(resourceName, resourceFactoryAction));
        Route53RecoveryControlClusterFactories.Add(factory);
        return factory;
    }

    public SageMaker.ClusterFactory WithSageMakerCluster(string resourceName = null, Action<Humidifier.SageMaker.Cluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ClusterFactory(resourceName, resourceFactoryAction));
        SageMakerClusterFactories.Add(factory);
        return factory;
    }

    public DAX.ParameterGroupFactory WithDAXParameterGroup(string resourceName = null, Action<Humidifier.DAX.ParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.ParameterGroupFactory(resourceName, resourceFactoryAction));
        DAXParameterGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ParameterGroupFactory WithElastiCacheParameterGroup(string resourceName = null, Action<Humidifier.ElastiCache.ParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ParameterGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheParameterGroupFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ParameterGroupFactory WithMemoryDBParameterGroup(string resourceName = null, Action<Humidifier.MemoryDB.ParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ParameterGroupFactory(resourceName, resourceFactoryAction));
        MemoryDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public DAX.SubnetGroupFactory WithDAXSubnetGroup(string resourceName = null, Action<Humidifier.DAX.SubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.SubnetGroupFactory(resourceName, resourceFactoryAction));
        DAXSubnetGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SubnetGroupFactory WithElastiCacheSubnetGroup(string resourceName = null, Action<Humidifier.ElastiCache.SubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SubnetGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheSubnetGroupFactories.Add(factory);
        return factory;
    }

    public MemoryDB.SubnetGroupFactory WithMemoryDBSubnetGroup(string resourceName = null, Action<Humidifier.MemoryDB.SubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.SubnetGroupFactory(resourceName, resourceFactoryAction));
        MemoryDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DLM.LifecyclePolicyFactory WithDLMLifecyclePolicy(string resourceName = null, Action<Humidifier.DLM.LifecyclePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DLM.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        DLMLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.LifecyclePolicyFactory WithImageBuilderLifecyclePolicy(string resourceName = null, Action<Humidifier.ImageBuilder.LifecyclePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        ImageBuilderLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.LifecyclePolicyFactory WithOpenSearchServerlessLifecyclePolicy(string resourceName = null, Action<Humidifier.OpenSearchServerless.LifecyclePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public DMS.DataProviderFactory WithDataProvider(string resourceName = null, Action<Humidifier.DMS.DataProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.DataProviderFactory(resourceName, resourceFactoryAction));
        DataProviderFactories.Add(factory);
        return factory;
    }

    public DMS.EndpointFactory WithDMSEndpoint(string resourceName = null, Action<Humidifier.DMS.Endpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.EndpointFactory(resourceName, resourceFactoryAction));
        DMSEndpointFactories.Add(factory);
        return factory;
    }

    public Events.EndpointFactory WithEventsEndpoint(string resourceName = null, Action<Humidifier.Events.Endpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EndpointFactory(resourceName, resourceFactoryAction));
        EventsEndpointFactories.Add(factory);
        return factory;
    }

    public S3Outposts.EndpointFactory WithS3OutpostsEndpoint(string resourceName = null, Action<Humidifier.S3Outposts.Endpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.EndpointFactory(resourceName, resourceFactoryAction));
        S3OutpostsEndpointFactories.Add(factory);
        return factory;
    }

    public SageMaker.EndpointFactory WithSageMakerEndpoint(string resourceName = null, Action<Humidifier.SageMaker.Endpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.EndpointFactory(resourceName, resourceFactoryAction));
        SageMakerEndpointFactories.Add(factory);
        return factory;
    }

    public DMS.EventSubscriptionFactory WithDMSEventSubscription(string resourceName = null, Action<Humidifier.DMS.EventSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        DMSEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public DocDB.EventSubscriptionFactory WithDocDBEventSubscription(string resourceName = null, Action<Humidifier.DocDB.EventSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        DocDBEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public Neptune.EventSubscriptionFactory WithNeptuneEventSubscription(string resourceName = null, Action<Humidifier.Neptune.EventSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        NeptuneEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public RDS.EventSubscriptionFactory WithRDSEventSubscription(string resourceName = null, Action<Humidifier.RDS.EventSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        RDSEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public Redshift.EventSubscriptionFactory WithRedshiftEventSubscription(string resourceName = null, Action<Humidifier.Redshift.EventSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        RedshiftEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public DMS.InstanceProfileFactory WithDMSInstanceProfile(string resourceName = null, Action<Humidifier.DMS.InstanceProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.InstanceProfileFactory(resourceName, resourceFactoryAction));
        DMSInstanceProfileFactories.Add(factory);
        return factory;
    }

    public IAM.InstanceProfileFactory WithIAMInstanceProfile(string resourceName = null, Action<Humidifier.IAM.InstanceProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.InstanceProfileFactory(resourceName, resourceFactoryAction));
        IAMInstanceProfileFactories.Add(factory);
        return factory;
    }

    public DMS.MigrationProjectFactory WithMigrationProject(string resourceName = null, Action<Humidifier.DMS.MigrationProject> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.MigrationProjectFactory(resourceName, resourceFactoryAction));
        MigrationProjectFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationConfigFactory WithReplicationConfig(string resourceName = null, Action<Humidifier.DMS.ReplicationConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationConfigFactory(resourceName, resourceFactoryAction));
        ReplicationConfigFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationInstanceFactory WithReplicationInstance(string resourceName = null, Action<Humidifier.DMS.ReplicationInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationInstanceFactory(resourceName, resourceFactoryAction));
        ReplicationInstanceFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationSubnetGroupFactory WithReplicationSubnetGroup(string resourceName = null, Action<Humidifier.DMS.ReplicationSubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationSubnetGroupFactory(resourceName, resourceFactoryAction));
        ReplicationSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationTaskFactory WithReplicationTask(string resourceName = null, Action<Humidifier.DMS.ReplicationTask> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationTaskFactory(resourceName, resourceFactoryAction));
        ReplicationTaskFactories.Add(factory);
        return factory;
    }

    public DataBrew.DatasetFactory WithDataBrewDataset(string resourceName = null, Action<Humidifier.DataBrew.Dataset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.DatasetFactory(resourceName, resourceFactoryAction));
        DataBrewDatasetFactories.Add(factory);
        return factory;
    }

    public Forecast.DatasetFactory WithForecastDataset(string resourceName = null, Action<Humidifier.Forecast.Dataset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Forecast.DatasetFactory(resourceName, resourceFactoryAction));
        ForecastDatasetFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.DatasetFactory WithIoTAnalyticsDataset(string resourceName = null, Action<Humidifier.IoTAnalytics.Dataset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.DatasetFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsDatasetFactories.Add(factory);
        return factory;
    }

    public Personalize.DatasetFactory WithPersonalizeDataset(string resourceName = null, Action<Humidifier.Personalize.Dataset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.DatasetFactory(resourceName, resourceFactoryAction));
        PersonalizeDatasetFactories.Add(factory);
        return factory;
    }

    public DataBrew.JobFactory WithDataBrewJob(string resourceName = null, Action<Humidifier.DataBrew.Job> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.JobFactory(resourceName, resourceFactoryAction));
        DataBrewJobFactories.Add(factory);
        return factory;
    }

    public Glue.JobFactory WithGlueJob(string resourceName = null, Action<Humidifier.Glue.Job> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.JobFactory(resourceName, resourceFactoryAction));
        GlueJobFactories.Add(factory);
        return factory;
    }

    public DataBrew.RecipeFactory WithRecipe(string resourceName = null, Action<Humidifier.DataBrew.Recipe> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.RecipeFactory(resourceName, resourceFactoryAction));
        RecipeFactories.Add(factory);
        return factory;
    }

    public DataBrew.RulesetFactory WithRuleset(string resourceName = null, Action<Humidifier.DataBrew.Ruleset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.RulesetFactory(resourceName, resourceFactoryAction));
        RulesetFactories.Add(factory);
        return factory;
    }

    public DataBrew.ScheduleFactory WithDataBrewSchedule(string resourceName = null, Action<Humidifier.DataBrew.Schedule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.ScheduleFactory(resourceName, resourceFactoryAction));
        DataBrewScheduleFactories.Add(factory);
        return factory;
    }

    public Scheduler.ScheduleFactory WithSchedulerSchedule(string resourceName = null, Action<Humidifier.Scheduler.Schedule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Scheduler.ScheduleFactory(resourceName, resourceFactoryAction));
        SchedulerScheduleFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationAzureBlobFactory WithLocationAzureBlob(string resourceName = null, Action<Humidifier.DataSync.LocationAzureBlob> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationAzureBlobFactory(resourceName, resourceFactoryAction));
        LocationAzureBlobFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationEFSFactory WithLocationEFS(string resourceName = null, Action<Humidifier.DataSync.LocationEFS> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationEFSFactory(resourceName, resourceFactoryAction));
        LocationEFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxLustreFactory WithLocationFSxLustre(string resourceName = null, Action<Humidifier.DataSync.LocationFSxLustre> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxLustreFactory(resourceName, resourceFactoryAction));
        LocationFSxLustreFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxONTAPFactory WithLocationFSxONTAP(string resourceName = null, Action<Humidifier.DataSync.LocationFSxONTAP> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxONTAPFactory(resourceName, resourceFactoryAction));
        LocationFSxONTAPFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxOpenZFSFactory WithLocationFSxOpenZFS(string resourceName = null, Action<Humidifier.DataSync.LocationFSxOpenZFS> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxOpenZFSFactory(resourceName, resourceFactoryAction));
        LocationFSxOpenZFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxWindowsFactory WithLocationFSxWindows(string resourceName = null, Action<Humidifier.DataSync.LocationFSxWindows> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxWindowsFactory(resourceName, resourceFactoryAction));
        LocationFSxWindowsFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationHDFSFactory WithLocationHDFS(string resourceName = null, Action<Humidifier.DataSync.LocationHDFS> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationHDFSFactory(resourceName, resourceFactoryAction));
        LocationHDFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationNFSFactory WithLocationNFS(string resourceName = null, Action<Humidifier.DataSync.LocationNFS> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationNFSFactory(resourceName, resourceFactoryAction));
        LocationNFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationObjectStorageFactory WithLocationObjectStorage(string resourceName = null, Action<Humidifier.DataSync.LocationObjectStorage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationObjectStorageFactory(resourceName, resourceFactoryAction));
        LocationObjectStorageFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationS3Factory WithLocationS3(string resourceName = null, Action<Humidifier.DataSync.LocationS3> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationS3Factory(resourceName, resourceFactoryAction));
        LocationS3Factories.Add(factory);
        return factory;
    }

    public DataSync.LocationSMBFactory WithLocationSMB(string resourceName = null, Action<Humidifier.DataSync.LocationSMB> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationSMBFactory(resourceName, resourceFactoryAction));
        LocationSMBFactories.Add(factory);
        return factory;
    }

    public DataSync.StorageSystemFactory WithStorageSystem(string resourceName = null, Action<Humidifier.DataSync.StorageSystem> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.StorageSystemFactory(resourceName, resourceFactoryAction));
        StorageSystemFactories.Add(factory);
        return factory;
    }

    public DataSync.TaskFactory WithTask(string resourceName = null, Action<Humidifier.DataSync.Task> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.TaskFactory(resourceName, resourceFactoryAction));
        TaskFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentActionsFactory WithEnvironmentActions(string resourceName = null, Action<Humidifier.DataZone.EnvironmentActions> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentActionsFactory(resourceName, resourceFactoryAction));
        EnvironmentActionsFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentBlueprintConfigurationFactory WithEnvironmentBlueprintConfiguration(string resourceName = null, Action<Humidifier.DataZone.EnvironmentBlueprintConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentBlueprintConfigurationFactory(resourceName, resourceFactoryAction));
        EnvironmentBlueprintConfigurationFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentProfileFactory WithEnvironmentProfile(string resourceName = null, Action<Humidifier.DataZone.EnvironmentProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentProfileFactory(resourceName, resourceFactoryAction));
        EnvironmentProfileFactories.Add(factory);
        return factory;
    }

    public DataZone.GroupProfileFactory WithGroupProfile(string resourceName = null, Action<Humidifier.DataZone.GroupProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.GroupProfileFactory(resourceName, resourceFactoryAction));
        GroupProfileFactories.Add(factory);
        return factory;
    }

    public DataZone.ProjectMembershipFactory WithProjectMembership(string resourceName = null, Action<Humidifier.DataZone.ProjectMembership> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.ProjectMembershipFactory(resourceName, resourceFactoryAction));
        ProjectMembershipFactories.Add(factory);
        return factory;
    }

    public DataZone.SubscriptionTargetFactory WithSubscriptionTarget(string resourceName = null, Action<Humidifier.DataZone.SubscriptionTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.SubscriptionTargetFactory(resourceName, resourceFactoryAction));
        SubscriptionTargetFactories.Add(factory);
        return factory;
    }

    public DataZone.UserProfileFactory WithDataZoneUserProfile(string resourceName = null, Action<Humidifier.DataZone.UserProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.UserProfileFactory(resourceName, resourceFactoryAction));
        DataZoneUserProfileFactories.Add(factory);
        return factory;
    }

    public OpsWorks.UserProfileFactory WithOpsWorksUserProfile(string resourceName = null, Action<Humidifier.OpsWorks.UserProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.UserProfileFactory(resourceName, resourceFactoryAction));
        OpsWorksUserProfileFactories.Add(factory);
        return factory;
    }

    public SageMaker.UserProfileFactory WithSageMakerUserProfile(string resourceName = null, Action<Humidifier.SageMaker.UserProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.UserProfileFactory(resourceName, resourceFactoryAction));
        SageMakerUserProfileFactories.Add(factory);
        return factory;
    }

    public Deadline.FarmFactory WithFarm(string resourceName = null, Action<Humidifier.Deadline.Farm> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.FarmFactory(resourceName, resourceFactoryAction));
        FarmFactories.Add(factory);
        return factory;
    }

    public Deadline.LicenseEndpointFactory WithLicenseEndpoint(string resourceName = null, Action<Humidifier.Deadline.LicenseEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.LicenseEndpointFactory(resourceName, resourceFactoryAction));
        LicenseEndpointFactories.Add(factory);
        return factory;
    }

    public Deadline.MeteredProductFactory WithMeteredProduct(string resourceName = null, Action<Humidifier.Deadline.MeteredProduct> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.MeteredProductFactory(resourceName, resourceFactoryAction));
        MeteredProductFactories.Add(factory);
        return factory;
    }

    public Deadline.MonitorFactory WithDeadlineMonitor(string resourceName = null, Action<Humidifier.Deadline.Monitor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.MonitorFactory(resourceName, resourceFactoryAction));
        DeadlineMonitorFactories.Add(factory);
        return factory;
    }

    public InternetMonitor.MonitorFactory WithInternetMonitorMonitor(string resourceName = null, Action<Humidifier.InternetMonitor.Monitor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new InternetMonitor.MonitorFactory(resourceName, resourceFactoryAction));
        InternetMonitorMonitorFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueEnvironmentFactory WithQueueEnvironment(string resourceName = null, Action<Humidifier.Deadline.QueueEnvironment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueEnvironmentFactory(resourceName, resourceFactoryAction));
        QueueEnvironmentFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueFleetAssociationFactory WithQueueFleetAssociation(string resourceName = null, Action<Humidifier.Deadline.QueueFleetAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueFleetAssociationFactory(resourceName, resourceFactoryAction));
        QueueFleetAssociationFactories.Add(factory);
        return factory;
    }

    public Deadline.StorageProfileFactory WithStorageProfile(string resourceName = null, Action<Humidifier.Deadline.StorageProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.StorageProfileFactory(resourceName, resourceFactoryAction));
        StorageProfileFactories.Add(factory);
        return factory;
    }

    public Detective.GraphFactory WithDetectiveGraph(string resourceName = null, Action<Humidifier.Detective.Graph> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.GraphFactory(resourceName, resourceFactoryAction));
        DetectiveGraphFactories.Add(factory);
        return factory;
    }

    public NeptuneGraph.GraphFactory WithNeptuneGraphGraph(string resourceName = null, Action<Humidifier.NeptuneGraph.Graph> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NeptuneGraph.GraphFactory(resourceName, resourceFactoryAction));
        NeptuneGraphGraphFactories.Add(factory);
        return factory;
    }

    public Detective.MemberInvitationFactory WithMemberInvitation(string resourceName = null, Action<Humidifier.Detective.MemberInvitation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.MemberInvitationFactory(resourceName, resourceFactoryAction));
        MemberInvitationFactories.Add(factory);
        return factory;
    }

    public Detective.OrganizationAdminFactory WithOrganizationAdmin(string resourceName = null, Action<Humidifier.Detective.OrganizationAdmin> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.OrganizationAdminFactory(resourceName, resourceFactoryAction));
        OrganizationAdminFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.LogAnomalyDetectionIntegrationFactory WithLogAnomalyDetectionIntegration(string resourceName = null, Action<Humidifier.DevOpsGuru.LogAnomalyDetectionIntegration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.LogAnomalyDetectionIntegrationFactory(resourceName, resourceFactoryAction));
        LogAnomalyDetectionIntegrationFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.NotificationChannelFactory WithDevOpsGuruNotificationChannel(string resourceName = null, Action<Humidifier.DevOpsGuru.NotificationChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.NotificationChannelFactory(resourceName, resourceFactoryAction));
        DevOpsGuruNotificationChannelFactories.Add(factory);
        return factory;
    }

    public FMS.NotificationChannelFactory WithFMSNotificationChannel(string resourceName = null, Action<Humidifier.FMS.NotificationChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.NotificationChannelFactory(resourceName, resourceFactoryAction));
        FMSNotificationChannelFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.ResourceCollectionFactory WithResourceCollection(string resourceName = null, Action<Humidifier.DevOpsGuru.ResourceCollection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.ResourceCollectionFactory(resourceName, resourceFactoryAction));
        ResourceCollectionFactories.Add(factory);
        return factory;
    }

    public DirectoryService.MicrosoftADFactory WithMicrosoftAD(string resourceName = null, Action<Humidifier.DirectoryService.MicrosoftAD> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DirectoryService.MicrosoftADFactory(resourceName, resourceFactoryAction));
        MicrosoftADFactories.Add(factory);
        return factory;
    }

    public DirectoryService.SimpleADFactory WithSimpleAD(string resourceName = null, Action<Humidifier.DirectoryService.SimpleAD> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DirectoryService.SimpleADFactory(resourceName, resourceFactoryAction));
        SimpleADFactories.Add(factory);
        return factory;
    }

    public DocDB.DBClusterFactory WithDocDBDBCluster(string resourceName = null, Action<Humidifier.DocDB.DBCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBClusterFactory(resourceName, resourceFactoryAction));
        DocDBDBClusterFactories.Add(factory);
        return factory;
    }

    public Neptune.DBClusterFactory WithNeptuneDBCluster(string resourceName = null, Action<Humidifier.Neptune.DBCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBClusterFactory(resourceName, resourceFactoryAction));
        NeptuneDBClusterFactories.Add(factory);
        return factory;
    }

    public RDS.DBClusterFactory WithRDSDBCluster(string resourceName = null, Action<Humidifier.RDS.DBCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBClusterFactory(resourceName, resourceFactoryAction));
        RDSDBClusterFactories.Add(factory);
        return factory;
    }

    public DocDB.DBClusterParameterGroupFactory WithDocDBDBClusterParameterGroup(string resourceName = null, Action<Humidifier.DocDB.DBClusterParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        DocDBDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public Neptune.DBClusterParameterGroupFactory WithNeptuneDBClusterParameterGroup(string resourceName = null, Action<Humidifier.Neptune.DBClusterParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBClusterParameterGroupFactory WithRDSDBClusterParameterGroup(string resourceName = null, Action<Humidifier.RDS.DBClusterParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        RDSDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public DocDB.DBInstanceFactory WithDocDBDBInstance(string resourceName = null, Action<Humidifier.DocDB.DBInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBInstanceFactory(resourceName, resourceFactoryAction));
        DocDBDBInstanceFactories.Add(factory);
        return factory;
    }

    public Neptune.DBInstanceFactory WithNeptuneDBInstance(string resourceName = null, Action<Humidifier.Neptune.DBInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBInstanceFactory(resourceName, resourceFactoryAction));
        NeptuneDBInstanceFactories.Add(factory);
        return factory;
    }

    public RDS.DBInstanceFactory WithRDSDBInstance(string resourceName = null, Action<Humidifier.RDS.DBInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBInstanceFactory(resourceName, resourceFactoryAction));
        RDSDBInstanceFactories.Add(factory);
        return factory;
    }

    public DocDB.DBSubnetGroupFactory WithDocDBDBSubnetGroup(string resourceName = null, Action<Humidifier.DocDB.DBSubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        DocDBDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public Neptune.DBSubnetGroupFactory WithNeptuneDBSubnetGroup(string resourceName = null, Action<Humidifier.Neptune.DBSubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSubnetGroupFactory WithRDSDBSubnetGroup(string resourceName = null, Action<Humidifier.RDS.DBSubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        RDSDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DynamoDB.GlobalTableFactory WithGlobalTable(string resourceName = null, Action<Humidifier.DynamoDB.GlobalTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new DynamoDB.GlobalTableFactory(resourceName, resourceFactoryAction));
        GlobalTableFactories.Add(factory);
        return factory;
    }

    public EC2.CapacityReservationFleetFactory WithCapacityReservationFleet(string resourceName = null, Action<Humidifier.EC2.CapacityReservationFleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CapacityReservationFleetFactory(resourceName, resourceFactoryAction));
        CapacityReservationFleetFactories.Add(factory);
        return factory;
    }

    public EC2.CarrierGatewayFactory WithCarrierGateway(string resourceName = null, Action<Humidifier.EC2.CarrierGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CarrierGatewayFactory(resourceName, resourceFactoryAction));
        CarrierGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnAuthorizationRuleFactory WithClientVpnAuthorizationRule(string resourceName = null, Action<Humidifier.EC2.ClientVpnAuthorizationRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnAuthorizationRuleFactory(resourceName, resourceFactoryAction));
        ClientVpnAuthorizationRuleFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnEndpointFactory WithClientVpnEndpoint(string resourceName = null, Action<Humidifier.EC2.ClientVpnEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnEndpointFactory(resourceName, resourceFactoryAction));
        ClientVpnEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnRouteFactory WithClientVpnRoute(string resourceName = null, Action<Humidifier.EC2.ClientVpnRoute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnRouteFactory(resourceName, resourceFactoryAction));
        ClientVpnRouteFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnTargetNetworkAssociationFactory WithClientVpnTargetNetworkAssociation(string resourceName = null, Action<Humidifier.EC2.ClientVpnTargetNetworkAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnTargetNetworkAssociationFactory(resourceName, resourceFactoryAction));
        ClientVpnTargetNetworkAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.CustomerGatewayFactory WithCustomerGateway(string resourceName = null, Action<Humidifier.EC2.CustomerGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CustomerGatewayFactory(resourceName, resourceFactoryAction));
        CustomerGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.DHCPOptionsFactory WithDHCPOptions(string resourceName = null, Action<Humidifier.EC2.DHCPOptions> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.DHCPOptionsFactory(resourceName, resourceFactoryAction));
        DHCPOptionsFactories.Add(factory);
        return factory;
    }

    public EC2.EC2FleetFactory WithEC2Fleet(string resourceName = null, Action<Humidifier.EC2.EC2Fleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EC2FleetFactory(resourceName, resourceFactoryAction));
        EC2FleetFactories.Add(factory);
        return factory;
    }

    public EC2.EIPFactory WithEIP(string resourceName = null, Action<Humidifier.EC2.EIP> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EIPFactory(resourceName, resourceFactoryAction));
        EIPFactories.Add(factory);
        return factory;
    }

    public EC2.EIPAssociationFactory WithEIPAssociation(string resourceName = null, Action<Humidifier.EC2.EIPAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EIPAssociationFactory(resourceName, resourceFactoryAction));
        EIPAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.EgressOnlyInternetGatewayFactory WithEgressOnlyInternetGateway(string resourceName = null, Action<Humidifier.EC2.EgressOnlyInternetGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EgressOnlyInternetGatewayFactory(resourceName, resourceFactoryAction));
        EgressOnlyInternetGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.EnclaveCertificateIamRoleAssociationFactory WithEnclaveCertificateIamRoleAssociation(string resourceName = null, Action<Humidifier.EC2.EnclaveCertificateIamRoleAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EnclaveCertificateIamRoleAssociationFactory(resourceName, resourceFactoryAction));
        EnclaveCertificateIamRoleAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.FlowLogFactory WithFlowLog(string resourceName = null, Action<Humidifier.EC2.FlowLog> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.FlowLogFactory(resourceName, resourceFactoryAction));
        FlowLogFactories.Add(factory);
        return factory;
    }

    public EC2.GatewayRouteTableAssociationFactory WithGatewayRouteTableAssociation(string resourceName = null, Action<Humidifier.EC2.GatewayRouteTableAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.GatewayRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        GatewayRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.HostFactory WithHost(string resourceName = null, Action<Humidifier.EC2.Host> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.HostFactory(resourceName, resourceFactoryAction));
        HostFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMFactory WithIPAM(string resourceName = null, Action<Humidifier.EC2.IPAM> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMFactory(resourceName, resourceFactoryAction));
        IPAMFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMAllocationFactory WithIPAMAllocation(string resourceName = null, Action<Humidifier.EC2.IPAMAllocation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMAllocationFactory(resourceName, resourceFactoryAction));
        IPAMAllocationFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMPoolFactory WithIPAMPool(string resourceName = null, Action<Humidifier.EC2.IPAMPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMPoolFactory(resourceName, resourceFactoryAction));
        IPAMPoolFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMPoolCidrFactory WithIPAMPoolCidr(string resourceName = null, Action<Humidifier.EC2.IPAMPoolCidr> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMPoolCidrFactory(resourceName, resourceFactoryAction));
        IPAMPoolCidrFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMResourceDiscoveryFactory WithIPAMResourceDiscovery(string resourceName = null, Action<Humidifier.EC2.IPAMResourceDiscovery> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMResourceDiscoveryFactory(resourceName, resourceFactoryAction));
        IPAMResourceDiscoveryFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMResourceDiscoveryAssociationFactory WithIPAMResourceDiscoveryAssociation(string resourceName = null, Action<Humidifier.EC2.IPAMResourceDiscoveryAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMResourceDiscoveryAssociationFactory(resourceName, resourceFactoryAction));
        IPAMResourceDiscoveryAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMScopeFactory WithIPAMScope(string resourceName = null, Action<Humidifier.EC2.IPAMScope> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMScopeFactory(resourceName, resourceFactoryAction));
        IPAMScopeFactories.Add(factory);
        return factory;
    }

    public EC2.InstanceConnectEndpointFactory WithInstanceConnectEndpoint(string resourceName = null, Action<Humidifier.EC2.InstanceConnectEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InstanceConnectEndpointFactory(resourceName, resourceFactoryAction));
        InstanceConnectEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.InternetGatewayFactory WithInternetGateway(string resourceName = null, Action<Humidifier.EC2.InternetGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InternetGatewayFactory(resourceName, resourceFactoryAction));
        InternetGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.KeyPairFactory WithKeyPair(string resourceName = null, Action<Humidifier.EC2.KeyPair> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.KeyPairFactory(resourceName, resourceFactoryAction));
        KeyPairFactories.Add(factory);
        return factory;
    }

    public EC2.LaunchTemplateFactory WithLaunchTemplate(string resourceName = null, Action<Humidifier.EC2.LaunchTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LaunchTemplateFactory(resourceName, resourceFactoryAction));
        LaunchTemplateFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteFactory WithLocalGatewayRoute(string resourceName = null, Action<Humidifier.EC2.LocalGatewayRoute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableFactory WithLocalGatewayRouteTable(string resourceName = null, Action<Humidifier.EC2.LocalGatewayRouteTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableVPCAssociationFactory WithLocalGatewayRouteTableVPCAssociation(string resourceName = null, Action<Humidifier.EC2.LocalGatewayRouteTableVPCAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableVPCAssociationFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableVPCAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactory WithLocalGatewayRouteTableVirtualInterfaceGroupAssociation(string resourceName = null, Action<Humidifier.EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.NatGatewayFactory WithNatGateway(string resourceName = null, Action<Humidifier.EC2.NatGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NatGatewayFactory(resourceName, resourceFactoryAction));
        NatGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkAclFactory WithNetworkAcl(string resourceName = null, Action<Humidifier.EC2.NetworkAcl> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkAclFactory(resourceName, resourceFactoryAction));
        NetworkAclFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkAclEntryFactory WithNetworkAclEntry(string resourceName = null, Action<Humidifier.EC2.NetworkAclEntry> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkAclEntryFactory(resourceName, resourceFactoryAction));
        NetworkAclEntryFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAccessScopeFactory WithNetworkInsightsAccessScope(string resourceName = null, Action<Humidifier.EC2.NetworkInsightsAccessScope> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAccessScopeFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAccessScopeFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAccessScopeAnalysisFactory WithNetworkInsightsAccessScopeAnalysis(string resourceName = null, Action<Humidifier.EC2.NetworkInsightsAccessScopeAnalysis> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAccessScopeAnalysisFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAccessScopeAnalysisFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAnalysisFactory WithNetworkInsightsAnalysis(string resourceName = null, Action<Humidifier.EC2.NetworkInsightsAnalysis> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAnalysisFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAnalysisFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsPathFactory WithNetworkInsightsPath(string resourceName = null, Action<Humidifier.EC2.NetworkInsightsPath> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsPathFactory(resourceName, resourceFactoryAction));
        NetworkInsightsPathFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfaceFactory WithNetworkInterface(string resourceName = null, Action<Humidifier.EC2.NetworkInterface> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfaceFactory(resourceName, resourceFactoryAction));
        NetworkInterfaceFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfaceAttachmentFactory WithNetworkInterfaceAttachment(string resourceName = null, Action<Humidifier.EC2.NetworkInterfaceAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfaceAttachmentFactory(resourceName, resourceFactoryAction));
        NetworkInterfaceAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfacePermissionFactory WithNetworkInterfacePermission(string resourceName = null, Action<Humidifier.EC2.NetworkInterfacePermission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfacePermissionFactory(resourceName, resourceFactoryAction));
        NetworkInterfacePermissionFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkPerformanceMetricSubscriptionFactory WithNetworkPerformanceMetricSubscription(string resourceName = null, Action<Humidifier.EC2.NetworkPerformanceMetricSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkPerformanceMetricSubscriptionFactory(resourceName, resourceFactoryAction));
        NetworkPerformanceMetricSubscriptionFactories.Add(factory);
        return factory;
    }

    public EC2.PlacementGroupFactory WithPlacementGroup(string resourceName = null, Action<Humidifier.EC2.PlacementGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.PlacementGroupFactory(resourceName, resourceFactoryAction));
        PlacementGroupFactories.Add(factory);
        return factory;
    }

    public EC2.PrefixListFactory WithPrefixList(string resourceName = null, Action<Humidifier.EC2.PrefixList> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.PrefixListFactory(resourceName, resourceFactoryAction));
        PrefixListFactories.Add(factory);
        return factory;
    }

    public EC2.RouteTableFactory WithRouteTable(string resourceName = null, Action<Humidifier.EC2.RouteTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.RouteTableFactory(resourceName, resourceFactoryAction));
        RouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupFactory WithEC2SecurityGroup(string resourceName = null, Action<Humidifier.EC2.SecurityGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupFactory(resourceName, resourceFactoryAction));
        EC2SecurityGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SecurityGroupFactory WithElastiCacheSecurityGroup(string resourceName = null, Action<Humidifier.ElastiCache.SecurityGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SecurityGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheSecurityGroupFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupEgressFactory WithSecurityGroupEgress(string resourceName = null, Action<Humidifier.EC2.SecurityGroupEgress> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupEgressFactory(resourceName, resourceFactoryAction));
        SecurityGroupEgressFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupIngressFactory WithEC2SecurityGroupIngress(string resourceName = null, Action<Humidifier.EC2.SecurityGroupIngress> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        EC2SecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SecurityGroupIngressFactory WithElastiCacheSecurityGroupIngress(string resourceName = null, Action<Humidifier.ElastiCache.SecurityGroupIngress> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        ElastiCacheSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public EC2.SnapshotBlockPublicAccessFactory WithSnapshotBlockPublicAccess(string resourceName = null, Action<Humidifier.EC2.SnapshotBlockPublicAccess> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SnapshotBlockPublicAccessFactory(resourceName, resourceFactoryAction));
        SnapshotBlockPublicAccessFactories.Add(factory);
        return factory;
    }

    public EC2.SpotFleetFactory WithSpotFleet(string resourceName = null, Action<Humidifier.EC2.SpotFleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SpotFleetFactory(resourceName, resourceFactoryAction));
        SpotFleetFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetFactory WithSubnet(string resourceName = null, Action<Humidifier.EC2.Subnet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetFactory(resourceName, resourceFactoryAction));
        SubnetFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetCidrBlockFactory WithSubnetCidrBlock(string resourceName = null, Action<Humidifier.EC2.SubnetCidrBlock> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetCidrBlockFactory(resourceName, resourceFactoryAction));
        SubnetCidrBlockFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetNetworkAclAssociationFactory WithSubnetNetworkAclAssociation(string resourceName = null, Action<Humidifier.EC2.SubnetNetworkAclAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetNetworkAclAssociationFactory(resourceName, resourceFactoryAction));
        SubnetNetworkAclAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetRouteTableAssociationFactory WithSubnetRouteTableAssociation(string resourceName = null, Action<Humidifier.EC2.SubnetRouteTableAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        SubnetRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorFilterFactory WithTrafficMirrorFilter(string resourceName = null, Action<Humidifier.EC2.TrafficMirrorFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorFilterFactory(resourceName, resourceFactoryAction));
        TrafficMirrorFilterFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorFilterRuleFactory WithTrafficMirrorFilterRule(string resourceName = null, Action<Humidifier.EC2.TrafficMirrorFilterRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorFilterRuleFactory(resourceName, resourceFactoryAction));
        TrafficMirrorFilterRuleFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorSessionFactory WithTrafficMirrorSession(string resourceName = null, Action<Humidifier.EC2.TrafficMirrorSession> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorSessionFactory(resourceName, resourceFactoryAction));
        TrafficMirrorSessionFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorTargetFactory WithTrafficMirrorTarget(string resourceName = null, Action<Humidifier.EC2.TrafficMirrorTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorTargetFactory(resourceName, resourceFactoryAction));
        TrafficMirrorTargetFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayFactory WithTransitGateway(string resourceName = null, Action<Humidifier.EC2.TransitGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayFactory(resourceName, resourceFactoryAction));
        TransitGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayAttachmentFactory WithTransitGatewayAttachment(string resourceName = null, Action<Humidifier.EC2.TransitGatewayAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayConnectFactory WithTransitGatewayConnect(string resourceName = null, Action<Humidifier.EC2.TransitGatewayConnect> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayConnectFactory(resourceName, resourceFactoryAction));
        TransitGatewayConnectFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastDomainFactory WithTransitGatewayMulticastDomain(string resourceName = null, Action<Humidifier.EC2.TransitGatewayMulticastDomain> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastDomainFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastDomainFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastDomainAssociationFactory WithTransitGatewayMulticastDomainAssociation(string resourceName = null, Action<Humidifier.EC2.TransitGatewayMulticastDomainAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastDomainAssociationFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastDomainAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastGroupMemberFactory WithTransitGatewayMulticastGroupMember(string resourceName = null, Action<Humidifier.EC2.TransitGatewayMulticastGroupMember> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastGroupMemberFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastGroupMemberFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastGroupSourceFactory WithTransitGatewayMulticastGroupSource(string resourceName = null, Action<Humidifier.EC2.TransitGatewayMulticastGroupSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastGroupSourceFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastGroupSourceFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayPeeringAttachmentFactory WithTransitGatewayPeeringAttachment(string resourceName = null, Action<Humidifier.EC2.TransitGatewayPeeringAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayPeeringAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayPeeringAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteFactory WithTransitGatewayRoute(string resourceName = null, Action<Humidifier.EC2.TransitGatewayRoute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTableFactory WithTransitGatewayRouteTable(string resourceName = null, Action<Humidifier.EC2.TransitGatewayRouteTable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTableFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTableAssociationFactory WithTransitGatewayRouteTableAssociation(string resourceName = null, Action<Humidifier.EC2.TransitGatewayRouteTableAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTablePropagationFactory WithTransitGatewayRouteTablePropagation(string resourceName = null, Action<Humidifier.EC2.TransitGatewayRouteTablePropagation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTablePropagationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTablePropagationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayVpcAttachmentFactory WithTransitGatewayVpcAttachment(string resourceName = null, Action<Humidifier.EC2.TransitGatewayVpcAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayVpcAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayVpcAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.VPCFactory WithVPC(string resourceName = null, Action<Humidifier.EC2.VPC> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCFactory(resourceName, resourceFactoryAction));
        VPCFactories.Add(factory);
        return factory;
    }

    public EC2.VPCCidrBlockFactory WithVPCCidrBlock(string resourceName = null, Action<Humidifier.EC2.VPCCidrBlock> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCCidrBlockFactory(resourceName, resourceFactoryAction));
        VPCCidrBlockFactories.Add(factory);
        return factory;
    }

    public EC2.VPCDHCPOptionsAssociationFactory WithVPCDHCPOptionsAssociation(string resourceName = null, Action<Humidifier.EC2.VPCDHCPOptionsAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCDHCPOptionsAssociationFactory(resourceName, resourceFactoryAction));
        VPCDHCPOptionsAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointFactory WithVPCEndpoint(string resourceName = null, Action<Humidifier.EC2.VPCEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointFactory(resourceName, resourceFactoryAction));
        VPCEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointConnectionNotificationFactory WithVPCEndpointConnectionNotification(string resourceName = null, Action<Humidifier.EC2.VPCEndpointConnectionNotification> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointConnectionNotificationFactory(resourceName, resourceFactoryAction));
        VPCEndpointConnectionNotificationFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointServiceFactory WithVPCEndpointService(string resourceName = null, Action<Humidifier.EC2.VPCEndpointService> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointServiceFactory(resourceName, resourceFactoryAction));
        VPCEndpointServiceFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointServicePermissionsFactory WithVPCEndpointServicePermissions(string resourceName = null, Action<Humidifier.EC2.VPCEndpointServicePermissions> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointServicePermissionsFactory(resourceName, resourceFactoryAction));
        VPCEndpointServicePermissionsFactories.Add(factory);
        return factory;
    }

    public EC2.VPCGatewayAttachmentFactory WithVPCGatewayAttachment(string resourceName = null, Action<Humidifier.EC2.VPCGatewayAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCGatewayAttachmentFactory(resourceName, resourceFactoryAction));
        VPCGatewayAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.VPCPeeringConnectionFactory WithVPCPeeringConnection(string resourceName = null, Action<Humidifier.EC2.VPCPeeringConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCPeeringConnectionFactory(resourceName, resourceFactoryAction));
        VPCPeeringConnectionFactories.Add(factory);
        return factory;
    }

    public EC2.VPNConnectionFactory WithVPNConnection(string resourceName = null, Action<Humidifier.EC2.VPNConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNConnectionFactory(resourceName, resourceFactoryAction));
        VPNConnectionFactories.Add(factory);
        return factory;
    }

    public EC2.VPNConnectionRouteFactory WithVPNConnectionRoute(string resourceName = null, Action<Humidifier.EC2.VPNConnectionRoute> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNConnectionRouteFactory(resourceName, resourceFactoryAction));
        VPNConnectionRouteFactories.Add(factory);
        return factory;
    }

    public EC2.VPNGatewayFactory WithVPNGateway(string resourceName = null, Action<Humidifier.EC2.VPNGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNGatewayFactory(resourceName, resourceFactoryAction));
        VPNGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.VPNGatewayRoutePropagationFactory WithVPNGatewayRoutePropagation(string resourceName = null, Action<Humidifier.EC2.VPNGatewayRoutePropagation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNGatewayRoutePropagationFactory(resourceName, resourceFactoryAction));
        VPNGatewayRoutePropagationFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessEndpointFactory WithVerifiedAccessEndpoint(string resourceName = null, Action<Humidifier.EC2.VerifiedAccessEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessEndpointFactory(resourceName, resourceFactoryAction));
        VerifiedAccessEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessGroupFactory WithVerifiedAccessGroup(string resourceName = null, Action<Humidifier.EC2.VerifiedAccessGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessGroupFactory(resourceName, resourceFactoryAction));
        VerifiedAccessGroupFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessInstanceFactory WithVerifiedAccessInstance(string resourceName = null, Action<Humidifier.EC2.VerifiedAccessInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessInstanceFactory(resourceName, resourceFactoryAction));
        VerifiedAccessInstanceFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessTrustProviderFactory WithVerifiedAccessTrustProvider(string resourceName = null, Action<Humidifier.EC2.VerifiedAccessTrustProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessTrustProviderFactory(resourceName, resourceFactoryAction));
        VerifiedAccessTrustProviderFactories.Add(factory);
        return factory;
    }

    public EC2.VolumeFactory WithEC2Volume(string resourceName = null, Action<Humidifier.EC2.Volume> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VolumeFactory(resourceName, resourceFactoryAction));
        EC2VolumeFactories.Add(factory);
        return factory;
    }

    public FSx.VolumeFactory WithFSxVolume(string resourceName = null, Action<Humidifier.FSx.Volume> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.VolumeFactory(resourceName, resourceFactoryAction));
        FSxVolumeFactories.Add(factory);
        return factory;
    }

    public OpsWorks.VolumeFactory WithOpsWorksVolume(string resourceName = null, Action<Humidifier.OpsWorks.Volume> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.VolumeFactory(resourceName, resourceFactoryAction));
        OpsWorksVolumeFactories.Add(factory);
        return factory;
    }

    public EC2.VolumeAttachmentFactory WithVolumeAttachment(string resourceName = null, Action<Humidifier.EC2.VolumeAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VolumeAttachmentFactory(resourceName, resourceFactoryAction));
        VolumeAttachmentFactories.Add(factory);
        return factory;
    }

    public ECR.PublicRepositoryFactory WithPublicRepository(string resourceName = null, Action<Humidifier.ECR.PublicRepository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.PublicRepositoryFactory(resourceName, resourceFactoryAction));
        PublicRepositoryFactories.Add(factory);
        return factory;
    }

    public ECR.PullThroughCacheRuleFactory WithPullThroughCacheRule(string resourceName = null, Action<Humidifier.ECR.PullThroughCacheRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.PullThroughCacheRuleFactory(resourceName, resourceFactoryAction));
        PullThroughCacheRuleFactories.Add(factory);
        return factory;
    }

    public ECR.RegistryPolicyFactory WithECRRegistryPolicy(string resourceName = null, Action<Humidifier.ECR.RegistryPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RegistryPolicyFactory(resourceName, resourceFactoryAction));
        ECRRegistryPolicyFactories.Add(factory);
        return factory;
    }

    public EventSchemas.RegistryPolicyFactory WithEventSchemasRegistryPolicy(string resourceName = null, Action<Humidifier.EventSchemas.RegistryPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.RegistryPolicyFactory(resourceName, resourceFactoryAction));
        EventSchemasRegistryPolicyFactories.Add(factory);
        return factory;
    }

    public ECR.ReplicationConfigurationFactory WithReplicationConfiguration(string resourceName = null, Action<Humidifier.ECR.ReplicationConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.ReplicationConfigurationFactory(resourceName, resourceFactoryAction));
        ReplicationConfigurationFactories.Add(factory);
        return factory;
    }

    public ECR.RepositoryCreationTemplateFactory WithRepositoryCreationTemplate(string resourceName = null, Action<Humidifier.ECR.RepositoryCreationTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RepositoryCreationTemplateFactory(resourceName, resourceFactoryAction));
        RepositoryCreationTemplateFactories.Add(factory);
        return factory;
    }

    public ECS.CapacityProviderFactory WithCapacityProvider(string resourceName = null, Action<Humidifier.ECS.CapacityProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.CapacityProviderFactory(resourceName, resourceFactoryAction));
        CapacityProviderFactories.Add(factory);
        return factory;
    }

    public ECS.ClusterCapacityProviderAssociationsFactory WithClusterCapacityProviderAssociations(string resourceName = null, Action<Humidifier.ECS.ClusterCapacityProviderAssociations> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ClusterCapacityProviderAssociationsFactory(resourceName, resourceFactoryAction));
        ClusterCapacityProviderAssociationsFactories.Add(factory);
        return factory;
    }

    public ECS.PrimaryTaskSetFactory WithPrimaryTaskSet(string resourceName = null, Action<Humidifier.ECS.PrimaryTaskSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.PrimaryTaskSetFactory(resourceName, resourceFactoryAction));
        PrimaryTaskSetFactories.Add(factory);
        return factory;
    }

    public ECS.TaskDefinitionFactory WithECSTaskDefinition(string resourceName = null, Action<Humidifier.ECS.TaskDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.TaskDefinitionFactory(resourceName, resourceFactoryAction));
        ECSTaskDefinitionFactories.Add(factory);
        return factory;
    }

    public IoTWireless.TaskDefinitionFactory WithIoTWirelessTaskDefinition(string resourceName = null, Action<Humidifier.IoTWireless.TaskDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.TaskDefinitionFactory(resourceName, resourceFactoryAction));
        IoTWirelessTaskDefinitionFactories.Add(factory);
        return factory;
    }

    public ECS.TaskSetFactory WithTaskSet(string resourceName = null, Action<Humidifier.ECS.TaskSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.TaskSetFactory(resourceName, resourceFactoryAction));
        TaskSetFactories.Add(factory);
        return factory;
    }

    public EFS.AccessPointFactory WithEFSAccessPoint(string resourceName = null, Action<Humidifier.EFS.AccessPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.AccessPointFactory(resourceName, resourceFactoryAction));
        EFSAccessPointFactories.Add(factory);
        return factory;
    }

    public S3.AccessPointFactory WithS3AccessPoint(string resourceName = null, Action<Humidifier.S3.AccessPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessPointFactory(resourceName, resourceFactoryAction));
        S3AccessPointFactories.Add(factory);
        return factory;
    }

    public S3ObjectLambda.AccessPointFactory WithS3ObjectLambdaAccessPoint(string resourceName = null, Action<Humidifier.S3ObjectLambda.AccessPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3ObjectLambda.AccessPointFactory(resourceName, resourceFactoryAction));
        S3ObjectLambdaAccessPointFactories.Add(factory);
        return factory;
    }

    public S3Outposts.AccessPointFactory WithS3OutpostsAccessPoint(string resourceName = null, Action<Humidifier.S3Outposts.AccessPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.AccessPointFactory(resourceName, resourceFactoryAction));
        S3OutpostsAccessPointFactories.Add(factory);
        return factory;
    }

    public EFS.FileSystemFactory WithEFSFileSystem(string resourceName = null, Action<Humidifier.EFS.FileSystem> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.FileSystemFactory(resourceName, resourceFactoryAction));
        EFSFileSystemFactories.Add(factory);
        return factory;
    }

    public FSx.FileSystemFactory WithFSxFileSystem(string resourceName = null, Action<Humidifier.FSx.FileSystem> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.FileSystemFactory(resourceName, resourceFactoryAction));
        FSxFileSystemFactories.Add(factory);
        return factory;
    }

    public EFS.MountTargetFactory WithMountTarget(string resourceName = null, Action<Humidifier.EFS.MountTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.MountTargetFactory(resourceName, resourceFactoryAction));
        MountTargetFactories.Add(factory);
        return factory;
    }

    public EKS.AccessEntryFactory WithAccessEntry(string resourceName = null, Action<Humidifier.EKS.AccessEntry> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.AccessEntryFactory(resourceName, resourceFactoryAction));
        AccessEntryFactories.Add(factory);
        return factory;
    }

    public EKS.AddonFactory WithAddon(string resourceName = null, Action<Humidifier.EKS.Addon> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.AddonFactory(resourceName, resourceFactoryAction));
        AddonFactories.Add(factory);
        return factory;
    }

    public EKS.FargateProfileFactory WithFargateProfile(string resourceName = null, Action<Humidifier.EKS.FargateProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.FargateProfileFactory(resourceName, resourceFactoryAction));
        FargateProfileFactories.Add(factory);
        return factory;
    }

    public EKS.IdentityProviderConfigFactory WithIdentityProviderConfig(string resourceName = null, Action<Humidifier.EKS.IdentityProviderConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.IdentityProviderConfigFactory(resourceName, resourceFactoryAction));
        IdentityProviderConfigFactories.Add(factory);
        return factory;
    }

    public EKS.NodegroupFactory WithNodegroup(string resourceName = null, Action<Humidifier.EKS.Nodegroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.NodegroupFactory(resourceName, resourceFactoryAction));
        NodegroupFactories.Add(factory);
        return factory;
    }

    public EKS.PodIdentityAssociationFactory WithPodIdentityAssociation(string resourceName = null, Action<Humidifier.EKS.PodIdentityAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.PodIdentityAssociationFactory(resourceName, resourceFactoryAction));
        PodIdentityAssociationFactories.Add(factory);
        return factory;
    }

    public EMR.InstanceFleetConfigFactory WithInstanceFleetConfig(string resourceName = null, Action<Humidifier.EMR.InstanceFleetConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.InstanceFleetConfigFactory(resourceName, resourceFactoryAction));
        InstanceFleetConfigFactories.Add(factory);
        return factory;
    }

    public EMR.InstanceGroupConfigFactory WithInstanceGroupConfig(string resourceName = null, Action<Humidifier.EMR.InstanceGroupConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.InstanceGroupConfigFactory(resourceName, resourceFactoryAction));
        InstanceGroupConfigFactories.Add(factory);
        return factory;
    }

    public EMR.SecurityConfigurationFactory WithEMRSecurityConfiguration(string resourceName = null, Action<Humidifier.EMR.SecurityConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.SecurityConfigurationFactory(resourceName, resourceFactoryAction));
        EMRSecurityConfigurationFactories.Add(factory);
        return factory;
    }

    public Glue.SecurityConfigurationFactory WithGlueSecurityConfiguration(string resourceName = null, Action<Humidifier.Glue.SecurityConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SecurityConfigurationFactory(resourceName, resourceFactoryAction));
        GlueSecurityConfigurationFactories.Add(factory);
        return factory;
    }

    public EMR.StepFactory WithStep(string resourceName = null, Action<Humidifier.EMR.Step> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StepFactory(resourceName, resourceFactoryAction));
        StepFactories.Add(factory);
        return factory;
    }

    public EMR.StudioFactory WithEMRStudio(string resourceName = null, Action<Humidifier.EMR.Studio> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StudioFactory(resourceName, resourceFactoryAction));
        EMRStudioFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StudioFactory WithNimbleStudioStudio(string resourceName = null, Action<Humidifier.NimbleStudio.Studio> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StudioFactory(resourceName, resourceFactoryAction));
        NimbleStudioStudioFactories.Add(factory);
        return factory;
    }

    public EMR.StudioSessionMappingFactory WithStudioSessionMapping(string resourceName = null, Action<Humidifier.EMR.StudioSessionMapping> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StudioSessionMappingFactory(resourceName, resourceFactoryAction));
        StudioSessionMappingFactories.Add(factory);
        return factory;
    }

    public EMR.WALWorkspaceFactory WithWALWorkspace(string resourceName = null, Action<Humidifier.EMR.WALWorkspace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.WALWorkspaceFactory(resourceName, resourceFactoryAction));
        WALWorkspaceFactories.Add(factory);
        return factory;
    }

    public EMRContainers.VirtualClusterFactory WithVirtualCluster(string resourceName = null, Action<Humidifier.EMRContainers.VirtualCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EMRContainers.VirtualClusterFactory(resourceName, resourceFactoryAction));
        VirtualClusterFactories.Add(factory);
        return factory;
    }

    public ElastiCache.CacheClusterFactory WithCacheCluster(string resourceName = null, Action<Humidifier.ElastiCache.CacheCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.CacheClusterFactory(resourceName, resourceFactoryAction));
        CacheClusterFactories.Add(factory);
        return factory;
    }

    public ElastiCache.GlobalReplicationGroupFactory WithGlobalReplicationGroup(string resourceName = null, Action<Humidifier.ElastiCache.GlobalReplicationGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.GlobalReplicationGroupFactory(resourceName, resourceFactoryAction));
        GlobalReplicationGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ReplicationGroupFactory WithReplicationGroup(string resourceName = null, Action<Humidifier.ElastiCache.ReplicationGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ReplicationGroupFactory(resourceName, resourceFactoryAction));
        ReplicationGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ServerlessCacheFactory WithServerlessCache(string resourceName = null, Action<Humidifier.ElastiCache.ServerlessCache> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ServerlessCacheFactory(resourceName, resourceFactoryAction));
        ServerlessCacheFactories.Add(factory);
        return factory;
    }

    public ElastiCache.UserGroupFactory WithUserGroup(string resourceName = null, Action<Humidifier.ElastiCache.UserGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.UserGroupFactory(resourceName, resourceFactoryAction));
        UserGroupFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ApplicationVersionFactory WithApplicationVersion(string resourceName = null, Action<Humidifier.ElasticBeanstalk.ApplicationVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ApplicationVersionFactory(resourceName, resourceFactoryAction));
        ApplicationVersionFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ConfigurationTemplateFactory WithConfigurationTemplate(string resourceName = null, Action<Humidifier.ElasticBeanstalk.ConfigurationTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ConfigurationTemplateFactory(resourceName, resourceFactoryAction));
        ConfigurationTemplateFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancing.LoadBalancerFactory WithElasticLoadBalancingLoadBalancer(string resourceName = null, Action<Humidifier.ElasticLoadBalancing.LoadBalancer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancing.LoadBalancerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingLoadBalancerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.LoadBalancerFactory WithElasticLoadBalancingV2LoadBalancer(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.LoadBalancer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.LoadBalancerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2LoadBalancerFactories.Add(factory);
        return factory;
    }

    public Lightsail.LoadBalancerFactory WithLightsailLoadBalancer(string resourceName = null, Action<Humidifier.Lightsail.LoadBalancer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.LoadBalancerFactory(resourceName, resourceFactoryAction));
        LightsailLoadBalancerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerFactory WithElasticLoadBalancingV2Listener(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.Listener> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2ListenerFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.ListenerFactory WithGlobalAcceleratorListener(string resourceName = null, Action<Humidifier.GlobalAccelerator.Listener> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.ListenerFactory(resourceName, resourceFactoryAction));
        GlobalAcceleratorListenerFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ListenerFactory WithVpcLatticeListener(string resourceName = null, Action<Humidifier.VpcLattice.Listener> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ListenerFactory(resourceName, resourceFactoryAction));
        VpcLatticeListenerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerCertificateFactory WithListenerCertificate(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.ListenerCertificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerCertificateFactory(resourceName, resourceFactoryAction));
        ListenerCertificateFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerRuleFactory WithListenerRule(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.ListenerRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerRuleFactory(resourceName, resourceFactoryAction));
        ListenerRuleFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TargetGroupFactory WithElasticLoadBalancingV2TargetGroup(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.TargetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TargetGroupFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2TargetGroupFactories.Add(factory);
        return factory;
    }

    public VpcLattice.TargetGroupFactory WithVpcLatticeTargetGroup(string resourceName = null, Action<Humidifier.VpcLattice.TargetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.TargetGroupFactory(resourceName, resourceFactoryAction));
        VpcLatticeTargetGroupFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TrustStoreFactory WithElasticLoadBalancingV2TrustStore(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.TrustStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TrustStoreFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2TrustStoreFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.TrustStoreFactory WithWorkSpacesWebTrustStore(string resourceName = null, Action<Humidifier.WorkSpacesWeb.TrustStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.TrustStoreFactory(resourceName, resourceFactoryAction));
        WorkSpacesWebTrustStoreFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TrustStoreRevocationFactory WithTrustStoreRevocation(string resourceName = null, Action<Humidifier.ElasticLoadBalancingV2.TrustStoreRevocation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TrustStoreRevocationFactory(resourceName, resourceFactoryAction));
        TrustStoreRevocationFactories.Add(factory);
        return factory;
    }

    public EntityResolution.IdMappingWorkflowFactory WithIdMappingWorkflow(string resourceName = null, Action<Humidifier.EntityResolution.IdMappingWorkflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.IdMappingWorkflowFactory(resourceName, resourceFactoryAction));
        IdMappingWorkflowFactories.Add(factory);
        return factory;
    }

    public EntityResolution.IdNamespaceFactory WithIdNamespace(string resourceName = null, Action<Humidifier.EntityResolution.IdNamespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.IdNamespaceFactory(resourceName, resourceFactoryAction));
        IdNamespaceFactories.Add(factory);
        return factory;
    }

    public EntityResolution.MatchingWorkflowFactory WithMatchingWorkflow(string resourceName = null, Action<Humidifier.EntityResolution.MatchingWorkflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.MatchingWorkflowFactory(resourceName, resourceFactoryAction));
        MatchingWorkflowFactories.Add(factory);
        return factory;
    }

    public EntityResolution.PolicyStatementFactory WithPolicyStatement(string resourceName = null, Action<Humidifier.EntityResolution.PolicyStatement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.PolicyStatementFactory(resourceName, resourceFactoryAction));
        PolicyStatementFactories.Add(factory);
        return factory;
    }

    public EntityResolution.SchemaMappingFactory WithSchemaMapping(string resourceName = null, Action<Humidifier.EntityResolution.SchemaMapping> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.SchemaMappingFactory(resourceName, resourceFactoryAction));
        SchemaMappingFactories.Add(factory);
        return factory;
    }

    public EventSchemas.DiscovererFactory WithDiscoverer(string resourceName = null, Action<Humidifier.EventSchemas.Discoverer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.DiscovererFactory(resourceName, resourceFactoryAction));
        DiscovererFactories.Add(factory);
        return factory;
    }

    public EventSchemas.RegistryFactory WithEventSchemasRegistry(string resourceName = null, Action<Humidifier.EventSchemas.Registry> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.RegistryFactory(resourceName, resourceFactoryAction));
        EventSchemasRegistryFactories.Add(factory);
        return factory;
    }

    public Glue.RegistryFactory WithGlueRegistry(string resourceName = null, Action<Humidifier.Glue.Registry> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.RegistryFactory(resourceName, resourceFactoryAction));
        GlueRegistryFactories.Add(factory);
        return factory;
    }

    public EventSchemas.SchemaFactory WithEventSchemasSchema(string resourceName = null, Action<Humidifier.EventSchemas.Schema> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.SchemaFactory(resourceName, resourceFactoryAction));
        EventSchemasSchemaFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaFactory WithGlueSchema(string resourceName = null, Action<Humidifier.Glue.Schema> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaFactory(resourceName, resourceFactoryAction));
        GlueSchemaFactories.Add(factory);
        return factory;
    }

    public Personalize.SchemaFactory WithPersonalizeSchema(string resourceName = null, Action<Humidifier.Personalize.Schema> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.SchemaFactory(resourceName, resourceFactoryAction));
        PersonalizeSchemaFactories.Add(factory);
        return factory;
    }

    public Events.ApiDestinationFactory WithApiDestination(string resourceName = null, Action<Humidifier.Events.ApiDestination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ApiDestinationFactory(resourceName, resourceFactoryAction));
        ApiDestinationFactories.Add(factory);
        return factory;
    }

    public Events.ArchiveFactory WithArchive(string resourceName = null, Action<Humidifier.Events.Archive> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ArchiveFactory(resourceName, resourceFactoryAction));
        ArchiveFactories.Add(factory);
        return factory;
    }

    public Events.EventBusFactory WithEventBus(string resourceName = null, Action<Humidifier.Events.EventBus> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EventBusFactory(resourceName, resourceFactoryAction));
        EventBusFactories.Add(factory);
        return factory;
    }

    public Events.EventBusPolicyFactory WithEventBusPolicy(string resourceName = null, Action<Humidifier.Events.EventBusPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EventBusPolicyFactory(resourceName, resourceFactoryAction));
        EventBusPolicyFactories.Add(factory);
        return factory;
    }

    public Evidently.ExperimentFactory WithExperiment(string resourceName = null, Action<Humidifier.Evidently.Experiment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.ExperimentFactory(resourceName, resourceFactoryAction));
        ExperimentFactories.Add(factory);
        return factory;
    }

    public Evidently.FeatureFactory WithFeature(string resourceName = null, Action<Humidifier.Evidently.Feature> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.FeatureFactory(resourceName, resourceFactoryAction));
        FeatureFactories.Add(factory);
        return factory;
    }

    public Evidently.LaunchFactory WithLaunch(string resourceName = null, Action<Humidifier.Evidently.Launch> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.LaunchFactory(resourceName, resourceFactoryAction));
        LaunchFactories.Add(factory);
        return factory;
    }

    public Evidently.SegmentFactory WithEvidentlySegment(string resourceName = null, Action<Humidifier.Evidently.Segment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.SegmentFactory(resourceName, resourceFactoryAction));
        EvidentlySegmentFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SegmentFactory WithPinpointSegment(string resourceName = null, Action<Humidifier.Pinpoint.Segment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SegmentFactory(resourceName, resourceFactoryAction));
        PinpointSegmentFactories.Add(factory);
        return factory;
    }

    public FIS.ExperimentTemplateFactory WithExperimentTemplate(string resourceName = null, Action<Humidifier.FIS.ExperimentTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FIS.ExperimentTemplateFactory(resourceName, resourceFactoryAction));
        ExperimentTemplateFactories.Add(factory);
        return factory;
    }

    public FIS.TargetAccountConfigurationFactory WithTargetAccountConfiguration(string resourceName = null, Action<Humidifier.FIS.TargetAccountConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FIS.TargetAccountConfigurationFactory(resourceName, resourceFactoryAction));
        TargetAccountConfigurationFactories.Add(factory);
        return factory;
    }

    public FMS.PolicyFactory WithFMSPolicy(string resourceName = null, Action<Humidifier.FMS.Policy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.PolicyFactory(resourceName, resourceFactoryAction));
        FMSPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.PolicyFactory WithIAMPolicy(string resourceName = null, Action<Humidifier.IAM.Policy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.PolicyFactory(resourceName, resourceFactoryAction));
        IAMPolicyFactories.Add(factory);
        return factory;
    }

    public IoT.PolicyFactory WithIoTPolicy(string resourceName = null, Action<Humidifier.IoT.Policy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.PolicyFactory(resourceName, resourceFactoryAction));
        IoTPolicyFactories.Add(factory);
        return factory;
    }

    public Organizations.PolicyFactory WithOrganizationsPolicy(string resourceName = null, Action<Humidifier.Organizations.Policy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.PolicyFactory(resourceName, resourceFactoryAction));
        OrganizationsPolicyFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyFactory WithVerifiedPermissionsPolicy(string resourceName = null, Action<Humidifier.VerifiedPermissions.Policy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyFactory(resourceName, resourceFactoryAction));
        VerifiedPermissionsPolicyFactories.Add(factory);
        return factory;
    }

    public FMS.ResourceSetFactory WithFMSResourceSet(string resourceName = null, Action<Humidifier.FMS.ResourceSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.ResourceSetFactory(resourceName, resourceFactoryAction));
        FMSResourceSetFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.ResourceSetFactory WithRoute53RecoveryReadinessResourceSet(string resourceName = null, Action<Humidifier.Route53RecoveryReadiness.ResourceSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.ResourceSetFactory(resourceName, resourceFactoryAction));
        Route53RecoveryReadinessResourceSetFactories.Add(factory);
        return factory;
    }

    public FSx.DataRepositoryAssociationFactory WithDataRepositoryAssociation(string resourceName = null, Action<Humidifier.FSx.DataRepositoryAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.DataRepositoryAssociationFactory(resourceName, resourceFactoryAction));
        DataRepositoryAssociationFactories.Add(factory);
        return factory;
    }

    public FSx.SnapshotFactory WithSnapshot(string resourceName = null, Action<Humidifier.FSx.Snapshot> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.SnapshotFactory(resourceName, resourceFactoryAction));
        SnapshotFactories.Add(factory);
        return factory;
    }

    public FSx.StorageVirtualMachineFactory WithStorageVirtualMachine(string resourceName = null, Action<Humidifier.FSx.StorageVirtualMachine> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.StorageVirtualMachineFactory(resourceName, resourceFactoryAction));
        StorageVirtualMachineFactories.Add(factory);
        return factory;
    }

    public Forecast.DatasetGroupFactory WithForecastDatasetGroup(string resourceName = null, Action<Humidifier.Forecast.DatasetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Forecast.DatasetGroupFactory(resourceName, resourceFactoryAction));
        ForecastDatasetGroupFactories.Add(factory);
        return factory;
    }

    public Personalize.DatasetGroupFactory WithPersonalizeDatasetGroup(string resourceName = null, Action<Humidifier.Personalize.DatasetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.DatasetGroupFactory(resourceName, resourceFactoryAction));
        PersonalizeDatasetGroupFactories.Add(factory);
        return factory;
    }

    public FraudDetector.DetectorFactory WithFraudDetectorDetector(string resourceName = null, Action<Humidifier.FraudDetector.Detector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.DetectorFactory(resourceName, resourceFactoryAction));
        FraudDetectorDetectorFactories.Add(factory);
        return factory;
    }

    public GuardDuty.DetectorFactory WithGuardDutyDetector(string resourceName = null, Action<Humidifier.GuardDuty.Detector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.DetectorFactory(resourceName, resourceFactoryAction));
        GuardDutyDetectorFactories.Add(factory);
        return factory;
    }

    public FraudDetector.EntityTypeFactory WithEntityType(string resourceName = null, Action<Humidifier.FraudDetector.EntityType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.EntityTypeFactory(resourceName, resourceFactoryAction));
        EntityTypeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.EventTypeFactory WithEventType(string resourceName = null, Action<Humidifier.FraudDetector.EventType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.EventTypeFactory(resourceName, resourceFactoryAction));
        EventTypeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.LabelFactory WithLabel(string resourceName = null, Action<Humidifier.FraudDetector.Label> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.LabelFactory(resourceName, resourceFactoryAction));
        LabelFactories.Add(factory);
        return factory;
    }

    public FraudDetector.ListFactory WithList(string resourceName = null, Action<Humidifier.FraudDetector.List> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.ListFactory(resourceName, resourceFactoryAction));
        ListFactories.Add(factory);
        return factory;
    }

    public FraudDetector.OutcomeFactory WithOutcome(string resourceName = null, Action<Humidifier.FraudDetector.Outcome> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.OutcomeFactory(resourceName, resourceFactoryAction));
        OutcomeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.VariableFactory WithVariable(string resourceName = null, Action<Humidifier.FraudDetector.Variable> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.VariableFactory(resourceName, resourceFactoryAction));
        VariableFactories.Add(factory);
        return factory;
    }

    public GameLift.AliasFactory WithGameLiftAlias(string resourceName = null, Action<Humidifier.GameLift.Alias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.AliasFactory(resourceName, resourceFactoryAction));
        GameLiftAliasFactories.Add(factory);
        return factory;
    }

    public KMS.AliasFactory WithKMSAlias(string resourceName = null, Action<Humidifier.KMS.Alias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.AliasFactory(resourceName, resourceFactoryAction));
        KMSAliasFactories.Add(factory);
        return factory;
    }

    public Lambda.AliasFactory WithLambdaAlias(string resourceName = null, Action<Humidifier.Lambda.Alias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.AliasFactory(resourceName, resourceFactoryAction));
        LambdaAliasFactories.Add(factory);
        return factory;
    }

    public PaymentCryptography.AliasFactory WithPaymentCryptographyAlias(string resourceName = null, Action<Humidifier.PaymentCryptography.Alias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PaymentCryptography.AliasFactory(resourceName, resourceFactoryAction));
        PaymentCryptographyAliasFactories.Add(factory);
        return factory;
    }

    public GameLift.BuildFactory WithBuild(string resourceName = null, Action<Humidifier.GameLift.Build> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.BuildFactory(resourceName, resourceFactoryAction));
        BuildFactories.Add(factory);
        return factory;
    }

    public GameLift.ContainerGroupDefinitionFactory WithContainerGroupDefinition(string resourceName = null, Action<Humidifier.GameLift.ContainerGroupDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.ContainerGroupDefinitionFactory(resourceName, resourceFactoryAction));
        ContainerGroupDefinitionFactories.Add(factory);
        return factory;
    }

    public GameLift.GameServerGroupFactory WithGameServerGroup(string resourceName = null, Action<Humidifier.GameLift.GameServerGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.GameServerGroupFactory(resourceName, resourceFactoryAction));
        GameServerGroupFactories.Add(factory);
        return factory;
    }

    public GameLift.GameSessionQueueFactory WithGameSessionQueue(string resourceName = null, Action<Humidifier.GameLift.GameSessionQueue> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.GameSessionQueueFactory(resourceName, resourceFactoryAction));
        GameSessionQueueFactories.Add(factory);
        return factory;
    }

    public GameLift.LocationFactory WithLocation(string resourceName = null, Action<Humidifier.GameLift.Location> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.LocationFactory(resourceName, resourceFactoryAction));
        LocationFactories.Add(factory);
        return factory;
    }

    public GameLift.MatchmakingConfigurationFactory WithMatchmakingConfiguration(string resourceName = null, Action<Humidifier.GameLift.MatchmakingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.MatchmakingConfigurationFactory(resourceName, resourceFactoryAction));
        MatchmakingConfigurationFactories.Add(factory);
        return factory;
    }

    public GameLift.MatchmakingRuleSetFactory WithMatchmakingRuleSet(string resourceName = null, Action<Humidifier.GameLift.MatchmakingRuleSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.MatchmakingRuleSetFactory(resourceName, resourceFactoryAction));
        MatchmakingRuleSetFactories.Add(factory);
        return factory;
    }

    public GameLift.ScriptFactory WithScript(string resourceName = null, Action<Humidifier.GameLift.Script> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.ScriptFactory(resourceName, resourceFactoryAction));
        ScriptFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.AcceleratorFactory WithAccelerator(string resourceName = null, Action<Humidifier.GlobalAccelerator.Accelerator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.AcceleratorFactory(resourceName, resourceFactoryAction));
        AcceleratorFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.CrossAccountAttachmentFactory WithCrossAccountAttachment(string resourceName = null, Action<Humidifier.GlobalAccelerator.CrossAccountAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.CrossAccountAttachmentFactory(resourceName, resourceFactoryAction));
        CrossAccountAttachmentFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.EndpointGroupFactory WithEndpointGroup(string resourceName = null, Action<Humidifier.GlobalAccelerator.EndpointGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.EndpointGroupFactory(resourceName, resourceFactoryAction));
        EndpointGroupFactories.Add(factory);
        return factory;
    }

    public Glue.ClassifierFactory WithClassifier(string resourceName = null, Action<Humidifier.Glue.Classifier> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.ClassifierFactory(resourceName, resourceFactoryAction));
        ClassifierFactories.Add(factory);
        return factory;
    }

    public Glue.CrawlerFactory WithCrawler(string resourceName = null, Action<Humidifier.Glue.Crawler> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.CrawlerFactory(resourceName, resourceFactoryAction));
        CrawlerFactories.Add(factory);
        return factory;
    }

    public Glue.CustomEntityTypeFactory WithCustomEntityType(string resourceName = null, Action<Humidifier.Glue.CustomEntityType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.CustomEntityTypeFactory(resourceName, resourceFactoryAction));
        CustomEntityTypeFactories.Add(factory);
        return factory;
    }

    public Glue.DataCatalogEncryptionSettingsFactory WithDataCatalogEncryptionSettings(string resourceName = null, Action<Humidifier.Glue.DataCatalogEncryptionSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DataCatalogEncryptionSettingsFactory(resourceName, resourceFactoryAction));
        DataCatalogEncryptionSettingsFactories.Add(factory);
        return factory;
    }

    public Glue.DataQualityRulesetFactory WithDataQualityRuleset(string resourceName = null, Action<Humidifier.Glue.DataQualityRuleset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DataQualityRulesetFactory(resourceName, resourceFactoryAction));
        DataQualityRulesetFactories.Add(factory);
        return factory;
    }

    public Glue.DatabaseFactory WithGlueDatabase(string resourceName = null, Action<Humidifier.Glue.Database> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DatabaseFactory(resourceName, resourceFactoryAction));
        GlueDatabaseFactories.Add(factory);
        return factory;
    }

    public Lightsail.DatabaseFactory WithLightsailDatabase(string resourceName = null, Action<Humidifier.Lightsail.Database> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DatabaseFactory(resourceName, resourceFactoryAction));
        LightsailDatabaseFactories.Add(factory);
        return factory;
    }

    public Timestream.DatabaseFactory WithTimestreamDatabase(string resourceName = null, Action<Humidifier.Timestream.Database> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.DatabaseFactory(resourceName, resourceFactoryAction));
        TimestreamDatabaseFactories.Add(factory);
        return factory;
    }

    public Glue.DevEndpointFactory WithDevEndpoint(string resourceName = null, Action<Humidifier.Glue.DevEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DevEndpointFactory(resourceName, resourceFactoryAction));
        DevEndpointFactories.Add(factory);
        return factory;
    }

    public Glue.MLTransformFactory WithMLTransform(string resourceName = null, Action<Humidifier.Glue.MLTransform> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.MLTransformFactory(resourceName, resourceFactoryAction));
        MLTransformFactories.Add(factory);
        return factory;
    }

    public Glue.PartitionFactory WithPartition(string resourceName = null, Action<Humidifier.Glue.Partition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.PartitionFactory(resourceName, resourceFactoryAction));
        PartitionFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaVersionFactory WithSchemaVersion(string resourceName = null, Action<Humidifier.Glue.SchemaVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaVersionFactory(resourceName, resourceFactoryAction));
        SchemaVersionFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaVersionMetadataFactory WithSchemaVersionMetadata(string resourceName = null, Action<Humidifier.Glue.SchemaVersionMetadata> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaVersionMetadataFactory(resourceName, resourceFactoryAction));
        SchemaVersionMetadataFactories.Add(factory);
        return factory;
    }

    public Glue.TableOptimizerFactory WithTableOptimizer(string resourceName = null, Action<Humidifier.Glue.TableOptimizer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TableOptimizerFactory(resourceName, resourceFactoryAction));
        TableOptimizerFactories.Add(factory);
        return factory;
    }

    public Glue.TriggerFactory WithTrigger(string resourceName = null, Action<Humidifier.Glue.Trigger> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TriggerFactory(resourceName, resourceFactoryAction));
        TriggerFactories.Add(factory);
        return factory;
    }

    public Glue.WorkflowFactory WithGlueWorkflow(string resourceName = null, Action<Humidifier.Glue.Workflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.WorkflowFactory(resourceName, resourceFactoryAction));
        GlueWorkflowFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.WorkflowFactory WithImageBuilderWorkflow(string resourceName = null, Action<Humidifier.ImageBuilder.Workflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.WorkflowFactory(resourceName, resourceFactoryAction));
        ImageBuilderWorkflowFactories.Add(factory);
        return factory;
    }

    public Omics.WorkflowFactory WithOmicsWorkflow(string resourceName = null, Action<Humidifier.Omics.Workflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.WorkflowFactory(resourceName, resourceFactoryAction));
        OmicsWorkflowFactories.Add(factory);
        return factory;
    }

    public Transfer.WorkflowFactory WithTransferWorkflow(string resourceName = null, Action<Humidifier.Transfer.Workflow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.WorkflowFactory(resourceName, resourceFactoryAction));
        TransferWorkflowFactories.Add(factory);
        return factory;
    }

    public Greengrass.ConnectorDefinitionFactory WithConnectorDefinition(string resourceName = null, Action<Humidifier.Greengrass.ConnectorDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ConnectorDefinitionFactory(resourceName, resourceFactoryAction));
        ConnectorDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ConnectorDefinitionVersionFactory WithConnectorDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.ConnectorDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ConnectorDefinitionVersionFactory(resourceName, resourceFactoryAction));
        ConnectorDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.CoreDefinitionFactory WithCoreDefinition(string resourceName = null, Action<Humidifier.Greengrass.CoreDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.CoreDefinitionFactory(resourceName, resourceFactoryAction));
        CoreDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.CoreDefinitionVersionFactory WithCoreDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.CoreDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.CoreDefinitionVersionFactory(resourceName, resourceFactoryAction));
        CoreDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.DeviceDefinitionFactory WithDeviceDefinition(string resourceName = null, Action<Humidifier.Greengrass.DeviceDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.DeviceDefinitionFactory(resourceName, resourceFactoryAction));
        DeviceDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.DeviceDefinitionVersionFactory WithDeviceDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.DeviceDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.DeviceDefinitionVersionFactory(resourceName, resourceFactoryAction));
        DeviceDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.FunctionDefinitionFactory WithFunctionDefinition(string resourceName = null, Action<Humidifier.Greengrass.FunctionDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.FunctionDefinitionFactory(resourceName, resourceFactoryAction));
        FunctionDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.FunctionDefinitionVersionFactory WithFunctionDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.FunctionDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.FunctionDefinitionVersionFactory(resourceName, resourceFactoryAction));
        FunctionDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.GroupFactory WithGreengrassGroup(string resourceName = null, Action<Humidifier.Greengrass.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.GroupFactory(resourceName, resourceFactoryAction));
        GreengrassGroupFactories.Add(factory);
        return factory;
    }

    public IAM.GroupFactory WithIAMGroup(string resourceName = null, Action<Humidifier.IAM.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.GroupFactory(resourceName, resourceFactoryAction));
        IAMGroupFactories.Add(factory);
        return factory;
    }

    public IdentityStore.GroupFactory WithIdentityStoreGroup(string resourceName = null, Action<Humidifier.IdentityStore.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IdentityStore.GroupFactory(resourceName, resourceFactoryAction));
        IdentityStoreGroupFactories.Add(factory);
        return factory;
    }

    public ResourceGroups.GroupFactory WithResourceGroupsGroup(string resourceName = null, Action<Humidifier.ResourceGroups.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceGroups.GroupFactory(resourceName, resourceFactoryAction));
        ResourceGroupsGroupFactories.Add(factory);
        return factory;
    }

    public Synthetics.GroupFactory WithSyntheticsGroup(string resourceName = null, Action<Humidifier.Synthetics.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Synthetics.GroupFactory(resourceName, resourceFactoryAction));
        SyntheticsGroupFactories.Add(factory);
        return factory;
    }

    public XRay.GroupFactory WithXRayGroup(string resourceName = null, Action<Humidifier.XRay.Group> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.GroupFactory(resourceName, resourceFactoryAction));
        XRayGroupFactories.Add(factory);
        return factory;
    }

    public Greengrass.GroupVersionFactory WithGroupVersion(string resourceName = null, Action<Humidifier.Greengrass.GroupVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.GroupVersionFactory(resourceName, resourceFactoryAction));
        GroupVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.LoggerDefinitionFactory WithLoggerDefinition(string resourceName = null, Action<Humidifier.Greengrass.LoggerDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.LoggerDefinitionFactory(resourceName, resourceFactoryAction));
        LoggerDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.LoggerDefinitionVersionFactory WithLoggerDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.LoggerDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.LoggerDefinitionVersionFactory(resourceName, resourceFactoryAction));
        LoggerDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ResourceDefinitionFactory WithResourceDefinition(string resourceName = null, Action<Humidifier.Greengrass.ResourceDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ResourceDefinitionFactory(resourceName, resourceFactoryAction));
        ResourceDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ResourceDefinitionVersionFactory WithResourceDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.ResourceDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ResourceDefinitionVersionFactory(resourceName, resourceFactoryAction));
        ResourceDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.SubscriptionDefinitionFactory WithSubscriptionDefinition(string resourceName = null, Action<Humidifier.Greengrass.SubscriptionDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.SubscriptionDefinitionFactory(resourceName, resourceFactoryAction));
        SubscriptionDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.SubscriptionDefinitionVersionFactory WithSubscriptionDefinitionVersion(string resourceName = null, Action<Humidifier.Greengrass.SubscriptionDefinitionVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.SubscriptionDefinitionVersionFactory(resourceName, resourceFactoryAction));
        SubscriptionDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public GreengrassV2.ComponentVersionFactory WithComponentVersion(string resourceName = null, Action<Humidifier.GreengrassV2.ComponentVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GreengrassV2.ComponentVersionFactory(resourceName, resourceFactoryAction));
        ComponentVersionFactories.Add(factory);
        return factory;
    }

    public GroundStation.ConfigFactory WithConfig(string resourceName = null, Action<Humidifier.GroundStation.Config> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.ConfigFactory(resourceName, resourceFactoryAction));
        ConfigFactories.Add(factory);
        return factory;
    }

    public GroundStation.DataflowEndpointGroupFactory WithDataflowEndpointGroup(string resourceName = null, Action<Humidifier.GroundStation.DataflowEndpointGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.DataflowEndpointGroupFactory(resourceName, resourceFactoryAction));
        DataflowEndpointGroupFactories.Add(factory);
        return factory;
    }

    public GroundStation.MissionProfileFactory WithMissionProfile(string resourceName = null, Action<Humidifier.GroundStation.MissionProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.MissionProfileFactory(resourceName, resourceFactoryAction));
        MissionProfileFactories.Add(factory);
        return factory;
    }

    public GuardDuty.FilterFactory WithGuardDutyFilter(string resourceName = null, Action<Humidifier.GuardDuty.Filter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.FilterFactory(resourceName, resourceFactoryAction));
        GuardDutyFilterFactories.Add(factory);
        return factory;
    }

    public InspectorV2.FilterFactory WithInspectorV2Filter(string resourceName = null, Action<Humidifier.InspectorV2.Filter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new InspectorV2.FilterFactory(resourceName, resourceFactoryAction));
        InspectorV2FilterFactories.Add(factory);
        return factory;
    }

    public GuardDuty.IPSetFactory WithGuardDutyIPSet(string resourceName = null, Action<Humidifier.GuardDuty.IPSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.IPSetFactory(resourceName, resourceFactoryAction));
        GuardDutyIPSetFactories.Add(factory);
        return factory;
    }

    public WAF.IPSetFactory WithWAFIPSet(string resourceName = null, Action<Humidifier.WAF.IPSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.IPSetFactory(resourceName, resourceFactoryAction));
        WAFIPSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.IPSetFactory WithWAFRegionalIPSet(string resourceName = null, Action<Humidifier.WAFRegional.IPSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.IPSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalIPSetFactories.Add(factory);
        return factory;
    }

    public WAFv2.IPSetFactory WithWAFv2IPSet(string resourceName = null, Action<Humidifier.WAFv2.IPSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.IPSetFactory(resourceName, resourceFactoryAction));
        WAFv2IPSetFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MalwareProtectionPlanFactory WithMalwareProtectionPlan(string resourceName = null, Action<Humidifier.GuardDuty.MalwareProtectionPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MalwareProtectionPlanFactory(resourceName, resourceFactoryAction));
        MalwareProtectionPlanFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MasterFactory WithMaster(string resourceName = null, Action<Humidifier.GuardDuty.Master> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MasterFactory(resourceName, resourceFactoryAction));
        MasterFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MemberFactory WithGuardDutyMember(string resourceName = null, Action<Humidifier.GuardDuty.Member> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MemberFactory(resourceName, resourceFactoryAction));
        GuardDutyMemberFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.MemberFactory WithManagedBlockchainMember(string resourceName = null, Action<Humidifier.ManagedBlockchain.Member> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.MemberFactory(resourceName, resourceFactoryAction));
        ManagedBlockchainMemberFactories.Add(factory);
        return factory;
    }

    public GuardDuty.ThreatIntelSetFactory WithThreatIntelSet(string resourceName = null, Action<Humidifier.GuardDuty.ThreatIntelSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.ThreatIntelSetFactory(resourceName, resourceFactoryAction));
        ThreatIntelSetFactories.Add(factory);
        return factory;
    }

    public HealthImaging.DatastoreFactory WithHealthImagingDatastore(string resourceName = null, Action<Humidifier.HealthImaging.Datastore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new HealthImaging.DatastoreFactory(resourceName, resourceFactoryAction));
        HealthImagingDatastoreFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.DatastoreFactory WithIoTAnalyticsDatastore(string resourceName = null, Action<Humidifier.IoTAnalytics.Datastore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.DatastoreFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsDatastoreFactories.Add(factory);
        return factory;
    }

    public HealthLake.FHIRDatastoreFactory WithFHIRDatastore(string resourceName = null, Action<Humidifier.HealthLake.FHIRDatastore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new HealthLake.FHIRDatastoreFactory(resourceName, resourceFactoryAction));
        FHIRDatastoreFactories.Add(factory);
        return factory;
    }

    public IAM.AccessKeyFactory WithAccessKey(string resourceName = null, Action<Humidifier.IAM.AccessKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.AccessKeyFactory(resourceName, resourceFactoryAction));
        AccessKeyFactories.Add(factory);
        return factory;
    }

    public IAM.GroupPolicyFactory WithGroupPolicy(string resourceName = null, Action<Humidifier.IAM.GroupPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.GroupPolicyFactory(resourceName, resourceFactoryAction));
        GroupPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.ManagedPolicyFactory WithManagedPolicy(string resourceName = null, Action<Humidifier.IAM.ManagedPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ManagedPolicyFactory(resourceName, resourceFactoryAction));
        ManagedPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.OIDCProviderFactory WithOIDCProvider(string resourceName = null, Action<Humidifier.IAM.OIDCProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.OIDCProviderFactory(resourceName, resourceFactoryAction));
        OIDCProviderFactories.Add(factory);
        return factory;
    }

    public IAM.RoleFactory WithRole(string resourceName = null, Action<Humidifier.IAM.Role> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.RoleFactory(resourceName, resourceFactoryAction));
        RoleFactories.Add(factory);
        return factory;
    }

    public IAM.RolePolicyFactory WithRolePolicy(string resourceName = null, Action<Humidifier.IAM.RolePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.RolePolicyFactory(resourceName, resourceFactoryAction));
        RolePolicyFactories.Add(factory);
        return factory;
    }

    public IAM.SAMLProviderFactory WithSAMLProvider(string resourceName = null, Action<Humidifier.IAM.SAMLProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.SAMLProviderFactory(resourceName, resourceFactoryAction));
        SAMLProviderFactories.Add(factory);
        return factory;
    }

    public IAM.ServerCertificateFactory WithServerCertificate(string resourceName = null, Action<Humidifier.IAM.ServerCertificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ServerCertificateFactory(resourceName, resourceFactoryAction));
        ServerCertificateFactories.Add(factory);
        return factory;
    }

    public IAM.ServiceLinkedRoleFactory WithServiceLinkedRole(string resourceName = null, Action<Humidifier.IAM.ServiceLinkedRole> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ServiceLinkedRoleFactory(resourceName, resourceFactoryAction));
        ServiceLinkedRoleFactories.Add(factory);
        return factory;
    }

    public IAM.UserPolicyFactory WithUserPolicy(string resourceName = null, Action<Humidifier.IAM.UserPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserPolicyFactory(resourceName, resourceFactoryAction));
        UserPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.UserToGroupAdditionFactory WithUserToGroupAddition(string resourceName = null, Action<Humidifier.IAM.UserToGroupAddition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserToGroupAdditionFactory(resourceName, resourceFactoryAction));
        UserToGroupAdditionFactories.Add(factory);
        return factory;
    }

    public IAM.VirtualMFADeviceFactory WithVirtualMFADevice(string resourceName = null, Action<Humidifier.IAM.VirtualMFADevice> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.VirtualMFADeviceFactory(resourceName, resourceFactoryAction));
        VirtualMFADeviceFactories.Add(factory);
        return factory;
    }

    public IVS.EncoderConfigurationFactory WithEncoderConfiguration(string resourceName = null, Action<Humidifier.IVS.EncoderConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.EncoderConfigurationFactory(resourceName, resourceFactoryAction));
        EncoderConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.PlaybackKeyPairFactory WithPlaybackKeyPair(string resourceName = null, Action<Humidifier.IVS.PlaybackKeyPair> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PlaybackKeyPairFactory(resourceName, resourceFactoryAction));
        PlaybackKeyPairFactories.Add(factory);
        return factory;
    }

    public IVS.PlaybackRestrictionPolicyFactory WithPlaybackRestrictionPolicy(string resourceName = null, Action<Humidifier.IVS.PlaybackRestrictionPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PlaybackRestrictionPolicyFactory(resourceName, resourceFactoryAction));
        PlaybackRestrictionPolicyFactories.Add(factory);
        return factory;
    }

    public IVS.RecordingConfigurationFactory WithRecordingConfiguration(string resourceName = null, Action<Humidifier.IVS.RecordingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.RecordingConfigurationFactory(resourceName, resourceFactoryAction));
        RecordingConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.StorageConfigurationFactory WithStorageConfiguration(string resourceName = null, Action<Humidifier.IVS.StorageConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StorageConfigurationFactory(resourceName, resourceFactoryAction));
        StorageConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.StreamKeyFactory WithStreamKey(string resourceName = null, Action<Humidifier.IVS.StreamKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StreamKeyFactory(resourceName, resourceFactoryAction));
        StreamKeyFactories.Add(factory);
        return factory;
    }

    public IVSChat.LoggingConfigurationFactory WithIVSChatLoggingConfiguration(string resourceName = null, Action<Humidifier.IVSChat.LoggingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVSChat.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        IVSChatLoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.LoggingConfigurationFactory WithNetworkFirewallLoggingConfiguration(string resourceName = null, Action<Humidifier.NetworkFirewall.LoggingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        NetworkFirewallLoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public WAFv2.LoggingConfigurationFactory WithWAFv2LoggingConfiguration(string resourceName = null, Action<Humidifier.WAFv2.LoggingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        WAFv2LoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public IVSChat.RoomFactory WithRoom(string resourceName = null, Action<Humidifier.IVSChat.Room> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IVSChat.RoomFactory(resourceName, resourceFactoryAction));
        RoomFactories.Add(factory);
        return factory;
    }

    public IdentityStore.GroupMembershipFactory WithGroupMembership(string resourceName = null, Action<Humidifier.IdentityStore.GroupMembership> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IdentityStore.GroupMembershipFactory(resourceName, resourceFactoryAction));
        GroupMembershipFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ContainerRecipeFactory WithContainerRecipe(string resourceName = null, Action<Humidifier.ImageBuilder.ContainerRecipe> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ContainerRecipeFactory(resourceName, resourceFactoryAction));
        ContainerRecipeFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.DistributionConfigurationFactory WithDistributionConfiguration(string resourceName = null, Action<Humidifier.ImageBuilder.DistributionConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.DistributionConfigurationFactory(resourceName, resourceFactoryAction));
        DistributionConfigurationFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImageFactory WithImageBuilderImage(string resourceName = null, Action<Humidifier.ImageBuilder.Image> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImageFactory(resourceName, resourceFactoryAction));
        ImageBuilderImageFactories.Add(factory);
        return factory;
    }

    public SageMaker.ImageFactory WithSageMakerImage(string resourceName = null, Action<Humidifier.SageMaker.Image> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ImageFactory(resourceName, resourceFactoryAction));
        SageMakerImageFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImagePipelineFactory WithImagePipeline(string resourceName = null, Action<Humidifier.ImageBuilder.ImagePipeline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImagePipelineFactory(resourceName, resourceFactoryAction));
        ImagePipelineFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImageRecipeFactory WithImageRecipe(string resourceName = null, Action<Humidifier.ImageBuilder.ImageRecipe> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImageRecipeFactory(resourceName, resourceFactoryAction));
        ImageRecipeFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.InfrastructureConfigurationFactory WithInfrastructureConfiguration(string resourceName = null, Action<Humidifier.ImageBuilder.InfrastructureConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.InfrastructureConfigurationFactory(resourceName, resourceFactoryAction));
        InfrastructureConfigurationFactories.Add(factory);
        return factory;
    }

    public Inspector.AssessmentTargetFactory WithAssessmentTarget(string resourceName = null, Action<Humidifier.Inspector.AssessmentTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.AssessmentTargetFactory(resourceName, resourceFactoryAction));
        AssessmentTargetFactories.Add(factory);
        return factory;
    }

    public Inspector.AssessmentTemplateFactory WithAssessmentTemplate(string resourceName = null, Action<Humidifier.Inspector.AssessmentTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.AssessmentTemplateFactory(resourceName, resourceFactoryAction));
        AssessmentTemplateFactories.Add(factory);
        return factory;
    }

    public Inspector.ResourceGroupFactory WithResourceGroup(string resourceName = null, Action<Humidifier.Inspector.ResourceGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.ResourceGroupFactory(resourceName, resourceFactoryAction));
        ResourceGroupFactories.Add(factory);
        return factory;
    }

    public InspectorV2.CisScanConfigurationFactory WithCisScanConfiguration(string resourceName = null, Action<Humidifier.InspectorV2.CisScanConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new InspectorV2.CisScanConfigurationFactory(resourceName, resourceFactoryAction));
        CisScanConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT1Click.DeviceFactory WithIoT1ClickDevice(string resourceName = null, Action<Humidifier.IoT1Click.Device> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.DeviceFactory(resourceName, resourceFactoryAction));
        IoT1ClickDeviceFactories.Add(factory);
        return factory;
    }

    public NetworkManager.DeviceFactory WithNetworkManagerDevice(string resourceName = null, Action<Humidifier.NetworkManager.Device> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.DeviceFactory(resourceName, resourceFactoryAction));
        NetworkManagerDeviceFactories.Add(factory);
        return factory;
    }

    public SageMaker.DeviceFactory WithSageMakerDevice(string resourceName = null, Action<Humidifier.SageMaker.Device> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DeviceFactory(resourceName, resourceFactoryAction));
        SageMakerDeviceFactories.Add(factory);
        return factory;
    }

    public IoT1Click.PlacementFactory WithPlacement(string resourceName = null, Action<Humidifier.IoT1Click.Placement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.PlacementFactory(resourceName, resourceFactoryAction));
        PlacementFactories.Add(factory);
        return factory;
    }

    public IoT.AccountAuditConfigurationFactory WithAccountAuditConfiguration(string resourceName = null, Action<Humidifier.IoT.AccountAuditConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.AccountAuditConfigurationFactory(resourceName, resourceFactoryAction));
        AccountAuditConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT.CACertificateFactory WithCACertificate(string resourceName = null, Action<Humidifier.IoT.CACertificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CACertificateFactory(resourceName, resourceFactoryAction));
        CACertificateFactories.Add(factory);
        return factory;
    }

    public IoT.CertificateProviderFactory WithCertificateProvider(string resourceName = null, Action<Humidifier.IoT.CertificateProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CertificateProviderFactory(resourceName, resourceFactoryAction));
        CertificateProviderFactories.Add(factory);
        return factory;
    }

    public IoT.CustomMetricFactory WithCustomMetric(string resourceName = null, Action<Humidifier.IoT.CustomMetric> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CustomMetricFactory(resourceName, resourceFactoryAction));
        CustomMetricFactories.Add(factory);
        return factory;
    }

    public IoT.DimensionFactory WithDimension(string resourceName = null, Action<Humidifier.IoT.Dimension> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.DimensionFactory(resourceName, resourceFactoryAction));
        DimensionFactories.Add(factory);
        return factory;
    }

    public IoT.DomainConfigurationFactory WithDomainConfiguration(string resourceName = null, Action<Humidifier.IoT.DomainConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.DomainConfigurationFactory(resourceName, resourceFactoryAction));
        DomainConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT.FleetMetricFactory WithFleetMetric(string resourceName = null, Action<Humidifier.IoT.FleetMetric> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.FleetMetricFactory(resourceName, resourceFactoryAction));
        FleetMetricFactories.Add(factory);
        return factory;
    }

    public IoT.JobTemplateFactory WithIoTJobTemplate(string resourceName = null, Action<Humidifier.IoT.JobTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.JobTemplateFactory(resourceName, resourceFactoryAction));
        IoTJobTemplateFactories.Add(factory);
        return factory;
    }

    public MediaConvert.JobTemplateFactory WithMediaConvertJobTemplate(string resourceName = null, Action<Humidifier.MediaConvert.JobTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.JobTemplateFactory(resourceName, resourceFactoryAction));
        MediaConvertJobTemplateFactories.Add(factory);
        return factory;
    }

    public IoT.LoggingFactory WithLogging(string resourceName = null, Action<Humidifier.IoT.Logging> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.LoggingFactory(resourceName, resourceFactoryAction));
        LoggingFactories.Add(factory);
        return factory;
    }

    public IoT.MitigationActionFactory WithMitigationAction(string resourceName = null, Action<Humidifier.IoT.MitigationAction> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.MitigationActionFactory(resourceName, resourceFactoryAction));
        MitigationActionFactories.Add(factory);
        return factory;
    }

    public IoT.PolicyPrincipalAttachmentFactory WithPolicyPrincipalAttachment(string resourceName = null, Action<Humidifier.IoT.PolicyPrincipalAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.PolicyPrincipalAttachmentFactory(resourceName, resourceFactoryAction));
        PolicyPrincipalAttachmentFactories.Add(factory);
        return factory;
    }

    public IoT.ProvisioningTemplateFactory WithProvisioningTemplate(string resourceName = null, Action<Humidifier.IoT.ProvisioningTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ProvisioningTemplateFactory(resourceName, resourceFactoryAction));
        ProvisioningTemplateFactories.Add(factory);
        return factory;
    }

    public IoT.ResourceSpecificLoggingFactory WithResourceSpecificLogging(string resourceName = null, Action<Humidifier.IoT.ResourceSpecificLogging> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ResourceSpecificLoggingFactory(resourceName, resourceFactoryAction));
        ResourceSpecificLoggingFactories.Add(factory);
        return factory;
    }

    public IoT.RoleAliasFactory WithRoleAlias(string resourceName = null, Action<Humidifier.IoT.RoleAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.RoleAliasFactory(resourceName, resourceFactoryAction));
        RoleAliasFactories.Add(factory);
        return factory;
    }

    public IoT.ScheduledAuditFactory WithScheduledAudit(string resourceName = null, Action<Humidifier.IoT.ScheduledAudit> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ScheduledAuditFactory(resourceName, resourceFactoryAction));
        ScheduledAuditFactories.Add(factory);
        return factory;
    }

    public IoT.SoftwarePackageFactory WithSoftwarePackage(string resourceName = null, Action<Humidifier.IoT.SoftwarePackage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SoftwarePackageFactory(resourceName, resourceFactoryAction));
        SoftwarePackageFactories.Add(factory);
        return factory;
    }

    public IoT.SoftwarePackageVersionFactory WithSoftwarePackageVersion(string resourceName = null, Action<Humidifier.IoT.SoftwarePackageVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SoftwarePackageVersionFactory(resourceName, resourceFactoryAction));
        SoftwarePackageVersionFactories.Add(factory);
        return factory;
    }

    public IoT.ThingFactory WithThing(string resourceName = null, Action<Humidifier.IoT.Thing> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingFactory(resourceName, resourceFactoryAction));
        ThingFactories.Add(factory);
        return factory;
    }

    public IoT.ThingGroupFactory WithThingGroup(string resourceName = null, Action<Humidifier.IoT.ThingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingGroupFactory(resourceName, resourceFactoryAction));
        ThingGroupFactories.Add(factory);
        return factory;
    }

    public IoT.ThingPrincipalAttachmentFactory WithThingPrincipalAttachment(string resourceName = null, Action<Humidifier.IoT.ThingPrincipalAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingPrincipalAttachmentFactory(resourceName, resourceFactoryAction));
        ThingPrincipalAttachmentFactories.Add(factory);
        return factory;
    }

    public IoT.ThingTypeFactory WithThingType(string resourceName = null, Action<Humidifier.IoT.ThingType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingTypeFactory(resourceName, resourceFactoryAction));
        ThingTypeFactories.Add(factory);
        return factory;
    }

    public IoT.TopicRuleFactory WithTopicRule(string resourceName = null, Action<Humidifier.IoT.TopicRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.TopicRuleFactory(resourceName, resourceFactoryAction));
        TopicRuleFactories.Add(factory);
        return factory;
    }

    public IoT.TopicRuleDestinationFactory WithTopicRuleDestination(string resourceName = null, Action<Humidifier.IoT.TopicRuleDestination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.TopicRuleDestinationFactory(resourceName, resourceFactoryAction));
        TopicRuleDestinationFactories.Add(factory);
        return factory;
    }

    public IoTCoreDeviceAdvisor.SuiteDefinitionFactory WithSuiteDefinition(string resourceName = null, Action<Humidifier.IoTCoreDeviceAdvisor.SuiteDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTCoreDeviceAdvisor.SuiteDefinitionFactory(resourceName, resourceFactoryAction));
        SuiteDefinitionFactories.Add(factory);
        return factory;
    }

    public IoTEvents.AlarmModelFactory WithAlarmModel(string resourceName = null, Action<Humidifier.IoTEvents.AlarmModel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.AlarmModelFactory(resourceName, resourceFactoryAction));
        AlarmModelFactories.Add(factory);
        return factory;
    }

    public IoTEvents.DetectorModelFactory WithDetectorModel(string resourceName = null, Action<Humidifier.IoTEvents.DetectorModel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.DetectorModelFactory(resourceName, resourceFactoryAction));
        DetectorModelFactories.Add(factory);
        return factory;
    }

    public IoTEvents.InputFactory WithIoTEventsInput(string resourceName = null, Action<Humidifier.IoTEvents.Input> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.InputFactory(resourceName, resourceFactoryAction));
        IoTEventsInputFactories.Add(factory);
        return factory;
    }

    public MediaLive.InputFactory WithMediaLiveInput(string resourceName = null, Action<Humidifier.MediaLive.Input> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.InputFactory(resourceName, resourceFactoryAction));
        MediaLiveInputFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.DecoderManifestFactory WithDecoderManifest(string resourceName = null, Action<Humidifier.IoTFleetWise.DecoderManifest> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.DecoderManifestFactory(resourceName, resourceFactoryAction));
        DecoderManifestFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.ModelManifestFactory WithModelManifest(string resourceName = null, Action<Humidifier.IoTFleetWise.ModelManifest> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.ModelManifestFactory(resourceName, resourceFactoryAction));
        ModelManifestFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.SignalCatalogFactory WithSignalCatalog(string resourceName = null, Action<Humidifier.IoTFleetWise.SignalCatalog> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.SignalCatalogFactory(resourceName, resourceFactoryAction));
        SignalCatalogFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.VehicleFactory WithVehicle(string resourceName = null, Action<Humidifier.IoTFleetWise.Vehicle> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.VehicleFactory(resourceName, resourceFactoryAction));
        VehicleFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AccessPolicyFactory WithIoTSiteWiseAccessPolicy(string resourceName = null, Action<Humidifier.IoTSiteWise.AccessPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AccessPolicyFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseAccessPolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.AccessPolicyFactory WithOpenSearchServerlessAccessPolicy(string resourceName = null, Action<Humidifier.OpenSearchServerless.AccessPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.AccessPolicyFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessAccessPolicyFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AssetFactory WithIoTSiteWiseAsset(string resourceName = null, Action<Humidifier.IoTSiteWise.Asset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AssetFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseAssetFactories.Add(factory);
        return factory;
    }

    public MediaPackage.AssetFactory WithMediaPackageAsset(string resourceName = null, Action<Humidifier.MediaPackage.Asset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.AssetFactory(resourceName, resourceFactoryAction));
        MediaPackageAssetFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AssetModelFactory WithAssetModel(string resourceName = null, Action<Humidifier.IoTSiteWise.AssetModel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AssetModelFactory(resourceName, resourceFactoryAction));
        AssetModelFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.GatewayFactory WithIoTSiteWiseGateway(string resourceName = null, Action<Humidifier.IoTSiteWise.Gateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.GatewayFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseGatewayFactories.Add(factory);
        return factory;
    }

    public MediaConnect.GatewayFactory WithMediaConnectGateway(string resourceName = null, Action<Humidifier.MediaConnect.Gateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.GatewayFactory(resourceName, resourceFactoryAction));
        MediaConnectGatewayFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.PortalFactory WithIoTSiteWisePortal(string resourceName = null, Action<Humidifier.IoTSiteWise.Portal> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.PortalFactory(resourceName, resourceFactoryAction));
        IoTSiteWisePortalFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.PortalFactory WithWorkSpacesWebPortal(string resourceName = null, Action<Humidifier.WorkSpacesWeb.Portal> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.PortalFactory(resourceName, resourceFactoryAction));
        WorkSpacesWebPortalFactories.Add(factory);
        return factory;
    }

    public IoTThingsGraph.FlowTemplateFactory WithFlowTemplate(string resourceName = null, Action<Humidifier.IoTThingsGraph.FlowTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTThingsGraph.FlowTemplateFactory(resourceName, resourceFactoryAction));
        FlowTemplateFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.ComponentTypeFactory WithComponentType(string resourceName = null, Action<Humidifier.IoTTwinMaker.ComponentType> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.ComponentTypeFactory(resourceName, resourceFactoryAction));
        ComponentTypeFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.EntityFactory WithEntity(string resourceName = null, Action<Humidifier.IoTTwinMaker.Entity> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.EntityFactory(resourceName, resourceFactoryAction));
        EntityFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.SceneFactory WithScene(string resourceName = null, Action<Humidifier.IoTTwinMaker.Scene> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.SceneFactory(resourceName, resourceFactoryAction));
        SceneFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.SyncJobFactory WithSyncJob(string resourceName = null, Action<Humidifier.IoTTwinMaker.SyncJob> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.SyncJobFactory(resourceName, resourceFactoryAction));
        SyncJobFactories.Add(factory);
        return factory;
    }

    public IoTWireless.DestinationFactory WithIoTWirelessDestination(string resourceName = null, Action<Humidifier.IoTWireless.Destination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.DestinationFactory(resourceName, resourceFactoryAction));
        IoTWirelessDestinationFactories.Add(factory);
        return factory;
    }

    public Logs.DestinationFactory WithLogsDestination(string resourceName = null, Action<Humidifier.Logs.Destination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DestinationFactory(resourceName, resourceFactoryAction));
        LogsDestinationFactories.Add(factory);
        return factory;
    }

    public IoTWireless.DeviceProfileFactory WithDeviceProfile(string resourceName = null, Action<Humidifier.IoTWireless.DeviceProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.DeviceProfileFactory(resourceName, resourceFactoryAction));
        DeviceProfileFactories.Add(factory);
        return factory;
    }

    public IoTWireless.FuotaTaskFactory WithFuotaTask(string resourceName = null, Action<Humidifier.IoTWireless.FuotaTask> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.FuotaTaskFactory(resourceName, resourceFactoryAction));
        FuotaTaskFactories.Add(factory);
        return factory;
    }

    public IoTWireless.MulticastGroupFactory WithMulticastGroup(string resourceName = null, Action<Humidifier.IoTWireless.MulticastGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.MulticastGroupFactory(resourceName, resourceFactoryAction));
        MulticastGroupFactories.Add(factory);
        return factory;
    }

    public IoTWireless.NetworkAnalyzerConfigurationFactory WithNetworkAnalyzerConfiguration(string resourceName = null, Action<Humidifier.IoTWireless.NetworkAnalyzerConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.NetworkAnalyzerConfigurationFactory(resourceName, resourceFactoryAction));
        NetworkAnalyzerConfigurationFactories.Add(factory);
        return factory;
    }

    public IoTWireless.PartnerAccountFactory WithPartnerAccount(string resourceName = null, Action<Humidifier.IoTWireless.PartnerAccount> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.PartnerAccountFactory(resourceName, resourceFactoryAction));
        PartnerAccountFactories.Add(factory);
        return factory;
    }

    public IoTWireless.ServiceProfileFactory WithServiceProfile(string resourceName = null, Action<Humidifier.IoTWireless.ServiceProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.ServiceProfileFactory(resourceName, resourceFactoryAction));
        ServiceProfileFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessDeviceFactory WithWirelessDevice(string resourceName = null, Action<Humidifier.IoTWireless.WirelessDevice> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessDeviceFactory(resourceName, resourceFactoryAction));
        WirelessDeviceFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessDeviceImportTaskFactory WithWirelessDeviceImportTask(string resourceName = null, Action<Humidifier.IoTWireless.WirelessDeviceImportTask> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessDeviceImportTaskFactory(resourceName, resourceFactoryAction));
        WirelessDeviceImportTaskFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessGatewayFactory WithWirelessGateway(string resourceName = null, Action<Humidifier.IoTWireless.WirelessGateway> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessGatewayFactory(resourceName, resourceFactoryAction));
        WirelessGatewayFactories.Add(factory);
        return factory;
    }

    public KMS.KeyFactory WithKMSKey(string resourceName = null, Action<Humidifier.KMS.Key> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.KeyFactory(resourceName, resourceFactoryAction));
        KMSKeyFactories.Add(factory);
        return factory;
    }

    public PaymentCryptography.KeyFactory WithPaymentCryptographyKey(string resourceName = null, Action<Humidifier.PaymentCryptography.Key> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PaymentCryptography.KeyFactory(resourceName, resourceFactoryAction));
        PaymentCryptographyKeyFactories.Add(factory);
        return factory;
    }

    public KMS.ReplicaKeyFactory WithReplicaKey(string resourceName = null, Action<Humidifier.KMS.ReplicaKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.ReplicaKeyFactory(resourceName, resourceFactoryAction));
        ReplicaKeyFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.CustomPluginFactory WithCustomPlugin(string resourceName = null, Action<Humidifier.KafkaConnect.CustomPlugin> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.CustomPluginFactory(resourceName, resourceFactoryAction));
        CustomPluginFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.WorkerConfigurationFactory WithWorkerConfiguration(string resourceName = null, Action<Humidifier.KafkaConnect.WorkerConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.WorkerConfigurationFactory(resourceName, resourceFactoryAction));
        WorkerConfigurationFactories.Add(factory);
        return factory;
    }

    public Kendra.FaqFactory WithFaq(string resourceName = null, Action<Humidifier.Kendra.Faq> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.FaqFactory(resourceName, resourceFactoryAction));
        FaqFactories.Add(factory);
        return factory;
    }

    public Kendra.IndexFactory WithKendraIndex(string resourceName = null, Action<Humidifier.Kendra.Index> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.IndexFactory(resourceName, resourceFactoryAction));
        KendraIndexFactories.Add(factory);
        return factory;
    }

    public QBusiness.IndexFactory WithQBusinessIndex(string resourceName = null, Action<Humidifier.QBusiness.Index> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.IndexFactory(resourceName, resourceFactoryAction));
        QBusinessIndexFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.IndexFactory WithResourceExplorer2Index(string resourceName = null, Action<Humidifier.ResourceExplorer2.Index> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.IndexFactory(resourceName, resourceFactoryAction));
        ResourceExplorer2IndexFactories.Add(factory);
        return factory;
    }

    public KendraRanking.ExecutionPlanFactory WithExecutionPlan(string resourceName = null, Action<Humidifier.KendraRanking.ExecutionPlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KendraRanking.ExecutionPlanFactory(resourceName, resourceFactoryAction));
        ExecutionPlanFactories.Add(factory);
        return factory;
    }

    public Kinesis.StreamFactory WithKinesisStream(string resourceName = null, Action<Humidifier.Kinesis.Stream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Kinesis.StreamFactory(resourceName, resourceFactoryAction));
        KinesisStreamFactories.Add(factory);
        return factory;
    }

    public KinesisVideo.StreamFactory WithKinesisVideoStream(string resourceName = null, Action<Humidifier.KinesisVideo.Stream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisVideo.StreamFactory(resourceName, resourceFactoryAction));
        KinesisVideoStreamFactories.Add(factory);
        return factory;
    }

    public QLDB.StreamFactory WithQLDBStream(string resourceName = null, Action<Humidifier.QLDB.Stream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QLDB.StreamFactory(resourceName, resourceFactoryAction));
        QLDBStreamFactories.Add(factory);
        return factory;
    }

    public Kinesis.StreamConsumerFactory WithStreamConsumer(string resourceName = null, Action<Humidifier.Kinesis.StreamConsumer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Kinesis.StreamConsumerFactory(resourceName, resourceFactoryAction));
        StreamConsumerFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationOutputFactory WithKinesisAnalyticsApplicationOutput(string resourceName = null, Action<Humidifier.KinesisAnalytics.ApplicationOutput> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationOutputFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationOutputFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationOutputFactory WithKinesisAnalyticsV2ApplicationOutput(string resourceName = null, Action<Humidifier.KinesisAnalyticsV2.ApplicationOutput> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationOutputFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationOutputFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationReferenceDataSourceFactory WithKinesisAnalyticsApplicationReferenceDataSource(string resourceName = null, Action<Humidifier.KinesisAnalytics.ApplicationReferenceDataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationReferenceDataSourceFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationReferenceDataSourceFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationReferenceDataSourceFactory WithKinesisAnalyticsV2ApplicationReferenceDataSource(string resourceName = null, Action<Humidifier.KinesisAnalyticsV2.ApplicationReferenceDataSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationReferenceDataSourceFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationReferenceDataSourceFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationCloudWatchLoggingOptionFactory WithApplicationCloudWatchLoggingOption(string resourceName = null, Action<Humidifier.KinesisAnalyticsV2.ApplicationCloudWatchLoggingOption> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationCloudWatchLoggingOptionFactory(resourceName, resourceFactoryAction));
        ApplicationCloudWatchLoggingOptionFactories.Add(factory);
        return factory;
    }

    public KinesisFirehose.DeliveryStreamFactory WithDeliveryStream(string resourceName = null, Action<Humidifier.KinesisFirehose.DeliveryStream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisFirehose.DeliveryStreamFactory(resourceName, resourceFactoryAction));
        DeliveryStreamFactories.Add(factory);
        return factory;
    }

    public KinesisVideo.SignalingChannelFactory WithSignalingChannel(string resourceName = null, Action<Humidifier.KinesisVideo.SignalingChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisVideo.SignalingChannelFactory(resourceName, resourceFactoryAction));
        SignalingChannelFactories.Add(factory);
        return factory;
    }

    public LakeFormation.DataCellsFilterFactory WithDataCellsFilter(string resourceName = null, Action<Humidifier.LakeFormation.DataCellsFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.DataCellsFilterFactory(resourceName, resourceFactoryAction));
        DataCellsFilterFactories.Add(factory);
        return factory;
    }

    public LakeFormation.DataLakeSettingsFactory WithDataLakeSettings(string resourceName = null, Action<Humidifier.LakeFormation.DataLakeSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.DataLakeSettingsFactory(resourceName, resourceFactoryAction));
        DataLakeSettingsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.PermissionsFactory WithPermissions(string resourceName = null, Action<Humidifier.LakeFormation.Permissions> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.PermissionsFactory(resourceName, resourceFactoryAction));
        PermissionsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.PrincipalPermissionsFactory WithPrincipalPermissions(string resourceName = null, Action<Humidifier.LakeFormation.PrincipalPermissions> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.PrincipalPermissionsFactory(resourceName, resourceFactoryAction));
        PrincipalPermissionsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.TagFactory WithTag(string resourceName = null, Action<Humidifier.LakeFormation.Tag> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.TagFactory(resourceName, resourceFactoryAction));
        TagFactories.Add(factory);
        return factory;
    }

    public LakeFormation.TagAssociationFactory WithTagAssociation(string resourceName = null, Action<Humidifier.LakeFormation.TagAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.TagAssociationFactory(resourceName, resourceFactoryAction));
        TagAssociationFactories.Add(factory);
        return factory;
    }

    public Lambda.CodeSigningConfigFactory WithCodeSigningConfig(string resourceName = null, Action<Humidifier.Lambda.CodeSigningConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.CodeSigningConfigFactory(resourceName, resourceFactoryAction));
        CodeSigningConfigFactories.Add(factory);
        return factory;
    }

    public Lambda.EventInvokeConfigFactory WithEventInvokeConfig(string resourceName = null, Action<Humidifier.Lambda.EventInvokeConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.EventInvokeConfigFactory(resourceName, resourceFactoryAction));
        EventInvokeConfigFactories.Add(factory);
        return factory;
    }

    public Lambda.EventSourceMappingFactory WithEventSourceMapping(string resourceName = null, Action<Humidifier.Lambda.EventSourceMapping> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.EventSourceMappingFactory(resourceName, resourceFactoryAction));
        EventSourceMappingFactories.Add(factory);
        return factory;
    }

    public Lambda.LayerVersionFactory WithLayerVersion(string resourceName = null, Action<Humidifier.Lambda.LayerVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.LayerVersionFactory(resourceName, resourceFactoryAction));
        LayerVersionFactories.Add(factory);
        return factory;
    }

    public Lambda.LayerVersionPermissionFactory WithLayerVersionPermission(string resourceName = null, Action<Humidifier.Lambda.LayerVersionPermission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.LayerVersionPermissionFactory(resourceName, resourceFactoryAction));
        LayerVersionPermissionFactories.Add(factory);
        return factory;
    }

    public Lambda.UrlFactory WithUrl(string resourceName = null, Action<Humidifier.Lambda.Url> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.UrlFactory(resourceName, resourceFactoryAction));
        UrlFactories.Add(factory);
        return factory;
    }

    public Lambda.VersionFactory WithVersion(string resourceName = null, Action<Humidifier.Lambda.Version> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.VersionFactory(resourceName, resourceFactoryAction));
        VersionFactories.Add(factory);
        return factory;
    }

    public Lex.BotFactory WithBot(string resourceName = null, Action<Humidifier.Lex.Bot> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotFactory(resourceName, resourceFactoryAction));
        BotFactories.Add(factory);
        return factory;
    }

    public Lex.BotAliasFactory WithBotAlias(string resourceName = null, Action<Humidifier.Lex.BotAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotAliasFactory(resourceName, resourceFactoryAction));
        BotAliasFactories.Add(factory);
        return factory;
    }

    public Lex.BotVersionFactory WithBotVersion(string resourceName = null, Action<Humidifier.Lex.BotVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotVersionFactory(resourceName, resourceFactoryAction));
        BotVersionFactories.Add(factory);
        return factory;
    }

    public LicenseManager.GrantFactory WithGrant(string resourceName = null, Action<Humidifier.LicenseManager.Grant> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LicenseManager.GrantFactory(resourceName, resourceFactoryAction));
        GrantFactories.Add(factory);
        return factory;
    }

    public LicenseManager.LicenseFactory WithLicense(string resourceName = null, Action<Humidifier.LicenseManager.License> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LicenseManager.LicenseFactory(resourceName, resourceFactoryAction));
        LicenseFactories.Add(factory);
        return factory;
    }

    public Lightsail.BucketFactory WithLightsailBucket(string resourceName = null, Action<Humidifier.Lightsail.Bucket> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.BucketFactory(resourceName, resourceFactoryAction));
        LightsailBucketFactories.Add(factory);
        return factory;
    }

    public S3.BucketFactory WithS3Bucket(string resourceName = null, Action<Humidifier.S3.Bucket> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.BucketFactory(resourceName, resourceFactoryAction));
        S3BucketFactories.Add(factory);
        return factory;
    }

    public S3Outposts.BucketFactory WithS3OutpostsBucket(string resourceName = null, Action<Humidifier.S3Outposts.Bucket> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.BucketFactory(resourceName, resourceFactoryAction));
        S3OutpostsBucketFactories.Add(factory);
        return factory;
    }

    public Lightsail.ContainerFactory WithLightsailContainer(string resourceName = null, Action<Humidifier.Lightsail.Container> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.ContainerFactory(resourceName, resourceFactoryAction));
        LightsailContainerFactories.Add(factory);
        return factory;
    }

    public MediaStore.ContainerFactory WithMediaStoreContainer(string resourceName = null, Action<Humidifier.MediaStore.Container> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaStore.ContainerFactory(resourceName, resourceFactoryAction));
        MediaStoreContainerFactories.Add(factory);
        return factory;
    }

    public Lightsail.DiskFactory WithDisk(string resourceName = null, Action<Humidifier.Lightsail.Disk> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DiskFactory(resourceName, resourceFactoryAction));
        DiskFactories.Add(factory);
        return factory;
    }

    public Lightsail.LoadBalancerTlsCertificateFactory WithLoadBalancerTlsCertificate(string resourceName = null, Action<Humidifier.Lightsail.LoadBalancerTlsCertificate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.LoadBalancerTlsCertificateFactory(resourceName, resourceFactoryAction));
        LoadBalancerTlsCertificateFactories.Add(factory);
        return factory;
    }

    public Lightsail.StaticIpFactory WithStaticIp(string resourceName = null, Action<Humidifier.Lightsail.StaticIp> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.StaticIpFactory(resourceName, resourceFactoryAction));
        StaticIpFactories.Add(factory);
        return factory;
    }

    public Location.APIKeyFactory WithAPIKey(string resourceName = null, Action<Humidifier.Location.APIKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.APIKeyFactory(resourceName, resourceFactoryAction));
        APIKeyFactories.Add(factory);
        return factory;
    }

    public Location.GeofenceCollectionFactory WithGeofenceCollection(string resourceName = null, Action<Humidifier.Location.GeofenceCollection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.GeofenceCollectionFactory(resourceName, resourceFactoryAction));
        GeofenceCollectionFactories.Add(factory);
        return factory;
    }

    public Location.MapFactory WithMap(string resourceName = null, Action<Humidifier.Location.Map> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.MapFactory(resourceName, resourceFactoryAction));
        MapFactories.Add(factory);
        return factory;
    }

    public Location.PlaceIndexFactory WithPlaceIndex(string resourceName = null, Action<Humidifier.Location.PlaceIndex> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.PlaceIndexFactory(resourceName, resourceFactoryAction));
        PlaceIndexFactories.Add(factory);
        return factory;
    }

    public Location.RouteCalculatorFactory WithRouteCalculator(string resourceName = null, Action<Humidifier.Location.RouteCalculator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.RouteCalculatorFactory(resourceName, resourceFactoryAction));
        RouteCalculatorFactories.Add(factory);
        return factory;
    }

    public Location.TrackerFactory WithTracker(string resourceName = null, Action<Humidifier.Location.Tracker> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.TrackerFactory(resourceName, resourceFactoryAction));
        TrackerFactories.Add(factory);
        return factory;
    }

    public Location.TrackerConsumerFactory WithTrackerConsumer(string resourceName = null, Action<Humidifier.Location.TrackerConsumer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Location.TrackerConsumerFactory(resourceName, resourceFactoryAction));
        TrackerConsumerFactories.Add(factory);
        return factory;
    }

    public Logs.AccountPolicyFactory WithAccountPolicy(string resourceName = null, Action<Humidifier.Logs.AccountPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.AccountPolicyFactory(resourceName, resourceFactoryAction));
        AccountPolicyFactories.Add(factory);
        return factory;
    }

    public Logs.DeliveryFactory WithDelivery(string resourceName = null, Action<Humidifier.Logs.Delivery> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliveryFactory(resourceName, resourceFactoryAction));
        DeliveryFactories.Add(factory);
        return factory;
    }

    public Logs.DeliveryDestinationFactory WithDeliveryDestination(string resourceName = null, Action<Humidifier.Logs.DeliveryDestination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliveryDestinationFactory(resourceName, resourceFactoryAction));
        DeliveryDestinationFactories.Add(factory);
        return factory;
    }

    public Logs.DeliverySourceFactory WithDeliverySource(string resourceName = null, Action<Humidifier.Logs.DeliverySource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliverySourceFactory(resourceName, resourceFactoryAction));
        DeliverySourceFactories.Add(factory);
        return factory;
    }

    public Logs.LogAnomalyDetectorFactory WithLogAnomalyDetector(string resourceName = null, Action<Humidifier.Logs.LogAnomalyDetector> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogAnomalyDetectorFactory(resourceName, resourceFactoryAction));
        LogAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public Logs.LogGroupFactory WithLogGroup(string resourceName = null, Action<Humidifier.Logs.LogGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogGroupFactory(resourceName, resourceFactoryAction));
        LogGroupFactories.Add(factory);
        return factory;
    }

    public Logs.LogStreamFactory WithLogStream(string resourceName = null, Action<Humidifier.Logs.LogStream> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogStreamFactory(resourceName, resourceFactoryAction));
        LogStreamFactories.Add(factory);
        return factory;
    }

    public Logs.MetricFilterFactory WithMetricFilter(string resourceName = null, Action<Humidifier.Logs.MetricFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.MetricFilterFactory(resourceName, resourceFactoryAction));
        MetricFilterFactories.Add(factory);
        return factory;
    }

    public Logs.QueryDefinitionFactory WithQueryDefinition(string resourceName = null, Action<Humidifier.Logs.QueryDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.QueryDefinitionFactory(resourceName, resourceFactoryAction));
        QueryDefinitionFactories.Add(factory);
        return factory;
    }

    public Logs.SubscriptionFilterFactory WithSubscriptionFilter(string resourceName = null, Action<Humidifier.Logs.SubscriptionFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.SubscriptionFilterFactory(resourceName, resourceFactoryAction));
        SubscriptionFilterFactories.Add(factory);
        return factory;
    }

    public LookoutEquipment.InferenceSchedulerFactory WithInferenceScheduler(string resourceName = null, Action<Humidifier.LookoutEquipment.InferenceScheduler> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutEquipment.InferenceSchedulerFactory(resourceName, resourceFactoryAction));
        InferenceSchedulerFactories.Add(factory);
        return factory;
    }

    public LookoutMetrics.AlertFactory WithAlert(string resourceName = null, Action<Humidifier.LookoutMetrics.Alert> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutMetrics.AlertFactory(resourceName, resourceFactoryAction));
        AlertFactories.Add(factory);
        return factory;
    }

    public MSK.BatchScramSecretFactory WithBatchScramSecret(string resourceName = null, Action<Humidifier.MSK.BatchScramSecret> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.BatchScramSecretFactory(resourceName, resourceFactoryAction));
        BatchScramSecretFactories.Add(factory);
        return factory;
    }

    public MSK.ClusterPolicyFactory WithClusterPolicy(string resourceName = null, Action<Humidifier.MSK.ClusterPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ClusterPolicyFactory(resourceName, resourceFactoryAction));
        ClusterPolicyFactories.Add(factory);
        return factory;
    }

    public MSK.ReplicatorFactory WithReplicator(string resourceName = null, Action<Humidifier.MSK.Replicator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ReplicatorFactory(resourceName, resourceFactoryAction));
        ReplicatorFactories.Add(factory);
        return factory;
    }

    public MSK.ServerlessClusterFactory WithServerlessCluster(string resourceName = null, Action<Humidifier.MSK.ServerlessCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ServerlessClusterFactory(resourceName, resourceFactoryAction));
        ServerlessClusterFactories.Add(factory);
        return factory;
    }

    public MSK.VpcConnectionFactory WithVpcConnection(string resourceName = null, Action<Humidifier.MSK.VpcConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.VpcConnectionFactory(resourceName, resourceFactoryAction));
        VpcConnectionFactories.Add(factory);
        return factory;
    }

    public Macie.AllowListFactory WithAllowList(string resourceName = null, Action<Humidifier.Macie.AllowList> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.AllowListFactory(resourceName, resourceFactoryAction));
        AllowListFactories.Add(factory);
        return factory;
    }

    public Macie.CustomDataIdentifierFactory WithCustomDataIdentifier(string resourceName = null, Action<Humidifier.Macie.CustomDataIdentifier> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.CustomDataIdentifierFactory(resourceName, resourceFactoryAction));
        CustomDataIdentifierFactories.Add(factory);
        return factory;
    }

    public Macie.FindingsFilterFactory WithFindingsFilter(string resourceName = null, Action<Humidifier.Macie.FindingsFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.FindingsFilterFactory(resourceName, resourceFactoryAction));
        FindingsFilterFactories.Add(factory);
        return factory;
    }

    public Macie.SessionFactory WithSession(string resourceName = null, Action<Humidifier.Macie.Session> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.SessionFactory(resourceName, resourceFactoryAction));
        SessionFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.AccessorFactory WithAccessor(string resourceName = null, Action<Humidifier.ManagedBlockchain.Accessor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.AccessorFactory(resourceName, resourceFactoryAction));
        AccessorFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.NodeFactory WithNode(string resourceName = null, Action<Humidifier.ManagedBlockchain.Node> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.NodeFactory(resourceName, resourceFactoryAction));
        NodeFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeFactory WithBridge(string resourceName = null, Action<Humidifier.MediaConnect.Bridge> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeFactory(resourceName, resourceFactoryAction));
        BridgeFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeOutputFactory WithBridgeOutput(string resourceName = null, Action<Humidifier.MediaConnect.BridgeOutput> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeOutputFactory(resourceName, resourceFactoryAction));
        BridgeOutputFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeSourceFactory WithBridgeSource(string resourceName = null, Action<Humidifier.MediaConnect.BridgeSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeSourceFactory(resourceName, resourceFactoryAction));
        BridgeSourceFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowEntitlementFactory WithFlowEntitlement(string resourceName = null, Action<Humidifier.MediaConnect.FlowEntitlement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowEntitlementFactory(resourceName, resourceFactoryAction));
        FlowEntitlementFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowOutputFactory WithFlowOutput(string resourceName = null, Action<Humidifier.MediaConnect.FlowOutput> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowOutputFactory(resourceName, resourceFactoryAction));
        FlowOutputFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowSourceFactory WithFlowSource(string resourceName = null, Action<Humidifier.MediaConnect.FlowSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowSourceFactory(resourceName, resourceFactoryAction));
        FlowSourceFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowVpcInterfaceFactory WithFlowVpcInterface(string resourceName = null, Action<Humidifier.MediaConnect.FlowVpcInterface> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowVpcInterfaceFactory(resourceName, resourceFactoryAction));
        FlowVpcInterfaceFactories.Add(factory);
        return factory;
    }

    public MediaConvert.PresetFactory WithPreset(string resourceName = null, Action<Humidifier.MediaConvert.Preset> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.PresetFactory(resourceName, resourceFactoryAction));
        PresetFactories.Add(factory);
        return factory;
    }

    public MediaLive.ChannelPlacementGroupFactory WithChannelPlacementGroup(string resourceName = null, Action<Humidifier.MediaLive.ChannelPlacementGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ChannelPlacementGroupFactory(resourceName, resourceFactoryAction));
        ChannelPlacementGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.CloudWatchAlarmTemplateFactory WithCloudWatchAlarmTemplate(string resourceName = null, Action<Humidifier.MediaLive.CloudWatchAlarmTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.CloudWatchAlarmTemplateFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmTemplateFactories.Add(factory);
        return factory;
    }

    public MediaLive.CloudWatchAlarmTemplateGroupFactory WithCloudWatchAlarmTemplateGroup(string resourceName = null, Action<Humidifier.MediaLive.CloudWatchAlarmTemplateGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.CloudWatchAlarmTemplateGroupFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmTemplateGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.EventBridgeRuleTemplateFactory WithEventBridgeRuleTemplate(string resourceName = null, Action<Humidifier.MediaLive.EventBridgeRuleTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.EventBridgeRuleTemplateFactory(resourceName, resourceFactoryAction));
        EventBridgeRuleTemplateFactories.Add(factory);
        return factory;
    }

    public MediaLive.EventBridgeRuleTemplateGroupFactory WithEventBridgeRuleTemplateGroup(string resourceName = null, Action<Humidifier.MediaLive.EventBridgeRuleTemplateGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.EventBridgeRuleTemplateGroupFactory(resourceName, resourceFactoryAction));
        EventBridgeRuleTemplateGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.InputSecurityGroupFactory WithInputSecurityGroup(string resourceName = null, Action<Humidifier.MediaLive.InputSecurityGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.InputSecurityGroupFactory(resourceName, resourceFactoryAction));
        InputSecurityGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.MultiplexFactory WithMultiplex(string resourceName = null, Action<Humidifier.MediaLive.Multiplex> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.MultiplexFactory(resourceName, resourceFactoryAction));
        MultiplexFactories.Add(factory);
        return factory;
    }

    public MediaLive.MultiplexprogramFactory WithMultiplexprogram(string resourceName = null, Action<Humidifier.MediaLive.Multiplexprogram> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.MultiplexprogramFactory(resourceName, resourceFactoryAction));
        MultiplexprogramFactories.Add(factory);
        return factory;
    }

    public MediaLive.NetworkFactory WithNetwork(string resourceName = null, Action<Humidifier.MediaLive.Network> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.NetworkFactory(resourceName, resourceFactoryAction));
        NetworkFactories.Add(factory);
        return factory;
    }

    public MediaLive.SdiSourceFactory WithSdiSource(string resourceName = null, Action<Humidifier.MediaLive.SdiSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.SdiSourceFactory(resourceName, resourceFactoryAction));
        SdiSourceFactories.Add(factory);
        return factory;
    }

    public MediaLive.SignalMapFactory WithSignalMap(string resourceName = null, Action<Humidifier.MediaLive.SignalMap> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.SignalMapFactory(resourceName, resourceFactoryAction));
        SignalMapFactories.Add(factory);
        return factory;
    }

    public MediaPackage.OriginEndpointFactory WithMediaPackageOriginEndpoint(string resourceName = null, Action<Humidifier.MediaPackage.OriginEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.OriginEndpointFactory(resourceName, resourceFactoryAction));
        MediaPackageOriginEndpointFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.OriginEndpointFactory WithMediaPackageV2OriginEndpoint(string resourceName = null, Action<Humidifier.MediaPackageV2.OriginEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.OriginEndpointFactory(resourceName, resourceFactoryAction));
        MediaPackageV2OriginEndpointFactories.Add(factory);
        return factory;
    }

    public MediaPackage.PackagingConfigurationFactory WithPackagingConfiguration(string resourceName = null, Action<Humidifier.MediaPackage.PackagingConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.PackagingConfigurationFactory(resourceName, resourceFactoryAction));
        PackagingConfigurationFactories.Add(factory);
        return factory;
    }

    public MediaPackage.PackagingGroupFactory WithPackagingGroup(string resourceName = null, Action<Humidifier.MediaPackage.PackagingGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.PackagingGroupFactory(resourceName, resourceFactoryAction));
        PackagingGroupFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelGroupFactory WithChannelGroup(string resourceName = null, Action<Humidifier.MediaPackageV2.ChannelGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelGroupFactory(resourceName, resourceFactoryAction));
        ChannelGroupFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelPolicyFactory WithMediaPackageV2ChannelPolicy(string resourceName = null, Action<Humidifier.MediaPackageV2.ChannelPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelPolicyFactory(resourceName, resourceFactoryAction));
        MediaPackageV2ChannelPolicyFactories.Add(factory);
        return factory;
    }

    public MediaTailor.ChannelPolicyFactory WithMediaTailorChannelPolicy(string resourceName = null, Action<Humidifier.MediaTailor.ChannelPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.ChannelPolicyFactory(resourceName, resourceFactoryAction));
        MediaTailorChannelPolicyFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.OriginEndpointPolicyFactory WithOriginEndpointPolicy(string resourceName = null, Action<Humidifier.MediaPackageV2.OriginEndpointPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.OriginEndpointPolicyFactory(resourceName, resourceFactoryAction));
        OriginEndpointPolicyFactories.Add(factory);
        return factory;
    }

    public MediaTailor.LiveSourceFactory WithLiveSource(string resourceName = null, Action<Humidifier.MediaTailor.LiveSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.LiveSourceFactory(resourceName, resourceFactoryAction));
        LiveSourceFactories.Add(factory);
        return factory;
    }

    public MediaTailor.PlaybackConfigurationFactory WithPlaybackConfiguration(string resourceName = null, Action<Humidifier.MediaTailor.PlaybackConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.PlaybackConfigurationFactory(resourceName, resourceFactoryAction));
        PlaybackConfigurationFactories.Add(factory);
        return factory;
    }

    public MediaTailor.SourceLocationFactory WithSourceLocation(string resourceName = null, Action<Humidifier.MediaTailor.SourceLocation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.SourceLocationFactory(resourceName, resourceFactoryAction));
        SourceLocationFactories.Add(factory);
        return factory;
    }

    public MediaTailor.VodSourceFactory WithVodSource(string resourceName = null, Action<Humidifier.MediaTailor.VodSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.VodSourceFactory(resourceName, resourceFactoryAction));
        VodSourceFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ACLFactory WithACL(string resourceName = null, Action<Humidifier.MemoryDB.ACL> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ACLFactory(resourceName, resourceFactoryAction));
        ACLFactories.Add(factory);
        return factory;
    }

    public Neptune.DBParameterGroupFactory WithNeptuneDBParameterGroup(string resourceName = null, Action<Humidifier.Neptune.DBParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBParameterGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBParameterGroupFactory WithRDSDBParameterGroup(string resourceName = null, Action<Humidifier.RDS.DBParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBParameterGroupFactory(resourceName, resourceFactoryAction));
        RDSDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public NeptuneGraph.PrivateGraphEndpointFactory WithPrivateGraphEndpoint(string resourceName = null, Action<Humidifier.NeptuneGraph.PrivateGraphEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NeptuneGraph.PrivateGraphEndpointFactory(resourceName, resourceFactoryAction));
        PrivateGraphEndpointFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.FirewallFactory WithFirewall(string resourceName = null, Action<Humidifier.NetworkFirewall.Firewall> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.FirewallFactory(resourceName, resourceFactoryAction));
        FirewallFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.FirewallPolicyFactory WithFirewallPolicy(string resourceName = null, Action<Humidifier.NetworkFirewall.FirewallPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.FirewallPolicyFactory(resourceName, resourceFactoryAction));
        FirewallPolicyFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.RuleGroupFactory WithNetworkFirewallRuleGroup(string resourceName = null, Action<Humidifier.NetworkFirewall.RuleGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.RuleGroupFactory(resourceName, resourceFactoryAction));
        NetworkFirewallRuleGroupFactories.Add(factory);
        return factory;
    }

    public WAFv2.RuleGroupFactory WithWAFv2RuleGroup(string resourceName = null, Action<Humidifier.WAFv2.RuleGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.RuleGroupFactory(resourceName, resourceFactoryAction));
        WAFv2RuleGroupFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.TLSInspectionConfigurationFactory WithTLSInspectionConfiguration(string resourceName = null, Action<Humidifier.NetworkFirewall.TLSInspectionConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.TLSInspectionConfigurationFactory(resourceName, resourceFactoryAction));
        TLSInspectionConfigurationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.ConnectAttachmentFactory WithConnectAttachment(string resourceName = null, Action<Humidifier.NetworkManager.ConnectAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.ConnectAttachmentFactory(resourceName, resourceFactoryAction));
        ConnectAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.ConnectPeerFactory WithConnectPeer(string resourceName = null, Action<Humidifier.NetworkManager.ConnectPeer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.ConnectPeerFactory(resourceName, resourceFactoryAction));
        ConnectPeerFactories.Add(factory);
        return factory;
    }

    public NetworkManager.CoreNetworkFactory WithCoreNetwork(string resourceName = null, Action<Humidifier.NetworkManager.CoreNetwork> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.CoreNetworkFactory(resourceName, resourceFactoryAction));
        CoreNetworkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.CustomerGatewayAssociationFactory WithCustomerGatewayAssociation(string resourceName = null, Action<Humidifier.NetworkManager.CustomerGatewayAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.CustomerGatewayAssociationFactory(resourceName, resourceFactoryAction));
        CustomerGatewayAssociationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.GlobalNetworkFactory WithGlobalNetwork(string resourceName = null, Action<Humidifier.NetworkManager.GlobalNetwork> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.GlobalNetworkFactory(resourceName, resourceFactoryAction));
        GlobalNetworkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.LinkFactory WithNetworkManagerLink(string resourceName = null, Action<Humidifier.NetworkManager.Link> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.LinkFactory(resourceName, resourceFactoryAction));
        NetworkManagerLinkFactories.Add(factory);
        return factory;
    }

    public Oam.LinkFactory WithOamLink(string resourceName = null, Action<Humidifier.Oam.Link> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Oam.LinkFactory(resourceName, resourceFactoryAction));
        OamLinkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.LinkAssociationFactory WithLinkAssociation(string resourceName = null, Action<Humidifier.NetworkManager.LinkAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.LinkAssociationFactory(resourceName, resourceFactoryAction));
        LinkAssociationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.SiteFactory WithSite(string resourceName = null, Action<Humidifier.NetworkManager.Site> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.SiteFactory(resourceName, resourceFactoryAction));
        SiteFactories.Add(factory);
        return factory;
    }

    public NetworkManager.SiteToSiteVpnAttachmentFactory WithSiteToSiteVpnAttachment(string resourceName = null, Action<Humidifier.NetworkManager.SiteToSiteVpnAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.SiteToSiteVpnAttachmentFactory(resourceName, resourceFactoryAction));
        SiteToSiteVpnAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayPeeringFactory WithTransitGatewayPeering(string resourceName = null, Action<Humidifier.NetworkManager.TransitGatewayPeering> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayPeeringFactory(resourceName, resourceFactoryAction));
        TransitGatewayPeeringFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayRegistrationFactory WithTransitGatewayRegistration(string resourceName = null, Action<Humidifier.NetworkManager.TransitGatewayRegistration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayRegistrationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRegistrationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayRouteTableAttachmentFactory WithTransitGatewayRouteTableAttachment(string resourceName = null, Action<Humidifier.NetworkManager.TransitGatewayRouteTableAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayRouteTableAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.VpcAttachmentFactory WithVpcAttachment(string resourceName = null, Action<Humidifier.NetworkManager.VpcAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.VpcAttachmentFactory(resourceName, resourceFactoryAction));
        VpcAttachmentFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.LaunchProfileFactory WithLaunchProfile(string resourceName = null, Action<Humidifier.NimbleStudio.LaunchProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.LaunchProfileFactory(resourceName, resourceFactoryAction));
        LaunchProfileFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StreamingImageFactory WithStreamingImage(string resourceName = null, Action<Humidifier.NimbleStudio.StreamingImage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StreamingImageFactory(resourceName, resourceFactoryAction));
        StreamingImageFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StudioComponentFactory WithStudioComponent(string resourceName = null, Action<Humidifier.NimbleStudio.StudioComponent> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StudioComponentFactory(resourceName, resourceFactoryAction));
        StudioComponentFactories.Add(factory);
        return factory;
    }

    public Oam.SinkFactory WithSink(string resourceName = null, Action<Humidifier.Oam.Sink> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Oam.SinkFactory(resourceName, resourceFactoryAction));
        SinkFactories.Add(factory);
        return factory;
    }

    public Omics.AnnotationStoreFactory WithAnnotationStore(string resourceName = null, Action<Humidifier.Omics.AnnotationStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.AnnotationStoreFactory(resourceName, resourceFactoryAction));
        AnnotationStoreFactories.Add(factory);
        return factory;
    }

    public Omics.ReferenceStoreFactory WithReferenceStore(string resourceName = null, Action<Humidifier.Omics.ReferenceStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.ReferenceStoreFactory(resourceName, resourceFactoryAction));
        ReferenceStoreFactories.Add(factory);
        return factory;
    }

    public Omics.RunGroupFactory WithRunGroup(string resourceName = null, Action<Humidifier.Omics.RunGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.RunGroupFactory(resourceName, resourceFactoryAction));
        RunGroupFactories.Add(factory);
        return factory;
    }

    public Omics.SequenceStoreFactory WithSequenceStore(string resourceName = null, Action<Humidifier.Omics.SequenceStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.SequenceStoreFactory(resourceName, resourceFactoryAction));
        SequenceStoreFactories.Add(factory);
        return factory;
    }

    public Omics.VariantStoreFactory WithVariantStore(string resourceName = null, Action<Humidifier.Omics.VariantStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.VariantStoreFactory(resourceName, resourceFactoryAction));
        VariantStoreFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.CollectionFactory WithOpenSearchServerlessCollection(string resourceName = null, Action<Humidifier.OpenSearchServerless.Collection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.CollectionFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessCollectionFactories.Add(factory);
        return factory;
    }

    public Rekognition.CollectionFactory WithRekognitionCollection(string resourceName = null, Action<Humidifier.Rekognition.Collection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.CollectionFactory(resourceName, resourceFactoryAction));
        RekognitionCollectionFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.SecurityConfigFactory WithSecurityConfig(string resourceName = null, Action<Humidifier.OpenSearchServerless.SecurityConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.SecurityConfigFactory(resourceName, resourceFactoryAction));
        SecurityConfigFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.SecurityPolicyFactory WithSecurityPolicy(string resourceName = null, Action<Humidifier.OpenSearchServerless.SecurityPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.SecurityPolicyFactory(resourceName, resourceFactoryAction));
        SecurityPolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.VpcEndpointFactory WithVpcEndpoint(string resourceName = null, Action<Humidifier.OpenSearchServerless.VpcEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.VpcEndpointFactory(resourceName, resourceFactoryAction));
        VpcEndpointFactories.Add(factory);
        return factory;
    }

    public OpsWorks.ElasticLoadBalancerAttachmentFactory WithElasticLoadBalancerAttachment(string resourceName = null, Action<Humidifier.OpsWorks.ElasticLoadBalancerAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.ElasticLoadBalancerAttachmentFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancerAttachmentFactories.Add(factory);
        return factory;
    }

    public OpsWorks.LayerFactory WithLayer(string resourceName = null, Action<Humidifier.OpsWorks.Layer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.LayerFactory(resourceName, resourceFactoryAction));
        LayerFactories.Add(factory);
        return factory;
    }

    public OpsWorksCM.ServerFactory WithOpsWorksCMServer(string resourceName = null, Action<Humidifier.OpsWorksCM.Server> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorksCM.ServerFactory(resourceName, resourceFactoryAction));
        OpsWorksCMServerFactories.Add(factory);
        return factory;
    }

    public Transfer.ServerFactory WithTransferServer(string resourceName = null, Action<Humidifier.Transfer.Server> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ServerFactory(resourceName, resourceFactoryAction));
        TransferServerFactories.Add(factory);
        return factory;
    }

    public Organizations.OrganizationFactory WithOrganization(string resourceName = null, Action<Humidifier.Organizations.Organization> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.OrganizationFactory(resourceName, resourceFactoryAction));
        OrganizationFactories.Add(factory);
        return factory;
    }

    public Organizations.OrganizationalUnitFactory WithOrganizationalUnit(string resourceName = null, Action<Humidifier.Organizations.OrganizationalUnit> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.OrganizationalUnitFactory(resourceName, resourceFactoryAction));
        OrganizationalUnitFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.DirectoryRegistrationFactory WithDirectoryRegistration(string resourceName = null, Action<Humidifier.PCAConnectorAD.DirectoryRegistration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.DirectoryRegistrationFactory(resourceName, resourceFactoryAction));
        DirectoryRegistrationFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.ServicePrincipalNameFactory WithServicePrincipalName(string resourceName = null, Action<Humidifier.PCAConnectorAD.ServicePrincipalName> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.ServicePrincipalNameFactory(resourceName, resourceFactoryAction));
        ServicePrincipalNameFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.TemplateFactory WithPCAConnectorADTemplate(string resourceName = null, Action<Humidifier.PCAConnectorAD.Template> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.TemplateFactory(resourceName, resourceFactoryAction));
        PCAConnectorADTemplateFactories.Add(factory);
        return factory;
    }

    public QuickSight.TemplateFactory WithQuickSightTemplate(string resourceName = null, Action<Humidifier.QuickSight.Template> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.TemplateFactory(resourceName, resourceFactoryAction));
        QuickSightTemplateFactories.Add(factory);
        return factory;
    }

    public SES.TemplateFactory WithSESTemplate(string resourceName = null, Action<Humidifier.SES.Template> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.TemplateFactory(resourceName, resourceFactoryAction));
        SESTemplateFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.TemplateGroupAccessControlEntryFactory WithTemplateGroupAccessControlEntry(string resourceName = null, Action<Humidifier.PCAConnectorAD.TemplateGroupAccessControlEntry> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.TemplateGroupAccessControlEntryFactory(resourceName, resourceFactoryAction));
        TemplateGroupAccessControlEntryFactories.Add(factory);
        return factory;
    }

    public PCAConnectorSCEP.ChallengeFactory WithChallenge(string resourceName = null, Action<Humidifier.PCAConnectorSCEP.Challenge> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorSCEP.ChallengeFactory(resourceName, resourceFactoryAction));
        ChallengeFactories.Add(factory);
        return factory;
    }

    public Panorama.ApplicationInstanceFactory WithApplicationInstance(string resourceName = null, Action<Humidifier.Panorama.ApplicationInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.ApplicationInstanceFactory(resourceName, resourceFactoryAction));
        ApplicationInstanceFactories.Add(factory);
        return factory;
    }

    public Panorama.PackageFactory WithPackage(string resourceName = null, Action<Humidifier.Panorama.Package> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.PackageFactory(resourceName, resourceFactoryAction));
        PackageFactories.Add(factory);
        return factory;
    }

    public Panorama.PackageVersionFactory WithPackageVersion(string resourceName = null, Action<Humidifier.Panorama.PackageVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.PackageVersionFactory(resourceName, resourceFactoryAction));
        PackageVersionFactories.Add(factory);
        return factory;
    }

    public Personalize.SolutionFactory WithSolution(string resourceName = null, Action<Humidifier.Personalize.Solution> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.SolutionFactory(resourceName, resourceFactoryAction));
        SolutionFactories.Add(factory);
        return factory;
    }

    public Pinpoint.ADMChannelFactory WithADMChannel(string resourceName = null, Action<Humidifier.Pinpoint.ADMChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.ADMChannelFactory(resourceName, resourceFactoryAction));
        ADMChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSChannelFactory WithAPNSChannel(string resourceName = null, Action<Humidifier.Pinpoint.APNSChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSChannelFactory(resourceName, resourceFactoryAction));
        APNSChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSSandboxChannelFactory WithAPNSSandboxChannel(string resourceName = null, Action<Humidifier.Pinpoint.APNSSandboxChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSSandboxChannelFactory(resourceName, resourceFactoryAction));
        APNSSandboxChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSVoipChannelFactory WithAPNSVoipChannel(string resourceName = null, Action<Humidifier.Pinpoint.APNSVoipChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSVoipChannelFactory(resourceName, resourceFactoryAction));
        APNSVoipChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSVoipSandboxChannelFactory WithAPNSVoipSandboxChannel(string resourceName = null, Action<Humidifier.Pinpoint.APNSVoipSandboxChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSVoipSandboxChannelFactory(resourceName, resourceFactoryAction));
        APNSVoipSandboxChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.ApplicationSettingsFactory WithApplicationSettings(string resourceName = null, Action<Humidifier.Pinpoint.ApplicationSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.ApplicationSettingsFactory(resourceName, resourceFactoryAction));
        ApplicationSettingsFactories.Add(factory);
        return factory;
    }

    public Pinpoint.BaiduChannelFactory WithBaiduChannel(string resourceName = null, Action<Humidifier.Pinpoint.BaiduChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.BaiduChannelFactory(resourceName, resourceFactoryAction));
        BaiduChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EmailChannelFactory WithEmailChannel(string resourceName = null, Action<Humidifier.Pinpoint.EmailChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EmailChannelFactory(resourceName, resourceFactoryAction));
        EmailChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EmailTemplateFactory WithEmailTemplate(string resourceName = null, Action<Humidifier.Pinpoint.EmailTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EmailTemplateFactory(resourceName, resourceFactoryAction));
        EmailTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.GCMChannelFactory WithGCMChannel(string resourceName = null, Action<Humidifier.Pinpoint.GCMChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.GCMChannelFactory(resourceName, resourceFactoryAction));
        GCMChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.InAppTemplateFactory WithInAppTemplate(string resourceName = null, Action<Humidifier.Pinpoint.InAppTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.InAppTemplateFactory(resourceName, resourceFactoryAction));
        InAppTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.PushTemplateFactory WithPushTemplate(string resourceName = null, Action<Humidifier.Pinpoint.PushTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.PushTemplateFactory(resourceName, resourceFactoryAction));
        PushTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SMSChannelFactory WithSMSChannel(string resourceName = null, Action<Humidifier.Pinpoint.SMSChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SMSChannelFactory(resourceName, resourceFactoryAction));
        SMSChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SmsTemplateFactory WithSmsTemplate(string resourceName = null, Action<Humidifier.Pinpoint.SmsTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SmsTemplateFactory(resourceName, resourceFactoryAction));
        SmsTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.VoiceChannelFactory WithVoiceChannel(string resourceName = null, Action<Humidifier.Pinpoint.VoiceChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.VoiceChannelFactory(resourceName, resourceFactoryAction));
        VoiceChannelFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.ConfigurationSetFactory WithPinpointEmailConfigurationSet(string resourceName = null, Action<Humidifier.PinpointEmail.ConfigurationSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.ConfigurationSetFactory(resourceName, resourceFactoryAction));
        PinpointEmailConfigurationSetFactories.Add(factory);
        return factory;
    }

    public SES.ConfigurationSetFactory WithSESConfigurationSet(string resourceName = null, Action<Humidifier.SES.ConfigurationSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ConfigurationSetFactory(resourceName, resourceFactoryAction));
        SESConfigurationSetFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.ConfigurationSetEventDestinationFactory WithPinpointEmailConfigurationSetEventDestination(string resourceName = null, Action<Humidifier.PinpointEmail.ConfigurationSetEventDestination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.ConfigurationSetEventDestinationFactory(resourceName, resourceFactoryAction));
        PinpointEmailConfigurationSetEventDestinationFactories.Add(factory);
        return factory;
    }

    public SES.ConfigurationSetEventDestinationFactory WithSESConfigurationSetEventDestination(string resourceName = null, Action<Humidifier.SES.ConfigurationSetEventDestination> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ConfigurationSetEventDestinationFactory(resourceName, resourceFactoryAction));
        SESConfigurationSetEventDestinationFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.DedicatedIpPoolFactory WithPinpointEmailDedicatedIpPool(string resourceName = null, Action<Humidifier.PinpointEmail.DedicatedIpPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.DedicatedIpPoolFactory(resourceName, resourceFactoryAction));
        PinpointEmailDedicatedIpPoolFactories.Add(factory);
        return factory;
    }

    public SES.DedicatedIpPoolFactory WithSESDedicatedIpPool(string resourceName = null, Action<Humidifier.SES.DedicatedIpPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.DedicatedIpPoolFactory(resourceName, resourceFactoryAction));
        SESDedicatedIpPoolFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.IdentityFactory WithIdentity(string resourceName = null, Action<Humidifier.PinpointEmail.Identity> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.IdentityFactory(resourceName, resourceFactoryAction));
        IdentityFactories.Add(factory);
        return factory;
    }

    public Pipes.PipeFactory WithPipe(string resourceName = null, Action<Humidifier.Pipes.Pipe> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Pipes.PipeFactory(resourceName, resourceFactoryAction));
        PipeFactories.Add(factory);
        return factory;
    }

    public Proton.EnvironmentAccountConnectionFactory WithEnvironmentAccountConnection(string resourceName = null, Action<Humidifier.Proton.EnvironmentAccountConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.EnvironmentAccountConnectionFactory(resourceName, resourceFactoryAction));
        EnvironmentAccountConnectionFactories.Add(factory);
        return factory;
    }

    public Proton.EnvironmentTemplateFactory WithEnvironmentTemplate(string resourceName = null, Action<Humidifier.Proton.EnvironmentTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.EnvironmentTemplateFactory(resourceName, resourceFactoryAction));
        EnvironmentTemplateFactories.Add(factory);
        return factory;
    }

    public Proton.ServiceTemplateFactory WithServiceTemplate(string resourceName = null, Action<Humidifier.Proton.ServiceTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.ServiceTemplateFactory(resourceName, resourceFactoryAction));
        ServiceTemplateFactories.Add(factory);
        return factory;
    }

    public QBusiness.PluginFactory WithPlugin(string resourceName = null, Action<Humidifier.QBusiness.Plugin> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.PluginFactory(resourceName, resourceFactoryAction));
        PluginFactories.Add(factory);
        return factory;
    }

    public QBusiness.RetrieverFactory WithRetriever(string resourceName = null, Action<Humidifier.QBusiness.Retriever> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.RetrieverFactory(resourceName, resourceFactoryAction));
        RetrieverFactories.Add(factory);
        return factory;
    }

    public QBusiness.WebExperienceFactory WithWebExperience(string resourceName = null, Action<Humidifier.QBusiness.WebExperience> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.WebExperienceFactory(resourceName, resourceFactoryAction));
        WebExperienceFactories.Add(factory);
        return factory;
    }

    public QLDB.LedgerFactory WithLedger(string resourceName = null, Action<Humidifier.QLDB.Ledger> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QLDB.LedgerFactory(resourceName, resourceFactoryAction));
        LedgerFactories.Add(factory);
        return factory;
    }

    public QuickSight.AnalysisFactory WithAnalysis(string resourceName = null, Action<Humidifier.QuickSight.Analysis> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.AnalysisFactory(resourceName, resourceFactoryAction));
        AnalysisFactories.Add(factory);
        return factory;
    }

    public QuickSight.DataSetFactory WithDataSet(string resourceName = null, Action<Humidifier.QuickSight.DataSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DataSetFactory(resourceName, resourceFactoryAction));
        DataSetFactories.Add(factory);
        return factory;
    }

    public QuickSight.RefreshScheduleFactory WithRefreshSchedule(string resourceName = null, Action<Humidifier.QuickSight.RefreshSchedule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.RefreshScheduleFactory(resourceName, resourceFactoryAction));
        RefreshScheduleFactories.Add(factory);
        return factory;
    }

    public QuickSight.TopicFactory WithQuickSightTopic(string resourceName = null, Action<Humidifier.QuickSight.Topic> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.TopicFactory(resourceName, resourceFactoryAction));
        QuickSightTopicFactories.Add(factory);
        return factory;
    }

    public SNS.TopicFactory WithSNSTopic(string resourceName = null, Action<Humidifier.SNS.Topic> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicFactory(resourceName, resourceFactoryAction));
        SNSTopicFactories.Add(factory);
        return factory;
    }

    public QuickSight.VPCConnectionFactory WithVPCConnection(string resourceName = null, Action<Humidifier.QuickSight.VPCConnection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.VPCConnectionFactory(resourceName, resourceFactoryAction));
        VPCConnectionFactories.Add(factory);
        return factory;
    }

    public RAM.ResourceShareFactory WithResourceShare(string resourceName = null, Action<Humidifier.RAM.ResourceShare> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RAM.ResourceShareFactory(resourceName, resourceFactoryAction));
        ResourceShareFactories.Add(factory);
        return factory;
    }

    public RDS.CustomDBEngineVersionFactory WithCustomDBEngineVersion(string resourceName = null, Action<Humidifier.RDS.CustomDBEngineVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.CustomDBEngineVersionFactory(resourceName, resourceFactoryAction));
        CustomDBEngineVersionFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyFactory WithDBProxy(string resourceName = null, Action<Humidifier.RDS.DBProxy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyFactory(resourceName, resourceFactoryAction));
        DBProxyFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyEndpointFactory WithDBProxyEndpoint(string resourceName = null, Action<Humidifier.RDS.DBProxyEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyEndpointFactory(resourceName, resourceFactoryAction));
        DBProxyEndpointFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyTargetGroupFactory WithDBProxyTargetGroup(string resourceName = null, Action<Humidifier.RDS.DBProxyTargetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyTargetGroupFactory(resourceName, resourceFactoryAction));
        DBProxyTargetGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSecurityGroupFactory WithDBSecurityGroup(string resourceName = null, Action<Humidifier.RDS.DBSecurityGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSecurityGroupFactory(resourceName, resourceFactoryAction));
        DBSecurityGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSecurityGroupIngressFactory WithDBSecurityGroupIngress(string resourceName = null, Action<Humidifier.RDS.DBSecurityGroupIngress> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        DBSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public RDS.GlobalClusterFactory WithGlobalCluster(string resourceName = null, Action<Humidifier.RDS.GlobalCluster> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.GlobalClusterFactory(resourceName, resourceFactoryAction));
        GlobalClusterFactories.Add(factory);
        return factory;
    }

    public RDS.OptionGroupFactory WithOptionGroup(string resourceName = null, Action<Humidifier.RDS.OptionGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.OptionGroupFactory(resourceName, resourceFactoryAction));
        OptionGroupFactories.Add(factory);
        return factory;
    }

    public RUM.AppMonitorFactory WithAppMonitor(string resourceName = null, Action<Humidifier.RUM.AppMonitor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RUM.AppMonitorFactory(resourceName, resourceFactoryAction));
        AppMonitorFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterParameterGroupFactory WithClusterParameterGroup(string resourceName = null, Action<Humidifier.Redshift.ClusterParameterGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        ClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSecurityGroupFactory WithClusterSecurityGroup(string resourceName = null, Action<Humidifier.Redshift.ClusterSecurityGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSecurityGroupFactory(resourceName, resourceFactoryAction));
        ClusterSecurityGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSecurityGroupIngressFactory WithClusterSecurityGroupIngress(string resourceName = null, Action<Humidifier.Redshift.ClusterSecurityGroupIngress> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        ClusterSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSubnetGroupFactory WithClusterSubnetGroup(string resourceName = null, Action<Humidifier.Redshift.ClusterSubnetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSubnetGroupFactory(resourceName, resourceFactoryAction));
        ClusterSubnetGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.EndpointAccessFactory WithEndpointAccess(string resourceName = null, Action<Humidifier.Redshift.EndpointAccess> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EndpointAccessFactory(resourceName, resourceFactoryAction));
        EndpointAccessFactories.Add(factory);
        return factory;
    }

    public Redshift.EndpointAuthorizationFactory WithEndpointAuthorization(string resourceName = null, Action<Humidifier.Redshift.EndpointAuthorization> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EndpointAuthorizationFactory(resourceName, resourceFactoryAction));
        EndpointAuthorizationFactories.Add(factory);
        return factory;
    }

    public RedshiftServerless.NamespaceFactory WithNamespace(string resourceName = null, Action<Humidifier.RedshiftServerless.Namespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RedshiftServerless.NamespaceFactory(resourceName, resourceFactoryAction));
        NamespaceFactories.Add(factory);
        return factory;
    }

    public RedshiftServerless.WorkgroupFactory WithWorkgroup(string resourceName = null, Action<Humidifier.RedshiftServerless.Workgroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RedshiftServerless.WorkgroupFactory(resourceName, resourceFactoryAction));
        WorkgroupFactories.Add(factory);
        return factory;
    }

    public Rekognition.StreamProcessorFactory WithStreamProcessor(string resourceName = null, Action<Humidifier.Rekognition.StreamProcessor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.StreamProcessorFactory(resourceName, resourceFactoryAction));
        StreamProcessorFactories.Add(factory);
        return factory;
    }

    public ResilienceHub.ResiliencyPolicyFactory WithResiliencyPolicy(string resourceName = null, Action<Humidifier.ResilienceHub.ResiliencyPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResilienceHub.ResiliencyPolicyFactory(resourceName, resourceFactoryAction));
        ResiliencyPolicyFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.DefaultViewAssociationFactory WithDefaultViewAssociation(string resourceName = null, Action<Humidifier.ResourceExplorer2.DefaultViewAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.DefaultViewAssociationFactory(resourceName, resourceFactoryAction));
        DefaultViewAssociationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotFactory WithRobot(string resourceName = null, Action<Humidifier.RoboMaker.Robot> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotFactory(resourceName, resourceFactoryAction));
        RobotFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotApplicationFactory WithRobotApplication(string resourceName = null, Action<Humidifier.RoboMaker.RobotApplication> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotApplicationFactory(resourceName, resourceFactoryAction));
        RobotApplicationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotApplicationVersionFactory WithRobotApplicationVersion(string resourceName = null, Action<Humidifier.RoboMaker.RobotApplicationVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotApplicationVersionFactory(resourceName, resourceFactoryAction));
        RobotApplicationVersionFactories.Add(factory);
        return factory;
    }

    public RoboMaker.SimulationApplicationFactory WithSimulationApplication(string resourceName = null, Action<Humidifier.RoboMaker.SimulationApplication> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.SimulationApplicationFactory(resourceName, resourceFactoryAction));
        SimulationApplicationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.SimulationApplicationVersionFactory WithSimulationApplicationVersion(string resourceName = null, Action<Humidifier.RoboMaker.SimulationApplicationVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.SimulationApplicationVersionFactory(resourceName, resourceFactoryAction));
        SimulationApplicationVersionFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.CRLFactory WithCRL(string resourceName = null, Action<Humidifier.RolesAnywhere.CRL> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.CRLFactory(resourceName, resourceFactoryAction));
        CRLFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.TrustAnchorFactory WithTrustAnchor(string resourceName = null, Action<Humidifier.RolesAnywhere.TrustAnchor> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.TrustAnchorFactory(resourceName, resourceFactoryAction));
        TrustAnchorFactories.Add(factory);
        return factory;
    }

    public Route53.CidrCollectionFactory WithCidrCollection(string resourceName = null, Action<Humidifier.Route53.CidrCollection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.CidrCollectionFactory(resourceName, resourceFactoryAction));
        CidrCollectionFactories.Add(factory);
        return factory;
    }

    public Route53.DNSSECFactory WithDNSSEC(string resourceName = null, Action<Humidifier.Route53.DNSSEC> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.DNSSECFactory(resourceName, resourceFactoryAction));
        DNSSECFactories.Add(factory);
        return factory;
    }

    public Route53.HealthCheckFactory WithHealthCheck(string resourceName = null, Action<Humidifier.Route53.HealthCheck> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.HealthCheckFactory(resourceName, resourceFactoryAction));
        HealthCheckFactories.Add(factory);
        return factory;
    }

    public Route53.HostedZoneFactory WithHostedZone(string resourceName = null, Action<Humidifier.Route53.HostedZone> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.HostedZoneFactory(resourceName, resourceFactoryAction));
        HostedZoneFactories.Add(factory);
        return factory;
    }

    public Route53.KeySigningKeyFactory WithKeySigningKey(string resourceName = null, Action<Humidifier.Route53.KeySigningKey> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.KeySigningKeyFactory(resourceName, resourceFactoryAction));
        KeySigningKeyFactories.Add(factory);
        return factory;
    }

    public Route53.RecordSetFactory WithRecordSet(string resourceName = null, Action<Humidifier.Route53.RecordSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.RecordSetFactory(resourceName, resourceFactoryAction));
        RecordSetFactories.Add(factory);
        return factory;
    }

    public Route53.RecordSetGroupFactory WithRecordSetGroup(string resourceName = null, Action<Humidifier.Route53.RecordSetGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.RecordSetGroupFactory(resourceName, resourceFactoryAction));
        RecordSetGroupFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileAssociationFactory WithProfileAssociation(string resourceName = null, Action<Humidifier.Route53Profiles.ProfileAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileAssociationFactory(resourceName, resourceFactoryAction));
        ProfileAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileResourceAssociationFactory WithProfileResourceAssociation(string resourceName = null, Action<Humidifier.Route53Profiles.ProfileResourceAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileResourceAssociationFactory(resourceName, resourceFactoryAction));
        ProfileResourceAssociationFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.ControlPanelFactory WithControlPanel(string resourceName = null, Action<Humidifier.Route53RecoveryControl.ControlPanel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.ControlPanelFactory(resourceName, resourceFactoryAction));
        ControlPanelFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.RoutingControlFactory WithRoutingControl(string resourceName = null, Action<Humidifier.Route53RecoveryControl.RoutingControl> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.RoutingControlFactory(resourceName, resourceFactoryAction));
        RoutingControlFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.SafetyRuleFactory WithSafetyRule(string resourceName = null, Action<Humidifier.Route53RecoveryControl.SafetyRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.SafetyRuleFactory(resourceName, resourceFactoryAction));
        SafetyRuleFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.CellFactory WithCell(string resourceName = null, Action<Humidifier.Route53RecoveryReadiness.Cell> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.CellFactory(resourceName, resourceFactoryAction));
        CellFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.ReadinessCheckFactory WithReadinessCheck(string resourceName = null, Action<Humidifier.Route53RecoveryReadiness.ReadinessCheck> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.ReadinessCheckFactory(resourceName, resourceFactoryAction));
        ReadinessCheckFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.RecoveryGroupFactory WithRecoveryGroup(string resourceName = null, Action<Humidifier.Route53RecoveryReadiness.RecoveryGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.RecoveryGroupFactory(resourceName, resourceFactoryAction));
        RecoveryGroupFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallDomainListFactory WithFirewallDomainList(string resourceName = null, Action<Humidifier.Route53Resolver.FirewallDomainList> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallDomainListFactory(resourceName, resourceFactoryAction));
        FirewallDomainListFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallRuleGroupFactory WithFirewallRuleGroup(string resourceName = null, Action<Humidifier.Route53Resolver.FirewallRuleGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallRuleGroupFactory(resourceName, resourceFactoryAction));
        FirewallRuleGroupFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallRuleGroupAssociationFactory WithFirewallRuleGroupAssociation(string resourceName = null, Action<Humidifier.Route53Resolver.FirewallRuleGroupAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallRuleGroupAssociationFactory(resourceName, resourceFactoryAction));
        FirewallRuleGroupAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.OutpostResolverFactory WithOutpostResolver(string resourceName = null, Action<Humidifier.Route53Resolver.OutpostResolver> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.OutpostResolverFactory(resourceName, resourceFactoryAction));
        OutpostResolverFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverConfigFactory WithResolverConfig(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverConfigFactory(resourceName, resourceFactoryAction));
        ResolverConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverDNSSECConfigFactory WithResolverDNSSECConfig(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverDNSSECConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverDNSSECConfigFactory(resourceName, resourceFactoryAction));
        ResolverDNSSECConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverEndpointFactory WithResolverEndpoint(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverEndpoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverEndpointFactory(resourceName, resourceFactoryAction));
        ResolverEndpointFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverQueryLoggingConfigFactory WithResolverQueryLoggingConfig(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverQueryLoggingConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverQueryLoggingConfigFactory(resourceName, resourceFactoryAction));
        ResolverQueryLoggingConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverQueryLoggingConfigAssociationFactory WithResolverQueryLoggingConfigAssociation(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverQueryLoggingConfigAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverQueryLoggingConfigAssociationFactory(resourceName, resourceFactoryAction));
        ResolverQueryLoggingConfigAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverRuleFactory WithResolverRule(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverRuleFactory(resourceName, resourceFactoryAction));
        ResolverRuleFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverRuleAssociationFactory WithResolverRuleAssociation(string resourceName = null, Action<Humidifier.Route53Resolver.ResolverRuleAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverRuleAssociationFactory(resourceName, resourceFactoryAction));
        ResolverRuleAssociationFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantFactory WithAccessGrant(string resourceName = null, Action<Humidifier.S3.AccessGrant> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantFactory(resourceName, resourceFactoryAction));
        AccessGrantFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantsInstanceFactory WithAccessGrantsInstance(string resourceName = null, Action<Humidifier.S3.AccessGrantsInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantsInstanceFactory(resourceName, resourceFactoryAction));
        AccessGrantsInstanceFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantsLocationFactory WithAccessGrantsLocation(string resourceName = null, Action<Humidifier.S3.AccessGrantsLocation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantsLocationFactory(resourceName, resourceFactoryAction));
        AccessGrantsLocationFactories.Add(factory);
        return factory;
    }

    public S3.BucketPolicyFactory WithS3BucketPolicy(string resourceName = null, Action<Humidifier.S3.BucketPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3BucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3Express.BucketPolicyFactory WithS3ExpressBucketPolicy(string resourceName = null, Action<Humidifier.S3Express.BucketPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Express.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3ExpressBucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3Outposts.BucketPolicyFactory WithS3OutpostsBucketPolicy(string resourceName = null, Action<Humidifier.S3Outposts.BucketPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3OutpostsBucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3.MultiRegionAccessPointFactory WithMultiRegionAccessPoint(string resourceName = null, Action<Humidifier.S3.MultiRegionAccessPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.MultiRegionAccessPointFactory(resourceName, resourceFactoryAction));
        MultiRegionAccessPointFactories.Add(factory);
        return factory;
    }

    public S3.MultiRegionAccessPointPolicyFactory WithMultiRegionAccessPointPolicy(string resourceName = null, Action<Humidifier.S3.MultiRegionAccessPointPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.MultiRegionAccessPointPolicyFactory(resourceName, resourceFactoryAction));
        MultiRegionAccessPointPolicyFactories.Add(factory);
        return factory;
    }

    public S3.StorageLensFactory WithStorageLens(string resourceName = null, Action<Humidifier.S3.StorageLens> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.StorageLensFactory(resourceName, resourceFactoryAction));
        StorageLensFactories.Add(factory);
        return factory;
    }

    public S3.StorageLensGroupFactory WithStorageLensGroup(string resourceName = null, Action<Humidifier.S3.StorageLensGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3.StorageLensGroupFactory(resourceName, resourceFactoryAction));
        StorageLensGroupFactories.Add(factory);
        return factory;
    }

    public S3Express.DirectoryBucketFactory WithDirectoryBucket(string resourceName = null, Action<Humidifier.S3Express.DirectoryBucket> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3Express.DirectoryBucketFactory(resourceName, resourceFactoryAction));
        DirectoryBucketFactories.Add(factory);
        return factory;
    }

    public S3ObjectLambda.AccessPointPolicyFactory WithAccessPointPolicy(string resourceName = null, Action<Humidifier.S3ObjectLambda.AccessPointPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new S3ObjectLambda.AccessPointPolicyFactory(resourceName, resourceFactoryAction));
        AccessPointPolicyFactories.Add(factory);
        return factory;
    }

    public SES.ContactListFactory WithContactList(string resourceName = null, Action<Humidifier.SES.ContactList> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ContactListFactory(resourceName, resourceFactoryAction));
        ContactListFactories.Add(factory);
        return factory;
    }

    public SES.EmailIdentityFactory WithEmailIdentity(string resourceName = null, Action<Humidifier.SES.EmailIdentity> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.EmailIdentityFactory(resourceName, resourceFactoryAction));
        EmailIdentityFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerAddonInstanceFactory WithMailManagerAddonInstance(string resourceName = null, Action<Humidifier.SES.MailManagerAddonInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerAddonInstanceFactory(resourceName, resourceFactoryAction));
        MailManagerAddonInstanceFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerAddonSubscriptionFactory WithMailManagerAddonSubscription(string resourceName = null, Action<Humidifier.SES.MailManagerAddonSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerAddonSubscriptionFactory(resourceName, resourceFactoryAction));
        MailManagerAddonSubscriptionFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerArchiveFactory WithMailManagerArchive(string resourceName = null, Action<Humidifier.SES.MailManagerArchive> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerArchiveFactory(resourceName, resourceFactoryAction));
        MailManagerArchiveFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerIngressPointFactory WithMailManagerIngressPoint(string resourceName = null, Action<Humidifier.SES.MailManagerIngressPoint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerIngressPointFactory(resourceName, resourceFactoryAction));
        MailManagerIngressPointFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerRelayFactory WithMailManagerRelay(string resourceName = null, Action<Humidifier.SES.MailManagerRelay> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerRelayFactory(resourceName, resourceFactoryAction));
        MailManagerRelayFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerRuleSetFactory WithMailManagerRuleSet(string resourceName = null, Action<Humidifier.SES.MailManagerRuleSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerRuleSetFactory(resourceName, resourceFactoryAction));
        MailManagerRuleSetFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerTrafficPolicyFactory WithMailManagerTrafficPolicy(string resourceName = null, Action<Humidifier.SES.MailManagerTrafficPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerTrafficPolicyFactory(resourceName, resourceFactoryAction));
        MailManagerTrafficPolicyFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptFilterFactory WithReceiptFilter(string resourceName = null, Action<Humidifier.SES.ReceiptFilter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptFilterFactory(resourceName, resourceFactoryAction));
        ReceiptFilterFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptRuleFactory WithReceiptRule(string resourceName = null, Action<Humidifier.SES.ReceiptRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptRuleFactory(resourceName, resourceFactoryAction));
        ReceiptRuleFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptRuleSetFactory WithReceiptRuleSet(string resourceName = null, Action<Humidifier.SES.ReceiptRuleSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptRuleSetFactory(resourceName, resourceFactoryAction));
        ReceiptRuleSetFactories.Add(factory);
        return factory;
    }

    public SES.VdmAttributesFactory WithVdmAttributes(string resourceName = null, Action<Humidifier.SES.VdmAttributes> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SES.VdmAttributesFactory(resourceName, resourceFactoryAction));
        VdmAttributesFactories.Add(factory);
        return factory;
    }

    public SNS.SubscriptionFactory WithSubscription(string resourceName = null, Action<Humidifier.SNS.Subscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.SubscriptionFactory(resourceName, resourceFactoryAction));
        SubscriptionFactories.Add(factory);
        return factory;
    }

    public SNS.TopicInlinePolicyFactory WithTopicInlinePolicy(string resourceName = null, Action<Humidifier.SNS.TopicInlinePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicInlinePolicyFactory(resourceName, resourceFactoryAction));
        TopicInlinePolicyFactories.Add(factory);
        return factory;
    }

    public SNS.TopicPolicyFactory WithTopicPolicy(string resourceName = null, Action<Humidifier.SNS.TopicPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicPolicyFactory(resourceName, resourceFactoryAction));
        TopicPolicyFactories.Add(factory);
        return factory;
    }

    public SQS.QueueInlinePolicyFactory WithQueueInlinePolicy(string resourceName = null, Action<Humidifier.SQS.QueueInlinePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueueInlinePolicyFactory(resourceName, resourceFactoryAction));
        QueueInlinePolicyFactories.Add(factory);
        return factory;
    }

    public SQS.QueuePolicyFactory WithQueuePolicy(string resourceName = null, Action<Humidifier.SQS.QueuePolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueuePolicyFactory(resourceName, resourceFactoryAction));
        QueuePolicyFactories.Add(factory);
        return factory;
    }

    public SSM.AssociationFactory WithAssociation(string resourceName = null, Action<Humidifier.SSM.Association> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.AssociationFactory(resourceName, resourceFactoryAction));
        AssociationFactories.Add(factory);
        return factory;
    }

    public SSM.DocumentFactory WithDocument(string resourceName = null, Action<Humidifier.SSM.Document> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.DocumentFactory(resourceName, resourceFactoryAction));
        DocumentFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowFactory WithMaintenanceWindow(string resourceName = null, Action<Humidifier.SSM.MaintenanceWindow> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowTargetFactory WithMaintenanceWindowTarget(string resourceName = null, Action<Humidifier.SSM.MaintenanceWindowTarget> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowTargetFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowTargetFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowTaskFactory WithMaintenanceWindowTask(string resourceName = null, Action<Humidifier.SSM.MaintenanceWindowTask> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowTaskFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowTaskFactories.Add(factory);
        return factory;
    }

    public SSM.ParameterFactory WithParameter(string resourceName = null, Action<Humidifier.SSM.Parameter> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ParameterFactory(resourceName, resourceFactoryAction));
        ParameterFactories.Add(factory);
        return factory;
    }

    public SSM.PatchBaselineFactory WithPatchBaseline(string resourceName = null, Action<Humidifier.SSM.PatchBaseline> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.PatchBaselineFactory(resourceName, resourceFactoryAction));
        PatchBaselineFactories.Add(factory);
        return factory;
    }

    public SSM.ResourceDataSyncFactory WithResourceDataSync(string resourceName = null, Action<Humidifier.SSM.ResourceDataSync> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ResourceDataSyncFactory(resourceName, resourceFactoryAction));
        ResourceDataSyncFactories.Add(factory);
        return factory;
    }

    public SSMContacts.ContactFactory WithContact(string resourceName = null, Action<Humidifier.SSMContacts.Contact> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.ContactFactory(resourceName, resourceFactoryAction));
        ContactFactories.Add(factory);
        return factory;
    }

    public SSMContacts.ContactChannelFactory WithContactChannel(string resourceName = null, Action<Humidifier.SSMContacts.ContactChannel> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.ContactChannelFactory(resourceName, resourceFactoryAction));
        ContactChannelFactories.Add(factory);
        return factory;
    }

    public SSMContacts.PlanFactory WithPlan(string resourceName = null, Action<Humidifier.SSMContacts.Plan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.PlanFactory(resourceName, resourceFactoryAction));
        PlanFactories.Add(factory);
        return factory;
    }

    public SSMContacts.RotationFactory WithRotation(string resourceName = null, Action<Humidifier.SSMContacts.Rotation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.RotationFactory(resourceName, resourceFactoryAction));
        RotationFactories.Add(factory);
        return factory;
    }

    public SSMIncidents.ReplicationSetFactory WithReplicationSet(string resourceName = null, Action<Humidifier.SSMIncidents.ReplicationSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMIncidents.ReplicationSetFactory(resourceName, resourceFactoryAction));
        ReplicationSetFactories.Add(factory);
        return factory;
    }

    public SSMIncidents.ResponsePlanFactory WithResponsePlan(string resourceName = null, Action<Humidifier.SSMIncidents.ResponsePlan> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMIncidents.ResponsePlanFactory(resourceName, resourceFactoryAction));
        ResponsePlanFactories.Add(factory);
        return factory;
    }

    public SSMQuickSetup.ConfigurationManagerFactory WithConfigurationManager(string resourceName = null, Action<Humidifier.SSMQuickSetup.ConfigurationManager> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSMQuickSetup.ConfigurationManagerFactory(resourceName, resourceFactoryAction));
        ConfigurationManagerFactories.Add(factory);
        return factory;
    }

    public SSO.ApplicationAssignmentFactory WithApplicationAssignment(string resourceName = null, Action<Humidifier.SSO.ApplicationAssignment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.ApplicationAssignmentFactory(resourceName, resourceFactoryAction));
        ApplicationAssignmentFactories.Add(factory);
        return factory;
    }

    public SSO.AssignmentFactory WithAssignment(string resourceName = null, Action<Humidifier.SSO.Assignment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.AssignmentFactory(resourceName, resourceFactoryAction));
        AssignmentFactories.Add(factory);
        return factory;
    }

    public SSO.InstanceAccessControlAttributeConfigurationFactory WithInstanceAccessControlAttributeConfiguration(string resourceName = null, Action<Humidifier.SSO.InstanceAccessControlAttributeConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.InstanceAccessControlAttributeConfigurationFactory(resourceName, resourceFactoryAction));
        InstanceAccessControlAttributeConfigurationFactories.Add(factory);
        return factory;
    }

    public SSO.PermissionSetFactory WithPermissionSet(string resourceName = null, Action<Humidifier.SSO.PermissionSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.PermissionSetFactory(resourceName, resourceFactoryAction));
        PermissionSetFactories.Add(factory);
        return factory;
    }

    public SageMaker.AppImageConfigFactory WithAppImageConfig(string resourceName = null, Action<Humidifier.SageMaker.AppImageConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.AppImageConfigFactory(resourceName, resourceFactoryAction));
        AppImageConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.CodeRepositoryFactory WithCodeRepository(string resourceName = null, Action<Humidifier.SageMaker.CodeRepository> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.CodeRepositoryFactory(resourceName, resourceFactoryAction));
        CodeRepositoryFactories.Add(factory);
        return factory;
    }

    public SageMaker.DataQualityJobDefinitionFactory WithDataQualityJobDefinition(string resourceName = null, Action<Humidifier.SageMaker.DataQualityJobDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DataQualityJobDefinitionFactory(resourceName, resourceFactoryAction));
        DataQualityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.DeviceFleetFactory WithDeviceFleet(string resourceName = null, Action<Humidifier.SageMaker.DeviceFleet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DeviceFleetFactory(resourceName, resourceFactoryAction));
        DeviceFleetFactories.Add(factory);
        return factory;
    }

    public SageMaker.EndpointConfigFactory WithEndpointConfig(string resourceName = null, Action<Humidifier.SageMaker.EndpointConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.EndpointConfigFactory(resourceName, resourceFactoryAction));
        EndpointConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.FeatureGroupFactory WithFeatureGroup(string resourceName = null, Action<Humidifier.SageMaker.FeatureGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.FeatureGroupFactory(resourceName, resourceFactoryAction));
        FeatureGroupFactories.Add(factory);
        return factory;
    }

    public SageMaker.ImageVersionFactory WithImageVersion(string resourceName = null, Action<Humidifier.SageMaker.ImageVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ImageVersionFactory(resourceName, resourceFactoryAction));
        ImageVersionFactories.Add(factory);
        return factory;
    }

    public SageMaker.InferenceComponentFactory WithInferenceComponent(string resourceName = null, Action<Humidifier.SageMaker.InferenceComponent> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.InferenceComponentFactory(resourceName, resourceFactoryAction));
        InferenceComponentFactories.Add(factory);
        return factory;
    }

    public SageMaker.InferenceExperimentFactory WithInferenceExperiment(string resourceName = null, Action<Humidifier.SageMaker.InferenceExperiment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.InferenceExperimentFactory(resourceName, resourceFactoryAction));
        InferenceExperimentFactories.Add(factory);
        return factory;
    }

    public SageMaker.MlflowTrackingServerFactory WithMlflowTrackingServer(string resourceName = null, Action<Humidifier.SageMaker.MlflowTrackingServer> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.MlflowTrackingServerFactory(resourceName, resourceFactoryAction));
        MlflowTrackingServerFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelBiasJobDefinitionFactory WithModelBiasJobDefinition(string resourceName = null, Action<Humidifier.SageMaker.ModelBiasJobDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelBiasJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelBiasJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelCardFactory WithModelCard(string resourceName = null, Action<Humidifier.SageMaker.ModelCard> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelCardFactory(resourceName, resourceFactoryAction));
        ModelCardFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelExplainabilityJobDefinitionFactory WithModelExplainabilityJobDefinition(string resourceName = null, Action<Humidifier.SageMaker.ModelExplainabilityJobDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelExplainabilityJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelExplainabilityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelPackageFactory WithModelPackage(string resourceName = null, Action<Humidifier.SageMaker.ModelPackage> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelPackageFactory(resourceName, resourceFactoryAction));
        ModelPackageFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelPackageGroupFactory WithModelPackageGroup(string resourceName = null, Action<Humidifier.SageMaker.ModelPackageGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelPackageGroupFactory(resourceName, resourceFactoryAction));
        ModelPackageGroupFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelQualityJobDefinitionFactory WithModelQualityJobDefinition(string resourceName = null, Action<Humidifier.SageMaker.ModelQualityJobDefinition> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelQualityJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelQualityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.MonitoringScheduleFactory WithMonitoringSchedule(string resourceName = null, Action<Humidifier.SageMaker.MonitoringSchedule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.MonitoringScheduleFactory(resourceName, resourceFactoryAction));
        MonitoringScheduleFactories.Add(factory);
        return factory;
    }

    public SageMaker.NotebookInstanceFactory WithNotebookInstance(string resourceName = null, Action<Humidifier.SageMaker.NotebookInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.NotebookInstanceFactory(resourceName, resourceFactoryAction));
        NotebookInstanceFactories.Add(factory);
        return factory;
    }

    public SageMaker.NotebookInstanceLifecycleConfigFactory WithNotebookInstanceLifecycleConfig(string resourceName = null, Action<Humidifier.SageMaker.NotebookInstanceLifecycleConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.NotebookInstanceLifecycleConfigFactory(resourceName, resourceFactoryAction));
        NotebookInstanceLifecycleConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.SpaceFactory WithSpace(string resourceName = null, Action<Humidifier.SageMaker.Space> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.SpaceFactory(resourceName, resourceFactoryAction));
        SpaceFactories.Add(factory);
        return factory;
    }

    public SageMaker.StudioLifecycleConfigFactory WithStudioLifecycleConfig(string resourceName = null, Action<Humidifier.SageMaker.StudioLifecycleConfig> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.StudioLifecycleConfigFactory(resourceName, resourceFactoryAction));
        StudioLifecycleConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.WorkteamFactory WithWorkteam(string resourceName = null, Action<Humidifier.SageMaker.Workteam> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.WorkteamFactory(resourceName, resourceFactoryAction));
        WorkteamFactories.Add(factory);
        return factory;
    }

    public Scheduler.ScheduleGroupFactory WithScheduleGroup(string resourceName = null, Action<Humidifier.Scheduler.ScheduleGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Scheduler.ScheduleGroupFactory(resourceName, resourceFactoryAction));
        ScheduleGroupFactories.Add(factory);
        return factory;
    }

    public SecretsManager.RotationScheduleFactory WithRotationSchedule(string resourceName = null, Action<Humidifier.SecretsManager.RotationSchedule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.RotationScheduleFactory(resourceName, resourceFactoryAction));
        RotationScheduleFactories.Add(factory);
        return factory;
    }

    public SecretsManager.SecretFactory WithSecret(string resourceName = null, Action<Humidifier.SecretsManager.Secret> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.SecretFactory(resourceName, resourceFactoryAction));
        SecretFactories.Add(factory);
        return factory;
    }

    public SecretsManager.SecretTargetAttachmentFactory WithSecretTargetAttachment(string resourceName = null, Action<Humidifier.SecretsManager.SecretTargetAttachment> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.SecretTargetAttachmentFactory(resourceName, resourceFactoryAction));
        SecretTargetAttachmentFactories.Add(factory);
        return factory;
    }

    public SecurityHub.AutomationRuleFactory WithAutomationRule(string resourceName = null, Action<Humidifier.SecurityHub.AutomationRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.AutomationRuleFactory(resourceName, resourceFactoryAction));
        AutomationRuleFactories.Add(factory);
        return factory;
    }

    public SecurityHub.ConfigurationPolicyFactory WithConfigurationPolicy(string resourceName = null, Action<Humidifier.SecurityHub.ConfigurationPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.ConfigurationPolicyFactory(resourceName, resourceFactoryAction));
        ConfigurationPolicyFactories.Add(factory);
        return factory;
    }

    public SecurityHub.DelegatedAdminFactory WithDelegatedAdmin(string resourceName = null, Action<Humidifier.SecurityHub.DelegatedAdmin> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.DelegatedAdminFactory(resourceName, resourceFactoryAction));
        DelegatedAdminFactories.Add(factory);
        return factory;
    }

    public SecurityHub.FindingAggregatorFactory WithFindingAggregator(string resourceName = null, Action<Humidifier.SecurityHub.FindingAggregator> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.FindingAggregatorFactory(resourceName, resourceFactoryAction));
        FindingAggregatorFactories.Add(factory);
        return factory;
    }

    public SecurityHub.HubFactory WithHub(string resourceName = null, Action<Humidifier.SecurityHub.Hub> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.HubFactory(resourceName, resourceFactoryAction));
        HubFactories.Add(factory);
        return factory;
    }

    public SecurityHub.InsightFactory WithInsight(string resourceName = null, Action<Humidifier.SecurityHub.Insight> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.InsightFactory(resourceName, resourceFactoryAction));
        InsightFactories.Add(factory);
        return factory;
    }

    public SecurityHub.OrganizationConfigurationFactory WithOrganizationConfiguration(string resourceName = null, Action<Humidifier.SecurityHub.OrganizationConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.OrganizationConfigurationFactory(resourceName, resourceFactoryAction));
        OrganizationConfigurationFactories.Add(factory);
        return factory;
    }

    public SecurityHub.PolicyAssociationFactory WithPolicyAssociation(string resourceName = null, Action<Humidifier.SecurityHub.PolicyAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.PolicyAssociationFactory(resourceName, resourceFactoryAction));
        PolicyAssociationFactories.Add(factory);
        return factory;
    }

    public SecurityHub.ProductSubscriptionFactory WithProductSubscription(string resourceName = null, Action<Humidifier.SecurityHub.ProductSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.ProductSubscriptionFactory(resourceName, resourceFactoryAction));
        ProductSubscriptionFactories.Add(factory);
        return factory;
    }

    public SecurityHub.SecurityControlFactory WithSecurityControl(string resourceName = null, Action<Humidifier.SecurityHub.SecurityControl> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.SecurityControlFactory(resourceName, resourceFactoryAction));
        SecurityControlFactories.Add(factory);
        return factory;
    }

    public SecurityHub.StandardFactory WithStandard(string resourceName = null, Action<Humidifier.SecurityHub.Standard> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.StandardFactory(resourceName, resourceFactoryAction));
        StandardFactories.Add(factory);
        return factory;
    }

    public SecurityLake.AwsLogSourceFactory WithAwsLogSource(string resourceName = null, Action<Humidifier.SecurityLake.AwsLogSource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.AwsLogSourceFactory(resourceName, resourceFactoryAction));
        AwsLogSourceFactories.Add(factory);
        return factory;
    }

    public SecurityLake.DataLakeFactory WithDataLake(string resourceName = null, Action<Humidifier.SecurityLake.DataLake> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.DataLakeFactory(resourceName, resourceFactoryAction));
        DataLakeFactories.Add(factory);
        return factory;
    }

    public SecurityLake.SubscriberFactory WithSubscriber(string resourceName = null, Action<Humidifier.SecurityLake.Subscriber> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.SubscriberFactory(resourceName, resourceFactoryAction));
        SubscriberFactories.Add(factory);
        return factory;
    }

    public SecurityLake.SubscriberNotificationFactory WithSubscriberNotification(string resourceName = null, Action<Humidifier.SecurityLake.SubscriberNotification> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.SubscriberNotificationFactory(resourceName, resourceFactoryAction));
        SubscriberNotificationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.AcceptedPortfolioShareFactory WithAcceptedPortfolioShare(string resourceName = null, Action<Humidifier.ServiceCatalog.AcceptedPortfolioShare> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.AcceptedPortfolioShareFactory(resourceName, resourceFactoryAction));
        AcceptedPortfolioShareFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.CloudFormationProductFactory WithCloudFormationProduct(string resourceName = null, Action<Humidifier.ServiceCatalog.CloudFormationProduct> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.CloudFormationProductFactory(resourceName, resourceFactoryAction));
        CloudFormationProductFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.CloudFormationProvisionedProductFactory WithCloudFormationProvisionedProduct(string resourceName = null, Action<Humidifier.ServiceCatalog.CloudFormationProvisionedProduct> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.CloudFormationProvisionedProductFactory(resourceName, resourceFactoryAction));
        CloudFormationProvisionedProductFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchNotificationConstraintFactory WithLaunchNotificationConstraint(string resourceName = null, Action<Humidifier.ServiceCatalog.LaunchNotificationConstraint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchNotificationConstraintFactory(resourceName, resourceFactoryAction));
        LaunchNotificationConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchRoleConstraintFactory WithLaunchRoleConstraint(string resourceName = null, Action<Humidifier.ServiceCatalog.LaunchRoleConstraint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchRoleConstraintFactory(resourceName, resourceFactoryAction));
        LaunchRoleConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchTemplateConstraintFactory WithLaunchTemplateConstraint(string resourceName = null, Action<Humidifier.ServiceCatalog.LaunchTemplateConstraint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchTemplateConstraintFactory(resourceName, resourceFactoryAction));
        LaunchTemplateConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioFactory WithPortfolio(string resourceName = null, Action<Humidifier.ServiceCatalog.Portfolio> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioFactory(resourceName, resourceFactoryAction));
        PortfolioFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioPrincipalAssociationFactory WithPortfolioPrincipalAssociation(string resourceName = null, Action<Humidifier.ServiceCatalog.PortfolioPrincipalAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioPrincipalAssociationFactory(resourceName, resourceFactoryAction));
        PortfolioPrincipalAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioProductAssociationFactory WithPortfolioProductAssociation(string resourceName = null, Action<Humidifier.ServiceCatalog.PortfolioProductAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioProductAssociationFactory(resourceName, resourceFactoryAction));
        PortfolioProductAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioShareFactory WithPortfolioShare(string resourceName = null, Action<Humidifier.ServiceCatalog.PortfolioShare> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioShareFactory(resourceName, resourceFactoryAction));
        PortfolioShareFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ResourceUpdateConstraintFactory WithResourceUpdateConstraint(string resourceName = null, Action<Humidifier.ServiceCatalog.ResourceUpdateConstraint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ResourceUpdateConstraintFactory(resourceName, resourceFactoryAction));
        ResourceUpdateConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ServiceActionFactory WithServiceAction(string resourceName = null, Action<Humidifier.ServiceCatalog.ServiceAction> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ServiceActionFactory(resourceName, resourceFactoryAction));
        ServiceActionFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ServiceActionAssociationFactory WithServiceActionAssociation(string resourceName = null, Action<Humidifier.ServiceCatalog.ServiceActionAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ServiceActionAssociationFactory(resourceName, resourceFactoryAction));
        ServiceActionAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.StackSetConstraintFactory WithStackSetConstraint(string resourceName = null, Action<Humidifier.ServiceCatalog.StackSetConstraint> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.StackSetConstraintFactory(resourceName, resourceFactoryAction));
        StackSetConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.TagOptionFactory WithTagOption(string resourceName = null, Action<Humidifier.ServiceCatalog.TagOption> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.TagOptionFactory(resourceName, resourceFactoryAction));
        TagOptionFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.TagOptionAssociationFactory WithTagOptionAssociation(string resourceName = null, Action<Humidifier.ServiceCatalog.TagOptionAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.TagOptionAssociationFactory(resourceName, resourceFactoryAction));
        TagOptionAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.AttributeGroupFactory WithAttributeGroup(string resourceName = null, Action<Humidifier.ServiceCatalogAppRegistry.AttributeGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.AttributeGroupFactory(resourceName, resourceFactoryAction));
        AttributeGroupFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.AttributeGroupAssociationFactory WithAttributeGroupAssociation(string resourceName = null, Action<Humidifier.ServiceCatalogAppRegistry.AttributeGroupAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.AttributeGroupAssociationFactory(resourceName, resourceFactoryAction));
        AttributeGroupAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.ResourceAssociationFactory WithResourceAssociation(string resourceName = null, Action<Humidifier.ServiceCatalogAppRegistry.ResourceAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.ResourceAssociationFactory(resourceName, resourceFactoryAction));
        ResourceAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.HttpNamespaceFactory WithHttpNamespace(string resourceName = null, Action<Humidifier.ServiceDiscovery.HttpNamespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.HttpNamespaceFactory(resourceName, resourceFactoryAction));
        HttpNamespaceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.PrivateDnsNamespaceFactory WithPrivateDnsNamespace(string resourceName = null, Action<Humidifier.ServiceDiscovery.PrivateDnsNamespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.PrivateDnsNamespaceFactory(resourceName, resourceFactoryAction));
        PrivateDnsNamespaceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.PublicDnsNamespaceFactory WithPublicDnsNamespace(string resourceName = null, Action<Humidifier.ServiceDiscovery.PublicDnsNamespace> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.PublicDnsNamespaceFactory(resourceName, resourceFactoryAction));
        PublicDnsNamespaceFactories.Add(factory);
        return factory;
    }

    public Shield.DRTAccessFactory WithDRTAccess(string resourceName = null, Action<Humidifier.Shield.DRTAccess> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.DRTAccessFactory(resourceName, resourceFactoryAction));
        DRTAccessFactories.Add(factory);
        return factory;
    }

    public Shield.ProactiveEngagementFactory WithProactiveEngagement(string resourceName = null, Action<Humidifier.Shield.ProactiveEngagement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProactiveEngagementFactory(resourceName, resourceFactoryAction));
        ProactiveEngagementFactories.Add(factory);
        return factory;
    }

    public Shield.ProtectionFactory WithProtection(string resourceName = null, Action<Humidifier.Shield.Protection> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProtectionFactory(resourceName, resourceFactoryAction));
        ProtectionFactories.Add(factory);
        return factory;
    }

    public Shield.ProtectionGroupFactory WithProtectionGroup(string resourceName = null, Action<Humidifier.Shield.ProtectionGroup> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProtectionGroupFactory(resourceName, resourceFactoryAction));
        ProtectionGroupFactories.Add(factory);
        return factory;
    }

    public Signer.ProfilePermissionFactory WithProfilePermission(string resourceName = null, Action<Humidifier.Signer.ProfilePermission> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Signer.ProfilePermissionFactory(resourceName, resourceFactoryAction));
        ProfilePermissionFactories.Add(factory);
        return factory;
    }

    public Signer.SigningProfileFactory WithSigningProfile(string resourceName = null, Action<Humidifier.Signer.SigningProfile> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Signer.SigningProfileFactory(resourceName, resourceFactoryAction));
        SigningProfileFactories.Add(factory);
        return factory;
    }

    public SimSpaceWeaver.SimulationFactory WithSimulation(string resourceName = null, Action<Humidifier.SimSpaceWeaver.Simulation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SimSpaceWeaver.SimulationFactory(resourceName, resourceFactoryAction));
        SimulationFactories.Add(factory);
        return factory;
    }

    public StepFunctions.ActivityFactory WithActivity(string resourceName = null, Action<Humidifier.StepFunctions.Activity> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.ActivityFactory(resourceName, resourceFactoryAction));
        ActivityFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineFactory WithStateMachine(string resourceName = null, Action<Humidifier.StepFunctions.StateMachine> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineFactory(resourceName, resourceFactoryAction));
        StateMachineFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineAliasFactory WithStateMachineAlias(string resourceName = null, Action<Humidifier.StepFunctions.StateMachineAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineAliasFactory(resourceName, resourceFactoryAction));
        StateMachineAliasFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineVersionFactory WithStateMachineVersion(string resourceName = null, Action<Humidifier.StepFunctions.StateMachineVersion> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineVersionFactory(resourceName, resourceFactoryAction));
        StateMachineVersionFactories.Add(factory);
        return factory;
    }

    public SupportApp.AccountAliasFactory WithAccountAlias(string resourceName = null, Action<Humidifier.SupportApp.AccountAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.AccountAliasFactory(resourceName, resourceFactoryAction));
        AccountAliasFactories.Add(factory);
        return factory;
    }

    public SupportApp.SlackWorkspaceConfigurationFactory WithSlackWorkspaceConfiguration(string resourceName = null, Action<Humidifier.SupportApp.SlackWorkspaceConfiguration> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.SlackWorkspaceConfigurationFactory(resourceName, resourceFactoryAction));
        SlackWorkspaceConfigurationFactories.Add(factory);
        return factory;
    }

    public Synthetics.CanaryFactory WithCanary(string resourceName = null, Action<Humidifier.Synthetics.Canary> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Synthetics.CanaryFactory(resourceName, resourceFactoryAction));
        CanaryFactories.Add(factory);
        return factory;
    }

    public Timestream.InfluxDBInstanceFactory WithInfluxDBInstance(string resourceName = null, Action<Humidifier.Timestream.InfluxDBInstance> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.InfluxDBInstanceFactory(resourceName, resourceFactoryAction));
        InfluxDBInstanceFactories.Add(factory);
        return factory;
    }

    public Timestream.ScheduledQueryFactory WithScheduledQuery(string resourceName = null, Action<Humidifier.Timestream.ScheduledQuery> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.ScheduledQueryFactory(resourceName, resourceFactoryAction));
        ScheduledQueryFactories.Add(factory);
        return factory;
    }

    public Transfer.AgreementFactory WithAgreement(string resourceName = null, Action<Humidifier.Transfer.Agreement> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.AgreementFactory(resourceName, resourceFactoryAction));
        AgreementFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.IdentitySourceFactory WithIdentitySource(string resourceName = null, Action<Humidifier.VerifiedPermissions.IdentitySource> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.IdentitySourceFactory(resourceName, resourceFactoryAction));
        IdentitySourceFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyStoreFactory WithPolicyStore(string resourceName = null, Action<Humidifier.VerifiedPermissions.PolicyStore> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyStoreFactory(resourceName, resourceFactoryAction));
        PolicyStoreFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyTemplateFactory WithPolicyTemplate(string resourceName = null, Action<Humidifier.VerifiedPermissions.PolicyTemplate> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyTemplateFactory(resourceName, resourceFactoryAction));
        PolicyTemplateFactories.Add(factory);
        return factory;
    }

    public VpcLattice.AccessLogSubscriptionFactory WithAccessLogSubscription(string resourceName = null, Action<Humidifier.VpcLattice.AccessLogSubscription> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.AccessLogSubscriptionFactory(resourceName, resourceFactoryAction));
        AccessLogSubscriptionFactories.Add(factory);
        return factory;
    }

    public VpcLattice.AuthPolicyFactory WithAuthPolicy(string resourceName = null, Action<Humidifier.VpcLattice.AuthPolicy> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.AuthPolicyFactory(resourceName, resourceFactoryAction));
        AuthPolicyFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkFactory WithServiceNetwork(string resourceName = null, Action<Humidifier.VpcLattice.ServiceNetwork> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkFactory(resourceName, resourceFactoryAction));
        ServiceNetworkFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkServiceAssociationFactory WithServiceNetworkServiceAssociation(string resourceName = null, Action<Humidifier.VpcLattice.ServiceNetworkServiceAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkServiceAssociationFactory(resourceName, resourceFactoryAction));
        ServiceNetworkServiceAssociationFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkVpcAssociationFactory WithServiceNetworkVpcAssociation(string resourceName = null, Action<Humidifier.VpcLattice.ServiceNetworkVpcAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkVpcAssociationFactory(resourceName, resourceFactoryAction));
        ServiceNetworkVpcAssociationFactories.Add(factory);
        return factory;
    }

    public WAF.ByteMatchSetFactory WithWAFByteMatchSet(string resourceName = null, Action<Humidifier.WAF.ByteMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.ByteMatchSetFactory(resourceName, resourceFactoryAction));
        WAFByteMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.ByteMatchSetFactory WithWAFRegionalByteMatchSet(string resourceName = null, Action<Humidifier.WAFRegional.ByteMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.ByteMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalByteMatchSetFactories.Add(factory);
        return factory;
    }

    public WAF.SizeConstraintSetFactory WithWAFSizeConstraintSet(string resourceName = null, Action<Humidifier.WAF.SizeConstraintSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.SizeConstraintSetFactory(resourceName, resourceFactoryAction));
        WAFSizeConstraintSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.SizeConstraintSetFactory WithWAFRegionalSizeConstraintSet(string resourceName = null, Action<Humidifier.WAFRegional.SizeConstraintSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.SizeConstraintSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalSizeConstraintSetFactories.Add(factory);
        return factory;
    }

    public WAF.SqlInjectionMatchSetFactory WithWAFSqlInjectionMatchSet(string resourceName = null, Action<Humidifier.WAF.SqlInjectionMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.SqlInjectionMatchSetFactory(resourceName, resourceFactoryAction));
        WAFSqlInjectionMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.SqlInjectionMatchSetFactory WithWAFRegionalSqlInjectionMatchSet(string resourceName = null, Action<Humidifier.WAFRegional.SqlInjectionMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.SqlInjectionMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalSqlInjectionMatchSetFactories.Add(factory);
        return factory;
    }

    public WAF.WebACLFactory WithWAFWebACL(string resourceName = null, Action<Humidifier.WAF.WebACL> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.WebACLFactory(resourceName, resourceFactoryAction));
        WAFWebACLFactories.Add(factory);
        return factory;
    }

    public WAFRegional.WebACLFactory WithWAFRegionalWebACL(string resourceName = null, Action<Humidifier.WAFRegional.WebACL> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.WebACLFactory(resourceName, resourceFactoryAction));
        WAFRegionalWebACLFactories.Add(factory);
        return factory;
    }

    public WAFv2.WebACLFactory WithWAFv2WebACL(string resourceName = null, Action<Humidifier.WAFv2.WebACL> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.WebACLFactory(resourceName, resourceFactoryAction));
        WAFv2WebACLFactories.Add(factory);
        return factory;
    }

    public WAF.XssMatchSetFactory WithWAFXssMatchSet(string resourceName = null, Action<Humidifier.WAF.XssMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.XssMatchSetFactory(resourceName, resourceFactoryAction));
        WAFXssMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.XssMatchSetFactory WithWAFRegionalXssMatchSet(string resourceName = null, Action<Humidifier.WAFRegional.XssMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.XssMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalXssMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.GeoMatchSetFactory WithGeoMatchSet(string resourceName = null, Action<Humidifier.WAFRegional.GeoMatchSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.GeoMatchSetFactory(resourceName, resourceFactoryAction));
        GeoMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RateBasedRuleFactory WithRateBasedRule(string resourceName = null, Action<Humidifier.WAFRegional.RateBasedRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RateBasedRuleFactory(resourceName, resourceFactoryAction));
        RateBasedRuleFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RegexPatternSetFactory WithWAFRegionalRegexPatternSet(string resourceName = null, Action<Humidifier.WAFRegional.RegexPatternSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RegexPatternSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalRegexPatternSetFactories.Add(factory);
        return factory;
    }

    public WAFv2.RegexPatternSetFactory WithWAFv2RegexPatternSet(string resourceName = null, Action<Humidifier.WAFv2.RegexPatternSet> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.RegexPatternSetFactory(resourceName, resourceFactoryAction));
        WAFv2RegexPatternSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.WebACLAssociationFactory WithWAFRegionalWebACLAssociation(string resourceName = null, Action<Humidifier.WAFRegional.WebACLAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.WebACLAssociationFactory(resourceName, resourceFactoryAction));
        WAFRegionalWebACLAssociationFactories.Add(factory);
        return factory;
    }

    public WAFv2.WebACLAssociationFactory WithWAFv2WebACLAssociation(string resourceName = null, Action<Humidifier.WAFv2.WebACLAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.WebACLAssociationFactory(resourceName, resourceFactoryAction));
        WAFv2WebACLAssociationFactories.Add(factory);
        return factory;
    }

    public Wisdom.AssistantFactory WithAssistant(string resourceName = null, Action<Humidifier.Wisdom.Assistant> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.AssistantFactory(resourceName, resourceFactoryAction));
        AssistantFactories.Add(factory);
        return factory;
    }

    public Wisdom.AssistantAssociationFactory WithAssistantAssociation(string resourceName = null, Action<Humidifier.Wisdom.AssistantAssociation> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.AssistantAssociationFactory(resourceName, resourceFactoryAction));
        AssistantAssociationFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.ConnectionAliasFactory WithConnectionAlias(string resourceName = null, Action<Humidifier.WorkSpaces.ConnectionAlias> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.ConnectionAliasFactory(resourceName, resourceFactoryAction));
        ConnectionAliasFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.WorkspacesPoolFactory WithWorkspacesPool(string resourceName = null, Action<Humidifier.WorkSpaces.WorkspacesPool> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.WorkspacesPoolFactory(resourceName, resourceFactoryAction));
        WorkspacesPoolFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.BrowserSettingsFactory WithBrowserSettings(string resourceName = null, Action<Humidifier.WorkSpacesWeb.BrowserSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.BrowserSettingsFactory(resourceName, resourceFactoryAction));
        BrowserSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.IdentityProviderFactory WithIdentityProvider(string resourceName = null, Action<Humidifier.WorkSpacesWeb.IdentityProvider> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.IdentityProviderFactory(resourceName, resourceFactoryAction));
        IdentityProviderFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.IpAccessSettingsFactory WithIpAccessSettings(string resourceName = null, Action<Humidifier.WorkSpacesWeb.IpAccessSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.IpAccessSettingsFactory(resourceName, resourceFactoryAction));
        IpAccessSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.NetworkSettingsFactory WithNetworkSettings(string resourceName = null, Action<Humidifier.WorkSpacesWeb.NetworkSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.NetworkSettingsFactory(resourceName, resourceFactoryAction));
        NetworkSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.UserAccessLoggingSettingsFactory WithUserAccessLoggingSettings(string resourceName = null, Action<Humidifier.WorkSpacesWeb.UserAccessLoggingSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.UserAccessLoggingSettingsFactory(resourceName, resourceFactoryAction));
        UserAccessLoggingSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.UserSettingsFactory WithUserSettings(string resourceName = null, Action<Humidifier.WorkSpacesWeb.UserSettings> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.UserSettingsFactory(resourceName, resourceFactoryAction));
        UserSettingsFactories.Add(factory);
        return factory;
    }

    public XRay.SamplingRuleFactory WithSamplingRule(string resourceName = null, Action<Humidifier.XRay.SamplingRule> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.SamplingRuleFactory(resourceName, resourceFactoryAction));
        SamplingRuleFactories.Add(factory);
        return factory;
    }

    public ASK.SkillFactory WithSkill(string resourceName = null, Action<Humidifier.ASK.Skill> resourceFactoryAction = null)
    {
        var factory = this.CreateSubFactory(() => new ASK.SkillFactory(resourceName, resourceFactoryAction));
        SkillFactories.Add(factory);
        return factory;
    }

    public ACMPCA.CertificateFactory WithACMPCACertificate(Action<Humidifier.ACMPCA.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateFactory(resourceName, resourceFactoryAction));
        ACMPCACertificateFactories.Add(factory);
        return factory;
    }

    public CertificateManager.CertificateFactory WithCertificateManagerCertificate(Action<Humidifier.CertificateManager.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CertificateManager.CertificateFactory(resourceName, resourceFactoryAction));
        CertificateManagerCertificateFactories.Add(factory);
        return factory;
    }

    public DMS.CertificateFactory WithDMSCertificate(Action<Humidifier.DMS.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.CertificateFactory(resourceName, resourceFactoryAction));
        DMSCertificateFactories.Add(factory);
        return factory;
    }

    public IoT.CertificateFactory WithIoTCertificate(Action<Humidifier.IoT.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CertificateFactory(resourceName, resourceFactoryAction));
        IoTCertificateFactories.Add(factory);
        return factory;
    }

    public Lightsail.CertificateFactory WithLightsailCertificate(Action<Humidifier.Lightsail.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.CertificateFactory(resourceName, resourceFactoryAction));
        LightsailCertificateFactories.Add(factory);
        return factory;
    }

    public Transfer.CertificateFactory WithTransferCertificate(Action<Humidifier.Transfer.Certificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.CertificateFactory(resourceName, resourceFactoryAction));
        TransferCertificateFactories.Add(factory);
        return factory;
    }

    public ACMPCA.CertificateAuthorityFactory WithCertificateAuthority(Action<Humidifier.ACMPCA.CertificateAuthority> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateAuthorityFactory(resourceName, resourceFactoryAction));
        CertificateAuthorityFactories.Add(factory);
        return factory;
    }

    public ACMPCA.CertificateAuthorityActivationFactory WithCertificateAuthorityActivation(Action<Humidifier.ACMPCA.CertificateAuthorityActivation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.CertificateAuthorityActivationFactory(resourceName, resourceFactoryAction));
        CertificateAuthorityActivationFactories.Add(factory);
        return factory;
    }

    public ACMPCA.PermissionFactory WithACMPCAPermission(Action<Humidifier.ACMPCA.Permission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ACMPCA.PermissionFactory(resourceName, resourceFactoryAction));
        ACMPCAPermissionFactories.Add(factory);
        return factory;
    }

    public Lambda.PermissionFactory WithLambdaPermission(Action<Humidifier.Lambda.Permission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.PermissionFactory(resourceName, resourceFactoryAction));
        LambdaPermissionFactories.Add(factory);
        return factory;
    }

    public RAM.PermissionFactory WithRAMPermission(Action<Humidifier.RAM.Permission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RAM.PermissionFactory(resourceName, resourceFactoryAction));
        RAMPermissionFactories.Add(factory);
        return factory;
    }

    public APS.RuleGroupsNamespaceFactory WithRuleGroupsNamespace(Action<Humidifier.APS.RuleGroupsNamespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new APS.RuleGroupsNamespaceFactory(resourceName, resourceFactoryAction));
        RuleGroupsNamespaceFactories.Add(factory);
        return factory;
    }

    public APS.ScraperFactory WithScraper(Action<Humidifier.APS.Scraper> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new APS.ScraperFactory(resourceName, resourceFactoryAction));
        ScraperFactories.Add(factory);
        return factory;
    }

    public APS.WorkspaceFactory WithAPSWorkspace(Action<Humidifier.APS.Workspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new APS.WorkspaceFactory(resourceName, resourceFactoryAction));
        APSWorkspaceFactories.Add(factory);
        return factory;
    }

    public Grafana.WorkspaceFactory WithGrafanaWorkspace(Action<Humidifier.Grafana.Workspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Grafana.WorkspaceFactory(resourceName, resourceFactoryAction));
        GrafanaWorkspaceFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.WorkspaceFactory WithIoTTwinMakerWorkspace(Action<Humidifier.IoTTwinMaker.Workspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.WorkspaceFactory(resourceName, resourceFactoryAction));
        IoTTwinMakerWorkspaceFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.WorkspaceFactory WithWorkSpacesWorkspace(Action<Humidifier.WorkSpaces.Workspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.WorkspaceFactory(resourceName, resourceFactoryAction));
        WorkSpacesWorkspaceFactories.Add(factory);
        return factory;
    }

    public ARCZonalShift.AutoshiftObserverNotificationStatusFactory WithAutoshiftObserverNotificationStatus(Action<Humidifier.ARCZonalShift.AutoshiftObserverNotificationStatus> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ARCZonalShift.AutoshiftObserverNotificationStatusFactory(resourceName, resourceFactoryAction));
        AutoshiftObserverNotificationStatusFactories.Add(factory);
        return factory;
    }

    public ARCZonalShift.ZonalAutoshiftConfigurationFactory WithZonalAutoshiftConfiguration(Action<Humidifier.ARCZonalShift.ZonalAutoshiftConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ARCZonalShift.ZonalAutoshiftConfigurationFactory(resourceName, resourceFactoryAction));
        ZonalAutoshiftConfigurationFactories.Add(factory);
        return factory;
    }

    public AccessAnalyzer.AnalyzerFactory WithAnalyzer(Action<Humidifier.AccessAnalyzer.Analyzer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AccessAnalyzer.AnalyzerFactory(resourceName, resourceFactoryAction));
        AnalyzerFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.BrokerFactory WithBroker(Action<Humidifier.AmazonMQ.Broker> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.BrokerFactory(resourceName, resourceFactoryAction));
        BrokerFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.ConfigurationFactory WithAmazonMQConfiguration(Action<Humidifier.AmazonMQ.Configuration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.ConfigurationFactory(resourceName, resourceFactoryAction));
        AmazonMQConfigurationFactories.Add(factory);
        return factory;
    }

    public MSK.ConfigurationFactory WithMSKConfiguration(Action<Humidifier.MSK.Configuration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ConfigurationFactory(resourceName, resourceFactoryAction));
        MSKConfigurationFactories.Add(factory);
        return factory;
    }

    public AmazonMQ.ConfigurationAssociationFactory WithConfigurationAssociation(Action<Humidifier.AmazonMQ.ConfigurationAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmazonMQ.ConfigurationAssociationFactory(resourceName, resourceFactoryAction));
        ConfigurationAssociationFactories.Add(factory);
        return factory;
    }

    public Amplify.AppFactory WithAmplifyApp(Action<Humidifier.Amplify.App> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.AppFactory(resourceName, resourceFactoryAction));
        AmplifyAppFactories.Add(factory);
        return factory;
    }

    public OpsWorks.AppFactory WithOpsWorksApp(Action<Humidifier.OpsWorks.App> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.AppFactory(resourceName, resourceFactoryAction));
        OpsWorksAppFactories.Add(factory);
        return factory;
    }

    public Pinpoint.AppFactory WithPinpointApp(Action<Humidifier.Pinpoint.App> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.AppFactory(resourceName, resourceFactoryAction));
        PinpointAppFactories.Add(factory);
        return factory;
    }

    public ResilienceHub.AppFactory WithResilienceHubApp(Action<Humidifier.ResilienceHub.App> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResilienceHub.AppFactory(resourceName, resourceFactoryAction));
        ResilienceHubAppFactories.Add(factory);
        return factory;
    }

    public SageMaker.AppFactory WithSageMakerApp(Action<Humidifier.SageMaker.App> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.AppFactory(resourceName, resourceFactoryAction));
        SageMakerAppFactories.Add(factory);
        return factory;
    }

    public Amplify.BranchFactory WithBranch(Action<Humidifier.Amplify.Branch> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.BranchFactory(resourceName, resourceFactoryAction));
        BranchFactories.Add(factory);
        return factory;
    }

    public Amplify.DomainFactory WithAmplifyDomain(Action<Humidifier.Amplify.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Amplify.DomainFactory(resourceName, resourceFactoryAction));
        AmplifyDomainFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.DomainFactory WithCodeArtifactDomain(Action<Humidifier.CodeArtifact.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.DomainFactory(resourceName, resourceFactoryAction));
        CodeArtifactDomainFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.DomainFactory WithCustomerProfilesDomain(Action<Humidifier.CustomerProfiles.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.DomainFactory(resourceName, resourceFactoryAction));
        CustomerProfilesDomainFactories.Add(factory);
        return factory;
    }

    public DataZone.DomainFactory WithDataZoneDomain(Action<Humidifier.DataZone.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.DomainFactory(resourceName, resourceFactoryAction));
        DataZoneDomainFactories.Add(factory);
        return factory;
    }

    public Elasticsearch.DomainFactory WithElasticsearchDomain(Action<Humidifier.Elasticsearch.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Elasticsearch.DomainFactory(resourceName, resourceFactoryAction));
        ElasticsearchDomainFactories.Add(factory);
        return factory;
    }

    public OpenSearchService.DomainFactory WithOpenSearchServiceDomain(Action<Humidifier.OpenSearchService.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchService.DomainFactory(resourceName, resourceFactoryAction));
        OpenSearchServiceDomainFactories.Add(factory);
        return factory;
    }

    public SDB.DomainFactory WithSDBDomain(Action<Humidifier.SDB.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SDB.DomainFactory(resourceName, resourceFactoryAction));
        SDBDomainFactories.Add(factory);
        return factory;
    }

    public SageMaker.DomainFactory WithSageMakerDomain(Action<Humidifier.SageMaker.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DomainFactory(resourceName, resourceFactoryAction));
        SageMakerDomainFactories.Add(factory);
        return factory;
    }

    public VoiceID.DomainFactory WithVoiceIDDomain(Action<Humidifier.VoiceID.Domain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VoiceID.DomainFactory(resourceName, resourceFactoryAction));
        VoiceIDDomainFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.ComponentFactory WithAmplifyUIBuilderComponent(Action<Humidifier.AmplifyUIBuilder.Component> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.ComponentFactory(resourceName, resourceFactoryAction));
        AmplifyUIBuilderComponentFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ComponentFactory WithImageBuilderComponent(Action<Humidifier.ImageBuilder.Component> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ComponentFactory(resourceName, resourceFactoryAction));
        ImageBuilderComponentFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.FormFactory WithForm(Action<Humidifier.AmplifyUIBuilder.Form> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.FormFactory(resourceName, resourceFactoryAction));
        FormFactories.Add(factory);
        return factory;
    }

    public AmplifyUIBuilder.ThemeFactory WithAmplifyUIBuilderTheme(Action<Humidifier.AmplifyUIBuilder.Theme> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AmplifyUIBuilder.ThemeFactory(resourceName, resourceFactoryAction));
        AmplifyUIBuilderThemeFactories.Add(factory);
        return factory;
    }

    public QuickSight.ThemeFactory WithQuickSightTheme(Action<Humidifier.QuickSight.Theme> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.ThemeFactory(resourceName, resourceFactoryAction));
        QuickSightThemeFactories.Add(factory);
        return factory;
    }

    public ApiGateway.AccountFactory WithApiGatewayAccount(Action<Humidifier.ApiGateway.Account> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.AccountFactory(resourceName, resourceFactoryAction));
        ApiGatewayAccountFactories.Add(factory);
        return factory;
    }

    public CertificateManager.AccountFactory WithCertificateManagerAccount(Action<Humidifier.CertificateManager.Account> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CertificateManager.AccountFactory(resourceName, resourceFactoryAction));
        CertificateManagerAccountFactories.Add(factory);
        return factory;
    }

    public Organizations.AccountFactory WithOrganizationsAccount(Action<Humidifier.Organizations.Account> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.AccountFactory(resourceName, resourceFactoryAction));
        OrganizationsAccountFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ApiKeyFactory WithApiGatewayApiKey(Action<Humidifier.ApiGateway.ApiKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ApiKeyFactory(resourceName, resourceFactoryAction));
        ApiGatewayApiKeyFactories.Add(factory);
        return factory;
    }

    public AppSync.ApiKeyFactory WithAppSyncApiKey(Action<Humidifier.AppSync.ApiKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ApiKeyFactory(resourceName, resourceFactoryAction));
        AppSyncApiKeyFactories.Add(factory);
        return factory;
    }

    public ApiGateway.AuthorizerFactory WithApiGatewayAuthorizer(Action<Humidifier.ApiGateway.Authorizer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.AuthorizerFactory(resourceName, resourceFactoryAction));
        ApiGatewayAuthorizerFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.AuthorizerFactory WithApiGatewayV2Authorizer(Action<Humidifier.ApiGatewayV2.Authorizer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.AuthorizerFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2AuthorizerFactories.Add(factory);
        return factory;
    }

    public IoT.AuthorizerFactory WithIoTAuthorizer(Action<Humidifier.IoT.Authorizer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.AuthorizerFactory(resourceName, resourceFactoryAction));
        IoTAuthorizerFactories.Add(factory);
        return factory;
    }

    public ApiGateway.BasePathMappingFactory WithBasePathMapping(Action<Humidifier.ApiGateway.BasePathMapping> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.BasePathMappingFactory(resourceName, resourceFactoryAction));
        BasePathMappingFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ClientCertificateFactory WithClientCertificate(Action<Humidifier.ApiGateway.ClientCertificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ClientCertificateFactory(resourceName, resourceFactoryAction));
        ClientCertificateFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DeploymentFactory WithApiGatewayDeployment(Action<Humidifier.ApiGateway.Deployment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DeploymentFactory(resourceName, resourceFactoryAction));
        ApiGatewayDeploymentFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.DeploymentFactory WithApiGatewayV2Deployment(Action<Humidifier.ApiGatewayV2.Deployment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.DeploymentFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2DeploymentFactories.Add(factory);
        return factory;
    }

    public AppConfig.DeploymentFactory WithAppConfigDeployment(Action<Humidifier.AppConfig.Deployment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.DeploymentFactory(resourceName, resourceFactoryAction));
        AppConfigDeploymentFactories.Add(factory);
        return factory;
    }

    public GreengrassV2.DeploymentFactory WithGreengrassV2Deployment(Action<Humidifier.GreengrassV2.Deployment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GreengrassV2.DeploymentFactory(resourceName, resourceFactoryAction));
        GreengrassV2DeploymentFactories.Add(factory);
        return factory;
    }

    public LaunchWizard.DeploymentFactory WithLaunchWizardDeployment(Action<Humidifier.LaunchWizard.Deployment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LaunchWizard.DeploymentFactory(resourceName, resourceFactoryAction));
        LaunchWizardDeploymentFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DocumentationPartFactory WithDocumentationPart(Action<Humidifier.ApiGateway.DocumentationPart> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DocumentationPartFactory(resourceName, resourceFactoryAction));
        DocumentationPartFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DocumentationVersionFactory WithDocumentationVersion(Action<Humidifier.ApiGateway.DocumentationVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DocumentationVersionFactory(resourceName, resourceFactoryAction));
        DocumentationVersionFactories.Add(factory);
        return factory;
    }

    public ApiGateway.DomainNameFactory WithApiGatewayDomainName(Action<Humidifier.ApiGateway.DomainName> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.DomainNameFactory(resourceName, resourceFactoryAction));
        ApiGatewayDomainNameFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.DomainNameFactory WithApiGatewayV2DomainName(Action<Humidifier.ApiGatewayV2.DomainName> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.DomainNameFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2DomainNameFactories.Add(factory);
        return factory;
    }

    public AppSync.DomainNameFactory WithAppSyncDomainName(Action<Humidifier.AppSync.DomainName> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DomainNameFactory(resourceName, resourceFactoryAction));
        AppSyncDomainNameFactories.Add(factory);
        return factory;
    }

    public ApiGateway.GatewayResponseFactory WithGatewayResponse(Action<Humidifier.ApiGateway.GatewayResponse> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.GatewayResponseFactory(resourceName, resourceFactoryAction));
        GatewayResponseFactories.Add(factory);
        return factory;
    }

    public ApiGateway.MethodFactory WithMethod(Action<Humidifier.ApiGateway.Method> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.MethodFactory(resourceName, resourceFactoryAction));
        MethodFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ModelFactory WithApiGatewayModel(Action<Humidifier.ApiGateway.Model> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ModelFactory(resourceName, resourceFactoryAction));
        ApiGatewayModelFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ModelFactory WithApiGatewayV2Model(Action<Humidifier.ApiGatewayV2.Model> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ModelFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2ModelFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelFactory WithSageMakerModel(Action<Humidifier.SageMaker.Model> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelFactory(resourceName, resourceFactoryAction));
        SageMakerModelFactories.Add(factory);
        return factory;
    }

    public ApiGateway.RequestValidatorFactory WithRequestValidator(Action<Humidifier.ApiGateway.RequestValidator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.RequestValidatorFactory(resourceName, resourceFactoryAction));
        RequestValidatorFactories.Add(factory);
        return factory;
    }

    public ApiGateway.ResourceFactory WithApiGatewayResource(Action<Humidifier.ApiGateway.Resource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.ResourceFactory(resourceName, resourceFactoryAction));
        ApiGatewayResourceFactories.Add(factory);
        return factory;
    }

    public LakeFormation.ResourceFactory WithLakeFormationResource(Action<Humidifier.LakeFormation.Resource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.ResourceFactory(resourceName, resourceFactoryAction));
        LakeFormationResourceFactories.Add(factory);
        return factory;
    }

    public ApiGateway.RestApiFactory WithRestApi(Action<Humidifier.ApiGateway.RestApi> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.RestApiFactory(resourceName, resourceFactoryAction));
        RestApiFactories.Add(factory);
        return factory;
    }

    public ApiGateway.StageFactory WithApiGatewayStage(Action<Humidifier.ApiGateway.Stage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.StageFactory(resourceName, resourceFactoryAction));
        ApiGatewayStageFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.StageFactory WithApiGatewayV2Stage(Action<Humidifier.ApiGatewayV2.Stage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.StageFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2StageFactories.Add(factory);
        return factory;
    }

    public IVS.StageFactory WithIVSStage(Action<Humidifier.IVS.Stage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StageFactory(resourceName, resourceFactoryAction));
        IVSStageFactories.Add(factory);
        return factory;
    }

    public ApiGateway.UsagePlanFactory WithUsagePlan(Action<Humidifier.ApiGateway.UsagePlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.UsagePlanFactory(resourceName, resourceFactoryAction));
        UsagePlanFactories.Add(factory);
        return factory;
    }

    public ApiGateway.UsagePlanKeyFactory WithUsagePlanKey(Action<Humidifier.ApiGateway.UsagePlanKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.UsagePlanKeyFactory(resourceName, resourceFactoryAction));
        UsagePlanKeyFactories.Add(factory);
        return factory;
    }

    public ApiGateway.VpcLinkFactory WithApiGatewayVpcLink(Action<Humidifier.ApiGateway.VpcLink> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGateway.VpcLinkFactory(resourceName, resourceFactoryAction));
        ApiGatewayVpcLinkFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.VpcLinkFactory WithApiGatewayV2VpcLink(Action<Humidifier.ApiGatewayV2.VpcLink> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.VpcLinkFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2VpcLinkFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiFactory WithApi(Action<Humidifier.ApiGatewayV2.Api> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiFactory(resourceName, resourceFactoryAction));
        ApiFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiGatewayManagedOverridesFactory WithApiGatewayManagedOverrides(Action<Humidifier.ApiGatewayV2.ApiGatewayManagedOverrides> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiGatewayManagedOverridesFactory(resourceName, resourceFactoryAction));
        ApiGatewayManagedOverridesFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.ApiMappingFactory WithApiMapping(Action<Humidifier.ApiGatewayV2.ApiMapping> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.ApiMappingFactory(resourceName, resourceFactoryAction));
        ApiMappingFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.IntegrationFactory WithApiGatewayV2Integration(Action<Humidifier.ApiGatewayV2.Integration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.IntegrationFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2IntegrationFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.IntegrationFactory WithCustomerProfilesIntegration(Action<Humidifier.CustomerProfiles.Integration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.IntegrationFactory(resourceName, resourceFactoryAction));
        CustomerProfilesIntegrationFactories.Add(factory);
        return factory;
    }

    public RDS.IntegrationFactory WithRDSIntegration(Action<Humidifier.RDS.Integration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.IntegrationFactory(resourceName, resourceFactoryAction));
        RDSIntegrationFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.IntegrationResponseFactory WithIntegrationResponse(Action<Humidifier.ApiGatewayV2.IntegrationResponse> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.IntegrationResponseFactory(resourceName, resourceFactoryAction));
        IntegrationResponseFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.RouteFactory WithApiGatewayV2Route(Action<Humidifier.ApiGatewayV2.Route> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.RouteFactory(resourceName, resourceFactoryAction));
        ApiGatewayV2RouteFactories.Add(factory);
        return factory;
    }

    public AppMesh.RouteFactory WithAppMeshRoute(Action<Humidifier.AppMesh.Route> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.RouteFactory(resourceName, resourceFactoryAction));
        AppMeshRouteFactories.Add(factory);
        return factory;
    }

    public EC2.RouteFactory WithEC2Route(Action<Humidifier.EC2.Route> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.RouteFactory(resourceName, resourceFactoryAction));
        EC2RouteFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.RouteFactory WithRefactorSpacesRoute(Action<Humidifier.RefactorSpaces.Route> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.RouteFactory(resourceName, resourceFactoryAction));
        RefactorSpacesRouteFactories.Add(factory);
        return factory;
    }

    public ApiGatewayV2.RouteResponseFactory WithRouteResponse(Action<Humidifier.ApiGatewayV2.RouteResponse> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApiGatewayV2.RouteResponseFactory(resourceName, resourceFactoryAction));
        RouteResponseFactories.Add(factory);
        return factory;
    }

    public AppConfig.ApplicationFactory WithAppConfigApplication(Action<Humidifier.AppConfig.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ApplicationFactory(resourceName, resourceFactoryAction));
        AppConfigApplicationFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.ApplicationFactory WithAppIntegrationsApplication(Action<Humidifier.AppIntegrations.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.ApplicationFactory(resourceName, resourceFactoryAction));
        AppIntegrationsApplicationFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationFactory WithAppStreamApplication(Action<Humidifier.AppStream.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationFactory(resourceName, resourceFactoryAction));
        AppStreamApplicationFactories.Add(factory);
        return factory;
    }

    public ApplicationInsights.ApplicationFactory WithApplicationInsightsApplication(Action<Humidifier.ApplicationInsights.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationInsights.ApplicationFactory(resourceName, resourceFactoryAction));
        ApplicationInsightsApplicationFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.ApplicationFactory WithCodeDeployApplication(Action<Humidifier.CodeDeploy.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.ApplicationFactory(resourceName, resourceFactoryAction));
        CodeDeployApplicationFactories.Add(factory);
        return factory;
    }

    public EMRServerless.ApplicationFactory WithEMRServerlessApplication(Action<Humidifier.EMRServerless.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMRServerless.ApplicationFactory(resourceName, resourceFactoryAction));
        EMRServerlessApplicationFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ApplicationFactory WithElasticBeanstalkApplication(Action<Humidifier.ElasticBeanstalk.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ApplicationFactory(resourceName, resourceFactoryAction));
        ElasticBeanstalkApplicationFactories.Add(factory);
        return factory;
    }

    public IoTFleetHub.ApplicationFactory WithIoTFleetHubApplication(Action<Humidifier.IoTFleetHub.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetHub.ApplicationFactory(resourceName, resourceFactoryAction));
        IoTFleetHubApplicationFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationFactory WithKinesisAnalyticsApplication(Action<Humidifier.KinesisAnalytics.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationFactory WithKinesisAnalyticsV2Application(Action<Humidifier.KinesisAnalyticsV2.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationFactories.Add(factory);
        return factory;
    }

    public M2.ApplicationFactory WithM2Application(Action<Humidifier.M2.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new M2.ApplicationFactory(resourceName, resourceFactoryAction));
        M2ApplicationFactories.Add(factory);
        return factory;
    }

    public QBusiness.ApplicationFactory WithQBusinessApplication(Action<Humidifier.QBusiness.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.ApplicationFactory(resourceName, resourceFactoryAction));
        QBusinessApplicationFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.ApplicationFactory WithRefactorSpacesApplication(Action<Humidifier.RefactorSpaces.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.ApplicationFactory(resourceName, resourceFactoryAction));
        RefactorSpacesApplicationFactories.Add(factory);
        return factory;
    }

    public SSO.ApplicationFactory WithSSOApplication(Action<Humidifier.SSO.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.ApplicationFactory(resourceName, resourceFactoryAction));
        SSOApplicationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.ApplicationFactory WithServiceCatalogAppRegistryApplication(Action<Humidifier.ServiceCatalogAppRegistry.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.ApplicationFactory(resourceName, resourceFactoryAction));
        ServiceCatalogAppRegistryApplicationFactories.Add(factory);
        return factory;
    }

    public SystemsManagerSAP.ApplicationFactory WithSystemsManagerSAPApplication(Action<Humidifier.SystemsManagerSAP.Application> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SystemsManagerSAP.ApplicationFactory(resourceName, resourceFactoryAction));
        SystemsManagerSAPApplicationFactories.Add(factory);
        return factory;
    }

    public AppConfig.ConfigurationProfileFactory WithConfigurationProfile(Action<Humidifier.AppConfig.ConfigurationProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ConfigurationProfileFactory(resourceName, resourceFactoryAction));
        ConfigurationProfileFactories.Add(factory);
        return factory;
    }

    public AppConfig.DeploymentStrategyFactory WithDeploymentStrategy(Action<Humidifier.AppConfig.DeploymentStrategy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.DeploymentStrategyFactory(resourceName, resourceFactoryAction));
        DeploymentStrategyFactories.Add(factory);
        return factory;
    }

    public AppConfig.EnvironmentFactory WithAppConfigEnvironment(Action<Humidifier.AppConfig.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.EnvironmentFactory(resourceName, resourceFactoryAction));
        AppConfigEnvironmentFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentFactory WithDataZoneEnvironment(Action<Humidifier.DataZone.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentFactory(resourceName, resourceFactoryAction));
        DataZoneEnvironmentFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.EnvironmentFactory WithElasticBeanstalkEnvironment(Action<Humidifier.ElasticBeanstalk.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.EnvironmentFactory(resourceName, resourceFactoryAction));
        ElasticBeanstalkEnvironmentFactories.Add(factory);
        return factory;
    }

    public FinSpace.EnvironmentFactory WithFinSpaceEnvironment(Action<Humidifier.FinSpace.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FinSpace.EnvironmentFactory(resourceName, resourceFactoryAction));
        FinSpaceEnvironmentFactories.Add(factory);
        return factory;
    }

    public M2.EnvironmentFactory WithM2Environment(Action<Humidifier.M2.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new M2.EnvironmentFactory(resourceName, resourceFactoryAction));
        M2EnvironmentFactories.Add(factory);
        return factory;
    }

    public MWAA.EnvironmentFactory WithMWAAEnvironment(Action<Humidifier.MWAA.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MWAA.EnvironmentFactory(resourceName, resourceFactoryAction));
        MWAAEnvironmentFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.EnvironmentFactory WithRefactorSpacesEnvironment(Action<Humidifier.RefactorSpaces.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.EnvironmentFactory(resourceName, resourceFactoryAction));
        RefactorSpacesEnvironmentFactories.Add(factory);
        return factory;
    }

    public WorkSpacesThinClient.EnvironmentFactory WithWorkSpacesThinClientEnvironment(Action<Humidifier.WorkSpacesThinClient.Environment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesThinClient.EnvironmentFactory(resourceName, resourceFactoryAction));
        WorkSpacesThinClientEnvironmentFactories.Add(factory);
        return factory;
    }

    public AppConfig.ExtensionFactory WithExtension(Action<Humidifier.AppConfig.Extension> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ExtensionFactory(resourceName, resourceFactoryAction));
        ExtensionFactories.Add(factory);
        return factory;
    }

    public AppConfig.ExtensionAssociationFactory WithExtensionAssociation(Action<Humidifier.AppConfig.ExtensionAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.ExtensionAssociationFactory(resourceName, resourceFactoryAction));
        ExtensionAssociationFactories.Add(factory);
        return factory;
    }

    public AppConfig.HostedConfigurationVersionFactory WithHostedConfigurationVersion(Action<Humidifier.AppConfig.HostedConfigurationVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppConfig.HostedConfigurationVersionFactory(resourceName, resourceFactoryAction));
        HostedConfigurationVersionFactories.Add(factory);
        return factory;
    }

    public AppFlow.ConnectorFactory WithAppFlowConnector(Action<Humidifier.AppFlow.Connector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.ConnectorFactory(resourceName, resourceFactoryAction));
        AppFlowConnectorFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.ConnectorFactory WithKafkaConnectConnector(Action<Humidifier.KafkaConnect.Connector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.ConnectorFactory(resourceName, resourceFactoryAction));
        KafkaConnectConnectorFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.ConnectorFactory WithPCAConnectorADConnector(Action<Humidifier.PCAConnectorAD.Connector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.ConnectorFactory(resourceName, resourceFactoryAction));
        PCAConnectorADConnectorFactories.Add(factory);
        return factory;
    }

    public PCAConnectorSCEP.ConnectorFactory WithPCAConnectorSCEPConnector(Action<Humidifier.PCAConnectorSCEP.Connector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorSCEP.ConnectorFactory(resourceName, resourceFactoryAction));
        PCAConnectorSCEPConnectorFactories.Add(factory);
        return factory;
    }

    public Transfer.ConnectorFactory WithTransferConnector(Action<Humidifier.Transfer.Connector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ConnectorFactory(resourceName, resourceFactoryAction));
        TransferConnectorFactories.Add(factory);
        return factory;
    }

    public AppFlow.ConnectorProfileFactory WithConnectorProfile(Action<Humidifier.AppFlow.ConnectorProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.ConnectorProfileFactory(resourceName, resourceFactoryAction));
        ConnectorProfileFactories.Add(factory);
        return factory;
    }

    public AppFlow.FlowFactory WithAppFlowFlow(Action<Humidifier.AppFlow.Flow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppFlow.FlowFactory(resourceName, resourceFactoryAction));
        AppFlowFlowFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowFactory WithBedrockFlow(Action<Humidifier.Bedrock.Flow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowFactory(resourceName, resourceFactoryAction));
        BedrockFlowFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowFactory WithMediaConnectFlow(Action<Humidifier.MediaConnect.Flow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowFactory(resourceName, resourceFactoryAction));
        MediaConnectFlowFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.DataIntegrationFactory WithDataIntegration(Action<Humidifier.AppIntegrations.DataIntegration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.DataIntegrationFactory(resourceName, resourceFactoryAction));
        DataIntegrationFactories.Add(factory);
        return factory;
    }

    public AppIntegrations.EventIntegrationFactory WithEventIntegration(Action<Humidifier.AppIntegrations.EventIntegration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppIntegrations.EventIntegrationFactory(resourceName, resourceFactoryAction));
        EventIntegrationFactories.Add(factory);
        return factory;
    }

    public AppMesh.GatewayRouteFactory WithGatewayRoute(Action<Humidifier.AppMesh.GatewayRoute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.GatewayRouteFactory(resourceName, resourceFactoryAction));
        GatewayRouteFactories.Add(factory);
        return factory;
    }

    public AppMesh.MeshFactory WithMesh(Action<Humidifier.AppMesh.Mesh> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.MeshFactory(resourceName, resourceFactoryAction));
        MeshFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualGatewayFactory WithVirtualGateway(Action<Humidifier.AppMesh.VirtualGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualGatewayFactory(resourceName, resourceFactoryAction));
        VirtualGatewayFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualNodeFactory WithVirtualNode(Action<Humidifier.AppMesh.VirtualNode> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualNodeFactory(resourceName, resourceFactoryAction));
        VirtualNodeFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualRouterFactory WithVirtualRouter(Action<Humidifier.AppMesh.VirtualRouter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualRouterFactory(resourceName, resourceFactoryAction));
        VirtualRouterFactories.Add(factory);
        return factory;
    }

    public AppMesh.VirtualServiceFactory WithVirtualService(Action<Humidifier.AppMesh.VirtualService> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppMesh.VirtualServiceFactory(resourceName, resourceFactoryAction));
        VirtualServiceFactories.Add(factory);
        return factory;
    }

    public AppRunner.AutoScalingConfigurationFactory WithAutoScalingConfiguration(Action<Humidifier.AppRunner.AutoScalingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.AutoScalingConfigurationFactory(resourceName, resourceFactoryAction));
        AutoScalingConfigurationFactories.Add(factory);
        return factory;
    }

    public AppRunner.ObservabilityConfigurationFactory WithObservabilityConfiguration(Action<Humidifier.AppRunner.ObservabilityConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.ObservabilityConfigurationFactory(resourceName, resourceFactoryAction));
        ObservabilityConfigurationFactories.Add(factory);
        return factory;
    }

    public AppRunner.ServiceFactory WithAppRunnerService(Action<Humidifier.AppRunner.Service> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.ServiceFactory(resourceName, resourceFactoryAction));
        AppRunnerServiceFactories.Add(factory);
        return factory;
    }

    public ECS.ServiceFactory WithECSService(Action<Humidifier.ECS.Service> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ServiceFactory(resourceName, resourceFactoryAction));
        ECSServiceFactories.Add(factory);
        return factory;
    }

    public RefactorSpaces.ServiceFactory WithRefactorSpacesService(Action<Humidifier.RefactorSpaces.Service> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RefactorSpaces.ServiceFactory(resourceName, resourceFactoryAction));
        RefactorSpacesServiceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.ServiceFactory WithServiceDiscoveryService(Action<Humidifier.ServiceDiscovery.Service> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.ServiceFactory(resourceName, resourceFactoryAction));
        ServiceDiscoveryServiceFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceFactory WithVpcLatticeService(Action<Humidifier.VpcLattice.Service> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceFactory(resourceName, resourceFactoryAction));
        VpcLatticeServiceFactories.Add(factory);
        return factory;
    }

    public AppRunner.VpcConnectorFactory WithVpcConnector(Action<Humidifier.AppRunner.VpcConnector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.VpcConnectorFactory(resourceName, resourceFactoryAction));
        VpcConnectorFactories.Add(factory);
        return factory;
    }

    public AppRunner.VpcIngressConnectionFactory WithVpcIngressConnection(Action<Humidifier.AppRunner.VpcIngressConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppRunner.VpcIngressConnectionFactory(resourceName, resourceFactoryAction));
        VpcIngressConnectionFactories.Add(factory);
        return factory;
    }

    public AppStream.AppBlockFactory WithAppBlock(Action<Humidifier.AppStream.AppBlock> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.AppBlockFactory(resourceName, resourceFactoryAction));
        AppBlockFactories.Add(factory);
        return factory;
    }

    public AppStream.AppBlockBuilderFactory WithAppBlockBuilder(Action<Humidifier.AppStream.AppBlockBuilder> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.AppBlockBuilderFactory(resourceName, resourceFactoryAction));
        AppBlockBuilderFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationEntitlementAssociationFactory WithApplicationEntitlementAssociation(Action<Humidifier.AppStream.ApplicationEntitlementAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationEntitlementAssociationFactory(resourceName, resourceFactoryAction));
        ApplicationEntitlementAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.ApplicationFleetAssociationFactory WithApplicationFleetAssociation(Action<Humidifier.AppStream.ApplicationFleetAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ApplicationFleetAssociationFactory(resourceName, resourceFactoryAction));
        ApplicationFleetAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.DirectoryConfigFactory WithDirectoryConfig(Action<Humidifier.AppStream.DirectoryConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.DirectoryConfigFactory(resourceName, resourceFactoryAction));
        DirectoryConfigFactories.Add(factory);
        return factory;
    }

    public AppStream.EntitlementFactory WithEntitlement(Action<Humidifier.AppStream.Entitlement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.EntitlementFactory(resourceName, resourceFactoryAction));
        EntitlementFactories.Add(factory);
        return factory;
    }

    public AppStream.FleetFactory WithAppStreamFleet(Action<Humidifier.AppStream.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.FleetFactory(resourceName, resourceFactoryAction));
        AppStreamFleetFactories.Add(factory);
        return factory;
    }

    public CodeBuild.FleetFactory WithCodeBuildFleet(Action<Humidifier.CodeBuild.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.FleetFactory(resourceName, resourceFactoryAction));
        CodeBuildFleetFactories.Add(factory);
        return factory;
    }

    public Deadline.FleetFactory WithDeadlineFleet(Action<Humidifier.Deadline.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.FleetFactory(resourceName, resourceFactoryAction));
        DeadlineFleetFactories.Add(factory);
        return factory;
    }

    public GameLift.FleetFactory WithGameLiftFleet(Action<Humidifier.GameLift.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.FleetFactory(resourceName, resourceFactoryAction));
        GameLiftFleetFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.FleetFactory WithIoTFleetWiseFleet(Action<Humidifier.IoTFleetWise.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.FleetFactory(resourceName, resourceFactoryAction));
        IoTFleetWiseFleetFactories.Add(factory);
        return factory;
    }

    public RoboMaker.FleetFactory WithRoboMakerFleet(Action<Humidifier.RoboMaker.Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.FleetFactory(resourceName, resourceFactoryAction));
        RoboMakerFleetFactories.Add(factory);
        return factory;
    }

    public AppStream.ImageBuilderFactory WithImageBuilder(Action<Humidifier.AppStream.ImageBuilder> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.ImageBuilderFactory(resourceName, resourceFactoryAction));
        ImageBuilderFactories.Add(factory);
        return factory;
    }

    public AppStream.StackFactory WithAppStreamStack(Action<Humidifier.AppStream.Stack> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackFactory(resourceName, resourceFactoryAction));
        AppStreamStackFactories.Add(factory);
        return factory;
    }

    public CloudFormation.StackFactory WithCloudFormationStack(Action<Humidifier.CloudFormation.Stack> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.StackFactory(resourceName, resourceFactoryAction));
        CloudFormationStackFactories.Add(factory);
        return factory;
    }

    public OpsWorks.StackFactory WithOpsWorksStack(Action<Humidifier.OpsWorks.Stack> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.StackFactory(resourceName, resourceFactoryAction));
        OpsWorksStackFactories.Add(factory);
        return factory;
    }

    public AppStream.StackFleetAssociationFactory WithStackFleetAssociation(Action<Humidifier.AppStream.StackFleetAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackFleetAssociationFactory(resourceName, resourceFactoryAction));
        StackFleetAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.StackUserAssociationFactory WithStackUserAssociation(Action<Humidifier.AppStream.StackUserAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.StackUserAssociationFactory(resourceName, resourceFactoryAction));
        StackUserAssociationFactories.Add(factory);
        return factory;
    }

    public AppStream.UserFactory WithAppStreamUser(Action<Humidifier.AppStream.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppStream.UserFactory(resourceName, resourceFactoryAction));
        AppStreamUserFactories.Add(factory);
        return factory;
    }

    public Connect.UserFactory WithConnectUser(Action<Humidifier.Connect.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserFactory(resourceName, resourceFactoryAction));
        ConnectUserFactories.Add(factory);
        return factory;
    }

    public ElastiCache.UserFactory WithElastiCacheUser(Action<Humidifier.ElastiCache.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.UserFactory(resourceName, resourceFactoryAction));
        ElastiCacheUserFactories.Add(factory);
        return factory;
    }

    public IAM.UserFactory WithIAMUser(Action<Humidifier.IAM.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserFactory(resourceName, resourceFactoryAction));
        IAMUserFactories.Add(factory);
        return factory;
    }

    public MemoryDB.UserFactory WithMemoryDBUser(Action<Humidifier.MemoryDB.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.UserFactory(resourceName, resourceFactoryAction));
        MemoryDBUserFactories.Add(factory);
        return factory;
    }

    public Transfer.UserFactory WithTransferUser(Action<Humidifier.Transfer.User> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.UserFactory(resourceName, resourceFactoryAction));
        TransferUserFactories.Add(factory);
        return factory;
    }

    public AppSync.ApiCacheFactory WithApiCache(Action<Humidifier.AppSync.ApiCache> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ApiCacheFactory(resourceName, resourceFactoryAction));
        ApiCacheFactories.Add(factory);
        return factory;
    }

    public AppSync.DataSourceFactory WithAppSyncDataSource(Action<Humidifier.AppSync.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DataSourceFactory(resourceName, resourceFactoryAction));
        AppSyncDataSourceFactories.Add(factory);
        return factory;
    }

    public Bedrock.DataSourceFactory WithBedrockDataSource(Action<Humidifier.Bedrock.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.DataSourceFactory(resourceName, resourceFactoryAction));
        BedrockDataSourceFactories.Add(factory);
        return factory;
    }

    public DataZone.DataSourceFactory WithDataZoneDataSource(Action<Humidifier.DataZone.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.DataSourceFactory(resourceName, resourceFactoryAction));
        DataZoneDataSourceFactories.Add(factory);
        return factory;
    }

    public Kendra.DataSourceFactory WithKendraDataSource(Action<Humidifier.Kendra.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.DataSourceFactory(resourceName, resourceFactoryAction));
        KendraDataSourceFactories.Add(factory);
        return factory;
    }

    public QBusiness.DataSourceFactory WithQBusinessDataSource(Action<Humidifier.QBusiness.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.DataSourceFactory(resourceName, resourceFactoryAction));
        QBusinessDataSourceFactories.Add(factory);
        return factory;
    }

    public QuickSight.DataSourceFactory WithQuickSightDataSource(Action<Humidifier.QuickSight.DataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DataSourceFactory(resourceName, resourceFactoryAction));
        QuickSightDataSourceFactories.Add(factory);
        return factory;
    }

    public AppSync.DomainNameApiAssociationFactory WithDomainNameApiAssociation(Action<Humidifier.AppSync.DomainNameApiAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.DomainNameApiAssociationFactory(resourceName, resourceFactoryAction));
        DomainNameApiAssociationFactories.Add(factory);
        return factory;
    }

    public AppSync.FunctionConfigurationFactory WithFunctionConfiguration(Action<Humidifier.AppSync.FunctionConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.FunctionConfigurationFactory(resourceName, resourceFactoryAction));
        FunctionConfigurationFactories.Add(factory);
        return factory;
    }

    public AppSync.GraphQLApiFactory WithGraphQLApi(Action<Humidifier.AppSync.GraphQLApi> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.GraphQLApiFactory(resourceName, resourceFactoryAction));
        GraphQLApiFactories.Add(factory);
        return factory;
    }

    public AppSync.GraphQLSchemaFactory WithGraphQLSchema(Action<Humidifier.AppSync.GraphQLSchema> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.GraphQLSchemaFactory(resourceName, resourceFactoryAction));
        GraphQLSchemaFactories.Add(factory);
        return factory;
    }

    public AppSync.ResolverFactory WithResolver(Action<Humidifier.AppSync.Resolver> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.ResolverFactory(resourceName, resourceFactoryAction));
        ResolverFactories.Add(factory);
        return factory;
    }

    public AppSync.SourceApiAssociationFactory WithSourceApiAssociation(Action<Humidifier.AppSync.SourceApiAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppSync.SourceApiAssociationFactory(resourceName, resourceFactoryAction));
        SourceApiAssociationFactories.Add(factory);
        return factory;
    }

    public AppTest.TestCaseFactory WithTestCase(Action<Humidifier.AppTest.TestCase> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AppTest.TestCaseFactory(resourceName, resourceFactoryAction));
        TestCaseFactories.Add(factory);
        return factory;
    }

    public ApplicationAutoScaling.ScalableTargetFactory WithScalableTarget(Action<Humidifier.ApplicationAutoScaling.ScalableTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationAutoScaling.ScalableTargetFactory(resourceName, resourceFactoryAction));
        ScalableTargetFactories.Add(factory);
        return factory;
    }

    public ApplicationAutoScaling.ScalingPolicyFactory WithApplicationAutoScalingScalingPolicy(Action<Humidifier.ApplicationAutoScaling.ScalingPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationAutoScaling.ScalingPolicyFactory(resourceName, resourceFactoryAction));
        ApplicationAutoScalingScalingPolicyFactories.Add(factory);
        return factory;
    }

    public AutoScaling.ScalingPolicyFactory WithAutoScalingScalingPolicy(Action<Humidifier.AutoScaling.ScalingPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.ScalingPolicyFactory(resourceName, resourceFactoryAction));
        AutoScalingScalingPolicyFactories.Add(factory);
        return factory;
    }

    public ApplicationSignals.ServiceLevelObjectiveFactory WithServiceLevelObjective(Action<Humidifier.ApplicationSignals.ServiceLevelObjective> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ApplicationSignals.ServiceLevelObjectiveFactory(resourceName, resourceFactoryAction));
        ServiceLevelObjectiveFactories.Add(factory);
        return factory;
    }

    public Athena.CapacityReservationFactory WithAthenaCapacityReservation(Action<Humidifier.Athena.CapacityReservation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.CapacityReservationFactory(resourceName, resourceFactoryAction));
        AthenaCapacityReservationFactories.Add(factory);
        return factory;
    }

    public EC2.CapacityReservationFactory WithEC2CapacityReservation(Action<Humidifier.EC2.CapacityReservation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CapacityReservationFactory(resourceName, resourceFactoryAction));
        EC2CapacityReservationFactories.Add(factory);
        return factory;
    }

    public Athena.DataCatalogFactory WithDataCatalog(Action<Humidifier.Athena.DataCatalog> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.DataCatalogFactory(resourceName, resourceFactoryAction));
        DataCatalogFactories.Add(factory);
        return factory;
    }

    public Athena.NamedQueryFactory WithNamedQuery(Action<Humidifier.Athena.NamedQuery> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.NamedQueryFactory(resourceName, resourceFactoryAction));
        NamedQueryFactories.Add(factory);
        return factory;
    }

    public Athena.PreparedStatementFactory WithPreparedStatement(Action<Humidifier.Athena.PreparedStatement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.PreparedStatementFactory(resourceName, resourceFactoryAction));
        PreparedStatementFactories.Add(factory);
        return factory;
    }

    public Athena.WorkGroupFactory WithWorkGroup(Action<Humidifier.Athena.WorkGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Athena.WorkGroupFactory(resourceName, resourceFactoryAction));
        WorkGroupFactories.Add(factory);
        return factory;
    }

    public AuditManager.AssessmentFactory WithAssessment(Action<Humidifier.AuditManager.Assessment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AuditManager.AssessmentFactory(resourceName, resourceFactoryAction));
        AssessmentFactories.Add(factory);
        return factory;
    }

    public AutoScaling.AutoScalingGroupFactory WithAutoScalingGroup(Action<Humidifier.AutoScaling.AutoScalingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.AutoScalingGroupFactory(resourceName, resourceFactoryAction));
        AutoScalingGroupFactories.Add(factory);
        return factory;
    }

    public AutoScaling.LaunchConfigurationFactory WithLaunchConfiguration(Action<Humidifier.AutoScaling.LaunchConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.LaunchConfigurationFactory(resourceName, resourceFactoryAction));
        LaunchConfigurationFactories.Add(factory);
        return factory;
    }

    public AutoScaling.LifecycleHookFactory WithLifecycleHook(Action<Humidifier.AutoScaling.LifecycleHook> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.LifecycleHookFactory(resourceName, resourceFactoryAction));
        LifecycleHookFactories.Add(factory);
        return factory;
    }

    public AutoScaling.ScheduledActionFactory WithAutoScalingScheduledAction(Action<Humidifier.AutoScaling.ScheduledAction> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.ScheduledActionFactory(resourceName, resourceFactoryAction));
        AutoScalingScheduledActionFactories.Add(factory);
        return factory;
    }

    public Redshift.ScheduledActionFactory WithRedshiftScheduledAction(Action<Humidifier.Redshift.ScheduledAction> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ScheduledActionFactory(resourceName, resourceFactoryAction));
        RedshiftScheduledActionFactories.Add(factory);
        return factory;
    }

    public AutoScaling.WarmPoolFactory WithWarmPool(Action<Humidifier.AutoScaling.WarmPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScaling.WarmPoolFactory(resourceName, resourceFactoryAction));
        WarmPoolFactories.Add(factory);
        return factory;
    }

    public AutoScalingPlans.ScalingPlanFactory WithScalingPlan(Action<Humidifier.AutoScalingPlans.ScalingPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new AutoScalingPlans.ScalingPlanFactory(resourceName, resourceFactoryAction));
        ScalingPlanFactories.Add(factory);
        return factory;
    }

    public B2BI.CapabilityFactory WithCapability(Action<Humidifier.B2BI.Capability> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.CapabilityFactory(resourceName, resourceFactoryAction));
        CapabilityFactories.Add(factory);
        return factory;
    }

    public B2BI.PartnershipFactory WithPartnership(Action<Humidifier.B2BI.Partnership> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.PartnershipFactory(resourceName, resourceFactoryAction));
        PartnershipFactories.Add(factory);
        return factory;
    }

    public B2BI.ProfileFactory WithB2BIProfile(Action<Humidifier.B2BI.Profile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.ProfileFactory(resourceName, resourceFactoryAction));
        B2BIProfileFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.ProfileFactory WithRolesAnywhereProfile(Action<Humidifier.RolesAnywhere.Profile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.ProfileFactory(resourceName, resourceFactoryAction));
        RolesAnywhereProfileFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileFactory WithRoute53ProfilesProfile(Action<Humidifier.Route53Profiles.Profile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileFactory(resourceName, resourceFactoryAction));
        Route53ProfilesProfileFactories.Add(factory);
        return factory;
    }

    public Transfer.ProfileFactory WithTransferProfile(Action<Humidifier.Transfer.Profile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ProfileFactory(resourceName, resourceFactoryAction));
        TransferProfileFactories.Add(factory);
        return factory;
    }

    public B2BI.TransformerFactory WithTransformer(Action<Humidifier.B2BI.Transformer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new B2BI.TransformerFactory(resourceName, resourceFactoryAction));
        TransformerFactories.Add(factory);
        return factory;
    }

    public BCMDataExports.ExportFactory WithExport(Action<Humidifier.BCMDataExports.Export> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BCMDataExports.ExportFactory(resourceName, resourceFactoryAction));
        ExportFactories.Add(factory);
        return factory;
    }

    public Backup.BackupPlanFactory WithBackupPlan(Action<Humidifier.Backup.BackupPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupPlanFactory(resourceName, resourceFactoryAction));
        BackupPlanFactories.Add(factory);
        return factory;
    }

    public Backup.BackupSelectionFactory WithBackupSelection(Action<Humidifier.Backup.BackupSelection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupSelectionFactory(resourceName, resourceFactoryAction));
        BackupSelectionFactories.Add(factory);
        return factory;
    }

    public Backup.BackupVaultFactory WithBackupVault(Action<Humidifier.Backup.BackupVault> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.BackupVaultFactory(resourceName, resourceFactoryAction));
        BackupVaultFactories.Add(factory);
        return factory;
    }

    public Backup.FrameworkFactory WithFramework(Action<Humidifier.Backup.Framework> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.FrameworkFactory(resourceName, resourceFactoryAction));
        FrameworkFactories.Add(factory);
        return factory;
    }

    public Backup.ReportPlanFactory WithReportPlan(Action<Humidifier.Backup.ReportPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.ReportPlanFactory(resourceName, resourceFactoryAction));
        ReportPlanFactories.Add(factory);
        return factory;
    }

    public Backup.RestoreTestingPlanFactory WithRestoreTestingPlan(Action<Humidifier.Backup.RestoreTestingPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.RestoreTestingPlanFactory(resourceName, resourceFactoryAction));
        RestoreTestingPlanFactories.Add(factory);
        return factory;
    }

    public Backup.RestoreTestingSelectionFactory WithRestoreTestingSelection(Action<Humidifier.Backup.RestoreTestingSelection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Backup.RestoreTestingSelectionFactory(resourceName, resourceFactoryAction));
        RestoreTestingSelectionFactories.Add(factory);
        return factory;
    }

    public BackupGateway.HypervisorFactory WithHypervisor(Action<Humidifier.BackupGateway.Hypervisor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BackupGateway.HypervisorFactory(resourceName, resourceFactoryAction));
        HypervisorFactories.Add(factory);
        return factory;
    }

    public Batch.ComputeEnvironmentFactory WithComputeEnvironment(Action<Humidifier.Batch.ComputeEnvironment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.ComputeEnvironmentFactory(resourceName, resourceFactoryAction));
        ComputeEnvironmentFactories.Add(factory);
        return factory;
    }

    public Batch.JobDefinitionFactory WithJobDefinition(Action<Humidifier.Batch.JobDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.JobDefinitionFactory(resourceName, resourceFactoryAction));
        JobDefinitionFactories.Add(factory);
        return factory;
    }

    public Batch.JobQueueFactory WithJobQueue(Action<Humidifier.Batch.JobQueue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.JobQueueFactory(resourceName, resourceFactoryAction));
        JobQueueFactories.Add(factory);
        return factory;
    }

    public Batch.SchedulingPolicyFactory WithSchedulingPolicy(Action<Humidifier.Batch.SchedulingPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Batch.SchedulingPolicyFactory(resourceName, resourceFactoryAction));
        SchedulingPolicyFactories.Add(factory);
        return factory;
    }

    public Bedrock.AgentFactory WithBedrockAgent(Action<Humidifier.Bedrock.Agent> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.AgentFactory(resourceName, resourceFactoryAction));
        BedrockAgentFactories.Add(factory);
        return factory;
    }

    public DataSync.AgentFactory WithDataSyncAgent(Action<Humidifier.DataSync.Agent> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.AgentFactory(resourceName, resourceFactoryAction));
        DataSyncAgentFactories.Add(factory);
        return factory;
    }

    public Bedrock.AgentAliasFactory WithAgentAlias(Action<Humidifier.Bedrock.AgentAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.AgentAliasFactory(resourceName, resourceFactoryAction));
        AgentAliasFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowAliasFactory WithFlowAlias(Action<Humidifier.Bedrock.FlowAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowAliasFactory(resourceName, resourceFactoryAction));
        FlowAliasFactories.Add(factory);
        return factory;
    }

    public Bedrock.FlowVersionFactory WithFlowVersion(Action<Humidifier.Bedrock.FlowVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.FlowVersionFactory(resourceName, resourceFactoryAction));
        FlowVersionFactories.Add(factory);
        return factory;
    }

    public Bedrock.GuardrailFactory WithGuardrail(Action<Humidifier.Bedrock.Guardrail> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.GuardrailFactory(resourceName, resourceFactoryAction));
        GuardrailFactories.Add(factory);
        return factory;
    }

    public Bedrock.GuardrailVersionFactory WithGuardrailVersion(Action<Humidifier.Bedrock.GuardrailVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.GuardrailVersionFactory(resourceName, resourceFactoryAction));
        GuardrailVersionFactories.Add(factory);
        return factory;
    }

    public Bedrock.KnowledgeBaseFactory WithBedrockKnowledgeBase(Action<Humidifier.Bedrock.KnowledgeBase> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.KnowledgeBaseFactory(resourceName, resourceFactoryAction));
        BedrockKnowledgeBaseFactories.Add(factory);
        return factory;
    }

    public Wisdom.KnowledgeBaseFactory WithWisdomKnowledgeBase(Action<Humidifier.Wisdom.KnowledgeBase> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.KnowledgeBaseFactory(resourceName, resourceFactoryAction));
        WisdomKnowledgeBaseFactories.Add(factory);
        return factory;
    }

    public Bedrock.PromptFactory WithBedrockPrompt(Action<Humidifier.Bedrock.Prompt> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.PromptFactory(resourceName, resourceFactoryAction));
        BedrockPromptFactories.Add(factory);
        return factory;
    }

    public Connect.PromptFactory WithConnectPrompt(Action<Humidifier.Connect.Prompt> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PromptFactory(resourceName, resourceFactoryAction));
        ConnectPromptFactories.Add(factory);
        return factory;
    }

    public Bedrock.PromptVersionFactory WithPromptVersion(Action<Humidifier.Bedrock.PromptVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Bedrock.PromptVersionFactory(resourceName, resourceFactoryAction));
        PromptVersionFactories.Add(factory);
        return factory;
    }

    public BillingConductor.BillingGroupFactory WithBillingConductorBillingGroup(Action<Humidifier.BillingConductor.BillingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.BillingGroupFactory(resourceName, resourceFactoryAction));
        BillingConductorBillingGroupFactories.Add(factory);
        return factory;
    }

    public IoT.BillingGroupFactory WithIoTBillingGroup(Action<Humidifier.IoT.BillingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.BillingGroupFactory(resourceName, resourceFactoryAction));
        IoTBillingGroupFactories.Add(factory);
        return factory;
    }

    public BillingConductor.CustomLineItemFactory WithCustomLineItem(Action<Humidifier.BillingConductor.CustomLineItem> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.CustomLineItemFactory(resourceName, resourceFactoryAction));
        CustomLineItemFactories.Add(factory);
        return factory;
    }

    public BillingConductor.PricingPlanFactory WithPricingPlan(Action<Humidifier.BillingConductor.PricingPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.PricingPlanFactory(resourceName, resourceFactoryAction));
        PricingPlanFactories.Add(factory);
        return factory;
    }

    public BillingConductor.PricingRuleFactory WithPricingRule(Action<Humidifier.BillingConductor.PricingRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new BillingConductor.PricingRuleFactory(resourceName, resourceFactoryAction));
        PricingRuleFactories.Add(factory);
        return factory;
    }

    public Budgets.BudgetFactory WithBudget(Action<Humidifier.Budgets.Budget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Budgets.BudgetFactory(resourceName, resourceFactoryAction));
        BudgetFactories.Add(factory);
        return factory;
    }

    public Budgets.BudgetsActionFactory WithBudgetsAction(Action<Humidifier.Budgets.BudgetsAction> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Budgets.BudgetsActionFactory(resourceName, resourceFactoryAction));
        BudgetsActionFactories.Add(factory);
        return factory;
    }

    public CE.AnomalyMonitorFactory WithAnomalyMonitor(Action<Humidifier.CE.AnomalyMonitor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CE.AnomalyMonitorFactory(resourceName, resourceFactoryAction));
        AnomalyMonitorFactories.Add(factory);
        return factory;
    }

    public CE.AnomalySubscriptionFactory WithAnomalySubscription(Action<Humidifier.CE.AnomalySubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CE.AnomalySubscriptionFactory(resourceName, resourceFactoryAction));
        AnomalySubscriptionFactories.Add(factory);
        return factory;
    }

    public CE.CostCategoryFactory WithCostCategory(Action<Humidifier.CE.CostCategory> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CE.CostCategoryFactory(resourceName, resourceFactoryAction));
        CostCategoryFactories.Add(factory);
        return factory;
    }

    public CUR.ReportDefinitionFactory WithReportDefinition(Action<Humidifier.CUR.ReportDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CUR.ReportDefinitionFactory(resourceName, resourceFactoryAction));
        ReportDefinitionFactories.Add(factory);
        return factory;
    }

    public Cassandra.KeyspaceFactory WithKeyspace(Action<Humidifier.Cassandra.Keyspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cassandra.KeyspaceFactory(resourceName, resourceFactoryAction));
        KeyspaceFactories.Add(factory);
        return factory;
    }

    public Cassandra.TableFactory WithCassandraTable(Action<Humidifier.Cassandra.Table> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cassandra.TableFactory(resourceName, resourceFactoryAction));
        CassandraTableFactories.Add(factory);
        return factory;
    }

    public DynamoDB.TableFactory WithDynamoDBTable(Action<Humidifier.DynamoDB.Table> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DynamoDB.TableFactory(resourceName, resourceFactoryAction));
        DynamoDBTableFactories.Add(factory);
        return factory;
    }

    public Glue.TableFactory WithGlueTable(Action<Humidifier.Glue.Table> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TableFactory(resourceName, resourceFactoryAction));
        GlueTableFactories.Add(factory);
        return factory;
    }

    public Timestream.TableFactory WithTimestreamTable(Action<Humidifier.Timestream.Table> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.TableFactory(resourceName, resourceFactoryAction));
        TimestreamTableFactories.Add(factory);
        return factory;
    }

    public Chatbot.MicrosoftTeamsChannelConfigurationFactory WithMicrosoftTeamsChannelConfiguration(Action<Humidifier.Chatbot.MicrosoftTeamsChannelConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Chatbot.MicrosoftTeamsChannelConfigurationFactory(resourceName, resourceFactoryAction));
        MicrosoftTeamsChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public Chatbot.SlackChannelConfigurationFactory WithChatbotSlackChannelConfiguration(Action<Humidifier.Chatbot.SlackChannelConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Chatbot.SlackChannelConfigurationFactory(resourceName, resourceFactoryAction));
        ChatbotSlackChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public SupportApp.SlackChannelConfigurationFactory WithSupportAppSlackChannelConfiguration(Action<Humidifier.SupportApp.SlackChannelConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.SlackChannelConfigurationFactory(resourceName, resourceFactoryAction));
        SupportAppSlackChannelConfigurationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.AnalysisTemplateFactory WithAnalysisTemplate(Action<Humidifier.CleanRooms.AnalysisTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.AnalysisTemplateFactory(resourceName, resourceFactoryAction));
        AnalysisTemplateFactories.Add(factory);
        return factory;
    }

    public CleanRooms.CollaborationFactory WithCollaboration(Action<Humidifier.CleanRooms.Collaboration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.CollaborationFactory(resourceName, resourceFactoryAction));
        CollaborationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.ConfiguredTableFactory WithConfiguredTable(Action<Humidifier.CleanRooms.ConfiguredTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.ConfiguredTableFactory(resourceName, resourceFactoryAction));
        ConfiguredTableFactories.Add(factory);
        return factory;
    }

    public CleanRooms.ConfiguredTableAssociationFactory WithConfiguredTableAssociation(Action<Humidifier.CleanRooms.ConfiguredTableAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.ConfiguredTableAssociationFactory(resourceName, resourceFactoryAction));
        ConfiguredTableAssociationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.IdMappingTableFactory WithIdMappingTable(Action<Humidifier.CleanRooms.IdMappingTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.IdMappingTableFactory(resourceName, resourceFactoryAction));
        IdMappingTableFactories.Add(factory);
        return factory;
    }

    public CleanRooms.IdNamespaceAssociationFactory WithIdNamespaceAssociation(Action<Humidifier.CleanRooms.IdNamespaceAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.IdNamespaceAssociationFactory(resourceName, resourceFactoryAction));
        IdNamespaceAssociationFactories.Add(factory);
        return factory;
    }

    public CleanRooms.MembershipFactory WithMembership(Action<Humidifier.CleanRooms.Membership> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.MembershipFactory(resourceName, resourceFactoryAction));
        MembershipFactories.Add(factory);
        return factory;
    }

    public CleanRooms.PrivacyBudgetTemplateFactory WithPrivacyBudgetTemplate(Action<Humidifier.CleanRooms.PrivacyBudgetTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRooms.PrivacyBudgetTemplateFactory(resourceName, resourceFactoryAction));
        PrivacyBudgetTemplateFactories.Add(factory);
        return factory;
    }

    public CleanRoomsML.TrainingDatasetFactory WithTrainingDataset(Action<Humidifier.CleanRoomsML.TrainingDataset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CleanRoomsML.TrainingDatasetFactory(resourceName, resourceFactoryAction));
        TrainingDatasetFactories.Add(factory);
        return factory;
    }

    public Cloud9.EnvironmentEC2Factory WithEnvironmentEC2(Action<Humidifier.Cloud9.EnvironmentEC2> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cloud9.EnvironmentEC2Factory(resourceName, resourceFactoryAction));
        EnvironmentEC2Factories.Add(factory);
        return factory;
    }

    public CloudFormation.CustomResourceFactory WithCustomResource(Action<Humidifier.CloudFormation.CustomResource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.CustomResourceFactory(resourceName, resourceFactoryAction));
        CustomResourceFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookDefaultVersionFactory WithHookDefaultVersion(Action<Humidifier.CloudFormation.HookDefaultVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookDefaultVersionFactory(resourceName, resourceFactoryAction));
        HookDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookTypeConfigFactory WithHookTypeConfig(Action<Humidifier.CloudFormation.HookTypeConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookTypeConfigFactory(resourceName, resourceFactoryAction));
        HookTypeConfigFactories.Add(factory);
        return factory;
    }

    public CloudFormation.HookVersionFactory WithHookVersion(Action<Humidifier.CloudFormation.HookVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.HookVersionFactory(resourceName, resourceFactoryAction));
        HookVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.MacroFactory WithMacro(Action<Humidifier.CloudFormation.Macro> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.MacroFactory(resourceName, resourceFactoryAction));
        MacroFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ModuleDefaultVersionFactory WithModuleDefaultVersion(Action<Humidifier.CloudFormation.ModuleDefaultVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ModuleDefaultVersionFactory(resourceName, resourceFactoryAction));
        ModuleDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ModuleVersionFactory WithModuleVersion(Action<Humidifier.CloudFormation.ModuleVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ModuleVersionFactory(resourceName, resourceFactoryAction));
        ModuleVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.PublicTypeVersionFactory WithPublicTypeVersion(Action<Humidifier.CloudFormation.PublicTypeVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.PublicTypeVersionFactory(resourceName, resourceFactoryAction));
        PublicTypeVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.PublisherFactory WithPublisher(Action<Humidifier.CloudFormation.Publisher> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.PublisherFactory(resourceName, resourceFactoryAction));
        PublisherFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ResourceDefaultVersionFactory WithResourceDefaultVersion(Action<Humidifier.CloudFormation.ResourceDefaultVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ResourceDefaultVersionFactory(resourceName, resourceFactoryAction));
        ResourceDefaultVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.ResourceVersionFactory WithResourceVersion(Action<Humidifier.CloudFormation.ResourceVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.ResourceVersionFactory(resourceName, resourceFactoryAction));
        ResourceVersionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.StackSetFactory WithStackSet(Action<Humidifier.CloudFormation.StackSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.StackSetFactory(resourceName, resourceFactoryAction));
        StackSetFactories.Add(factory);
        return factory;
    }

    public CloudFormation.TypeActivationFactory WithTypeActivation(Action<Humidifier.CloudFormation.TypeActivation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.TypeActivationFactory(resourceName, resourceFactoryAction));
        TypeActivationFactories.Add(factory);
        return factory;
    }

    public CloudFormation.WaitConditionFactory WithWaitCondition(Action<Humidifier.CloudFormation.WaitCondition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.WaitConditionFactory(resourceName, resourceFactoryAction));
        WaitConditionFactories.Add(factory);
        return factory;
    }

    public CloudFormation.WaitConditionHandleFactory WithWaitConditionHandle(Action<Humidifier.CloudFormation.WaitConditionHandle> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFormation.WaitConditionHandleFactory(resourceName, resourceFactoryAction));
        WaitConditionHandleFactories.Add(factory);
        return factory;
    }

    public CloudFront.CachePolicyFactory WithCachePolicy(Action<Humidifier.CloudFront.CachePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.CachePolicyFactory(resourceName, resourceFactoryAction));
        CachePolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.CloudFrontOriginAccessIdentityFactory WithCloudFrontOriginAccessIdentity(Action<Humidifier.CloudFront.CloudFrontOriginAccessIdentity> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.CloudFrontOriginAccessIdentityFactory(resourceName, resourceFactoryAction));
        CloudFrontOriginAccessIdentityFactories.Add(factory);
        return factory;
    }

    public CloudFront.ContinuousDeploymentPolicyFactory WithContinuousDeploymentPolicy(Action<Humidifier.CloudFront.ContinuousDeploymentPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.ContinuousDeploymentPolicyFactory(resourceName, resourceFactoryAction));
        ContinuousDeploymentPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.DistributionFactory WithCloudFrontDistribution(Action<Humidifier.CloudFront.Distribution> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.DistributionFactory(resourceName, resourceFactoryAction));
        CloudFrontDistributionFactories.Add(factory);
        return factory;
    }

    public Lightsail.DistributionFactory WithLightsailDistribution(Action<Humidifier.Lightsail.Distribution> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DistributionFactory(resourceName, resourceFactoryAction));
        LightsailDistributionFactories.Add(factory);
        return factory;
    }

    public CloudFront.FunctionFactory WithCloudFrontFunction(Action<Humidifier.CloudFront.Function> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.FunctionFactory(resourceName, resourceFactoryAction));
        CloudFrontFunctionFactories.Add(factory);
        return factory;
    }

    public Lambda.FunctionFactory WithLambdaFunction(Action<Humidifier.Lambda.Function> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.FunctionFactory(resourceName, resourceFactoryAction));
        LambdaFunctionFactories.Add(factory);
        return factory;
    }

    public CloudFront.KeyGroupFactory WithKeyGroup(Action<Humidifier.CloudFront.KeyGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.KeyGroupFactory(resourceName, resourceFactoryAction));
        KeyGroupFactories.Add(factory);
        return factory;
    }

    public CloudFront.KeyValueStoreFactory WithKeyValueStore(Action<Humidifier.CloudFront.KeyValueStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.KeyValueStoreFactory(resourceName, resourceFactoryAction));
        KeyValueStoreFactories.Add(factory);
        return factory;
    }

    public CloudFront.MonitoringSubscriptionFactory WithMonitoringSubscription(Action<Humidifier.CloudFront.MonitoringSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.MonitoringSubscriptionFactory(resourceName, resourceFactoryAction));
        MonitoringSubscriptionFactories.Add(factory);
        return factory;
    }

    public CloudFront.OriginAccessControlFactory WithOriginAccessControl(Action<Humidifier.CloudFront.OriginAccessControl> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.OriginAccessControlFactory(resourceName, resourceFactoryAction));
        OriginAccessControlFactories.Add(factory);
        return factory;
    }

    public CloudFront.OriginRequestPolicyFactory WithOriginRequestPolicy(Action<Humidifier.CloudFront.OriginRequestPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.OriginRequestPolicyFactory(resourceName, resourceFactoryAction));
        OriginRequestPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.PublicKeyFactory WithCloudFrontPublicKey(Action<Humidifier.CloudFront.PublicKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.PublicKeyFactory(resourceName, resourceFactoryAction));
        CloudFrontPublicKeyFactories.Add(factory);
        return factory;
    }

    public IVS.PublicKeyFactory WithIVSPublicKey(Action<Humidifier.IVS.PublicKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PublicKeyFactory(resourceName, resourceFactoryAction));
        IVSPublicKeyFactories.Add(factory);
        return factory;
    }

    public CloudFront.RealtimeLogConfigFactory WithRealtimeLogConfig(Action<Humidifier.CloudFront.RealtimeLogConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.RealtimeLogConfigFactory(resourceName, resourceFactoryAction));
        RealtimeLogConfigFactories.Add(factory);
        return factory;
    }

    public CloudFront.ResponseHeadersPolicyFactory WithResponseHeadersPolicy(Action<Humidifier.CloudFront.ResponseHeadersPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.ResponseHeadersPolicyFactory(resourceName, resourceFactoryAction));
        ResponseHeadersPolicyFactories.Add(factory);
        return factory;
    }

    public CloudFront.StreamingDistributionFactory WithStreamingDistribution(Action<Humidifier.CloudFront.StreamingDistribution> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudFront.StreamingDistributionFactory(resourceName, resourceFactoryAction));
        StreamingDistributionFactories.Add(factory);
        return factory;
    }

    public CloudTrail.ChannelFactory WithCloudTrailChannel(Action<Humidifier.CloudTrail.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.ChannelFactory(resourceName, resourceFactoryAction));
        CloudTrailChannelFactories.Add(factory);
        return factory;
    }

    public IVS.ChannelFactory WithIVSChannel(Action<Humidifier.IVS.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.ChannelFactory(resourceName, resourceFactoryAction));
        IVSChannelFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.ChannelFactory WithIoTAnalyticsChannel(Action<Humidifier.IoTAnalytics.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.ChannelFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsChannelFactories.Add(factory);
        return factory;
    }

    public MediaLive.ChannelFactory WithMediaLiveChannel(Action<Humidifier.MediaLive.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ChannelFactory(resourceName, resourceFactoryAction));
        MediaLiveChannelFactories.Add(factory);
        return factory;
    }

    public MediaPackage.ChannelFactory WithMediaPackageChannel(Action<Humidifier.MediaPackage.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.ChannelFactory(resourceName, resourceFactoryAction));
        MediaPackageChannelFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelFactory WithMediaPackageV2Channel(Action<Humidifier.MediaPackageV2.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelFactory(resourceName, resourceFactoryAction));
        MediaPackageV2ChannelFactories.Add(factory);
        return factory;
    }

    public MediaTailor.ChannelFactory WithMediaTailorChannel(Action<Humidifier.MediaTailor.Channel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.ChannelFactory(resourceName, resourceFactoryAction));
        MediaTailorChannelFactories.Add(factory);
        return factory;
    }

    public CloudTrail.EventDataStoreFactory WithEventDataStore(Action<Humidifier.CloudTrail.EventDataStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.EventDataStoreFactory(resourceName, resourceFactoryAction));
        EventDataStoreFactories.Add(factory);
        return factory;
    }

    public CloudTrail.ResourcePolicyFactory WithCloudTrailResourcePolicy(Action<Humidifier.CloudTrail.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        CloudTrailResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Lex.ResourcePolicyFactory WithLexResourcePolicy(Action<Humidifier.Lex.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        LexResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Logs.ResourcePolicyFactory WithLogsResourcePolicy(Action<Humidifier.Logs.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        LogsResourcePolicyFactories.Add(factory);
        return factory;
    }

    public Organizations.ResourcePolicyFactory WithOrganizationsResourcePolicy(Action<Humidifier.Organizations.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        OrganizationsResourcePolicyFactories.Add(factory);
        return factory;
    }

    public SSM.ResourcePolicyFactory WithSSMResourcePolicy(Action<Humidifier.SSM.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        SSMResourcePolicyFactories.Add(factory);
        return factory;
    }

    public SecretsManager.ResourcePolicyFactory WithSecretsManagerResourcePolicy(Action<Humidifier.SecretsManager.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        SecretsManagerResourcePolicyFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ResourcePolicyFactory WithVpcLatticeResourcePolicy(Action<Humidifier.VpcLattice.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        VpcLatticeResourcePolicyFactories.Add(factory);
        return factory;
    }

    public XRay.ResourcePolicyFactory WithXRayResourcePolicy(Action<Humidifier.XRay.ResourcePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.ResourcePolicyFactory(resourceName, resourceFactoryAction));
        XRayResourcePolicyFactories.Add(factory);
        return factory;
    }

    public CloudTrail.TrailFactory WithTrail(Action<Humidifier.CloudTrail.Trail> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudTrail.TrailFactory(resourceName, resourceFactoryAction));
        TrailFactories.Add(factory);
        return factory;
    }

    public CloudWatch.AlarmFactory WithCloudWatchAlarm(Action<Humidifier.CloudWatch.Alarm> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.AlarmFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmFactories.Add(factory);
        return factory;
    }

    public Lightsail.AlarmFactory WithLightsailAlarm(Action<Humidifier.Lightsail.Alarm> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.AlarmFactory(resourceName, resourceFactoryAction));
        LightsailAlarmFactories.Add(factory);
        return factory;
    }

    public CloudWatch.AnomalyDetectorFactory WithCloudWatchAnomalyDetector(Action<Humidifier.CloudWatch.AnomalyDetector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.AnomalyDetectorFactory(resourceName, resourceFactoryAction));
        CloudWatchAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public LookoutMetrics.AnomalyDetectorFactory WithLookoutMetricsAnomalyDetector(Action<Humidifier.LookoutMetrics.AnomalyDetector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutMetrics.AnomalyDetectorFactory(resourceName, resourceFactoryAction));
        LookoutMetricsAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public CloudWatch.CompositeAlarmFactory WithCompositeAlarm(Action<Humidifier.CloudWatch.CompositeAlarm> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.CompositeAlarmFactory(resourceName, resourceFactoryAction));
        CompositeAlarmFactories.Add(factory);
        return factory;
    }

    public CloudWatch.DashboardFactory WithCloudWatchDashboard(Action<Humidifier.CloudWatch.Dashboard> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.DashboardFactory(resourceName, resourceFactoryAction));
        CloudWatchDashboardFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.DashboardFactory WithIoTSiteWiseDashboard(Action<Humidifier.IoTSiteWise.Dashboard> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.DashboardFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseDashboardFactories.Add(factory);
        return factory;
    }

    public QuickSight.DashboardFactory WithQuickSightDashboard(Action<Humidifier.QuickSight.Dashboard> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DashboardFactory(resourceName, resourceFactoryAction));
        QuickSightDashboardFactories.Add(factory);
        return factory;
    }

    public CloudWatch.InsightRuleFactory WithInsightRule(Action<Humidifier.CloudWatch.InsightRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.InsightRuleFactory(resourceName, resourceFactoryAction));
        InsightRuleFactories.Add(factory);
        return factory;
    }

    public CloudWatch.MetricStreamFactory WithMetricStream(Action<Humidifier.CloudWatch.MetricStream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CloudWatch.MetricStreamFactory(resourceName, resourceFactoryAction));
        MetricStreamFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.PackageGroupFactory WithPackageGroup(Action<Humidifier.CodeArtifact.PackageGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.PackageGroupFactory(resourceName, resourceFactoryAction));
        PackageGroupFactories.Add(factory);
        return factory;
    }

    public CodeArtifact.RepositoryFactory WithCodeArtifactRepository(Action<Humidifier.CodeArtifact.Repository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeArtifact.RepositoryFactory(resourceName, resourceFactoryAction));
        CodeArtifactRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeCommit.RepositoryFactory WithCodeCommitRepository(Action<Humidifier.CodeCommit.Repository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeCommit.RepositoryFactory(resourceName, resourceFactoryAction));
        CodeCommitRepositoryFactories.Add(factory);
        return factory;
    }

    public ECR.RepositoryFactory WithECRRepository(Action<Humidifier.ECR.Repository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RepositoryFactory(resourceName, resourceFactoryAction));
        ECRRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeBuild.ProjectFactory WithCodeBuildProject(Action<Humidifier.CodeBuild.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.ProjectFactory(resourceName, resourceFactoryAction));
        CodeBuildProjectFactories.Add(factory);
        return factory;
    }

    public DataBrew.ProjectFactory WithDataBrewProject(Action<Humidifier.DataBrew.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.ProjectFactory(resourceName, resourceFactoryAction));
        DataBrewProjectFactories.Add(factory);
        return factory;
    }

    public DataZone.ProjectFactory WithDataZoneProject(Action<Humidifier.DataZone.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.ProjectFactory(resourceName, resourceFactoryAction));
        DataZoneProjectFactories.Add(factory);
        return factory;
    }

    public Evidently.ProjectFactory WithEvidentlyProject(Action<Humidifier.Evidently.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.ProjectFactory(resourceName, resourceFactoryAction));
        EvidentlyProjectFactories.Add(factory);
        return factory;
    }

    public IoT1Click.ProjectFactory WithIoT1ClickProject(Action<Humidifier.IoT1Click.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.ProjectFactory(resourceName, resourceFactoryAction));
        IoT1ClickProjectFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.ProjectFactory WithIoTSiteWiseProject(Action<Humidifier.IoTSiteWise.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.ProjectFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseProjectFactories.Add(factory);
        return factory;
    }

    public LookoutVision.ProjectFactory WithLookoutVisionProject(Action<Humidifier.LookoutVision.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutVision.ProjectFactory(resourceName, resourceFactoryAction));
        LookoutVisionProjectFactories.Add(factory);
        return factory;
    }

    public Rekognition.ProjectFactory WithRekognitionProject(Action<Humidifier.Rekognition.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.ProjectFactory(resourceName, resourceFactoryAction));
        RekognitionProjectFactories.Add(factory);
        return factory;
    }

    public SageMaker.ProjectFactory WithSageMakerProject(Action<Humidifier.SageMaker.Project> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ProjectFactory(resourceName, resourceFactoryAction));
        SageMakerProjectFactories.Add(factory);
        return factory;
    }

    public CodeBuild.ReportGroupFactory WithReportGroup(Action<Humidifier.CodeBuild.ReportGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.ReportGroupFactory(resourceName, resourceFactoryAction));
        ReportGroupFactories.Add(factory);
        return factory;
    }

    public CodeBuild.SourceCredentialFactory WithSourceCredential(Action<Humidifier.CodeBuild.SourceCredential> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeBuild.SourceCredentialFactory(resourceName, resourceFactoryAction));
        SourceCredentialFactories.Add(factory);
        return factory;
    }

    public CodeConnections.ConnectionFactory WithCodeConnectionsConnection(Action<Humidifier.CodeConnections.Connection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeConnections.ConnectionFactory(resourceName, resourceFactoryAction));
        CodeConnectionsConnectionFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.ConnectionFactory WithCodeStarConnectionsConnection(Action<Humidifier.CodeStarConnections.Connection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.ConnectionFactory(resourceName, resourceFactoryAction));
        CodeStarConnectionsConnectionFactories.Add(factory);
        return factory;
    }

    public Events.ConnectionFactory WithEventsConnection(Action<Humidifier.Events.Connection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ConnectionFactory(resourceName, resourceFactoryAction));
        EventsConnectionFactories.Add(factory);
        return factory;
    }

    public Glue.ConnectionFactory WithGlueConnection(Action<Humidifier.Glue.Connection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.ConnectionFactory(resourceName, resourceFactoryAction));
        GlueConnectionFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.DeploymentConfigFactory WithDeploymentConfig(Action<Humidifier.CodeDeploy.DeploymentConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.DeploymentConfigFactory(resourceName, resourceFactoryAction));
        DeploymentConfigFactories.Add(factory);
        return factory;
    }

    public CodeDeploy.DeploymentGroupFactory WithDeploymentGroup(Action<Humidifier.CodeDeploy.DeploymentGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeDeploy.DeploymentGroupFactory(resourceName, resourceFactoryAction));
        DeploymentGroupFactories.Add(factory);
        return factory;
    }

    public CodeGuruProfiler.ProfilingGroupFactory WithProfilingGroup(Action<Humidifier.CodeGuruProfiler.ProfilingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeGuruProfiler.ProfilingGroupFactory(resourceName, resourceFactoryAction));
        ProfilingGroupFactories.Add(factory);
        return factory;
    }

    public CodeGuruReviewer.RepositoryAssociationFactory WithRepositoryAssociation(Action<Humidifier.CodeGuruReviewer.RepositoryAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeGuruReviewer.RepositoryAssociationFactory(resourceName, resourceFactoryAction));
        RepositoryAssociationFactories.Add(factory);
        return factory;
    }

    public CodePipeline.CustomActionTypeFactory WithCustomActionType(Action<Humidifier.CodePipeline.CustomActionType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.CustomActionTypeFactory(resourceName, resourceFactoryAction));
        CustomActionTypeFactories.Add(factory);
        return factory;
    }

    public CodePipeline.PipelineFactory WithCodePipelinePipeline(Action<Humidifier.CodePipeline.Pipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.PipelineFactory(resourceName, resourceFactoryAction));
        CodePipelinePipelineFactories.Add(factory);
        return factory;
    }

    public DataPipeline.PipelineFactory WithDataPipelinePipeline(Action<Humidifier.DataPipeline.Pipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataPipeline.PipelineFactory(resourceName, resourceFactoryAction));
        DataPipelinePipelineFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.PipelineFactory WithIoTAnalyticsPipeline(Action<Humidifier.IoTAnalytics.Pipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.PipelineFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsPipelineFactories.Add(factory);
        return factory;
    }

    public OSIS.PipelineFactory WithOSISPipeline(Action<Humidifier.OSIS.Pipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OSIS.PipelineFactory(resourceName, resourceFactoryAction));
        OSISPipelineFactories.Add(factory);
        return factory;
    }

    public SageMaker.PipelineFactory WithSageMakerPipeline(Action<Humidifier.SageMaker.Pipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.PipelineFactory(resourceName, resourceFactoryAction));
        SageMakerPipelineFactories.Add(factory);
        return factory;
    }

    public CodePipeline.WebhookFactory WithWebhook(Action<Humidifier.CodePipeline.Webhook> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodePipeline.WebhookFactory(resourceName, resourceFactoryAction));
        WebhookFactories.Add(factory);
        return factory;
    }

    public CodeStar.GitHubRepositoryFactory WithGitHubRepository(Action<Humidifier.CodeStar.GitHubRepository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStar.GitHubRepositoryFactory(resourceName, resourceFactoryAction));
        GitHubRepositoryFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.RepositoryLinkFactory WithRepositoryLink(Action<Humidifier.CodeStarConnections.RepositoryLink> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.RepositoryLinkFactory(resourceName, resourceFactoryAction));
        RepositoryLinkFactories.Add(factory);
        return factory;
    }

    public CodeStarConnections.SyncConfigurationFactory WithSyncConfiguration(Action<Humidifier.CodeStarConnections.SyncConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarConnections.SyncConfigurationFactory(resourceName, resourceFactoryAction));
        SyncConfigurationFactories.Add(factory);
        return factory;
    }

    public CodeStarNotifications.NotificationRuleFactory WithNotificationRule(Action<Humidifier.CodeStarNotifications.NotificationRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CodeStarNotifications.NotificationRuleFactory(resourceName, resourceFactoryAction));
        NotificationRuleFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolFactory WithIdentityPool(Action<Humidifier.Cognito.IdentityPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolFactory(resourceName, resourceFactoryAction));
        IdentityPoolFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolPrincipalTagFactory WithIdentityPoolPrincipalTag(Action<Humidifier.Cognito.IdentityPoolPrincipalTag> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolPrincipalTagFactory(resourceName, resourceFactoryAction));
        IdentityPoolPrincipalTagFactories.Add(factory);
        return factory;
    }

    public Cognito.IdentityPoolRoleAttachmentFactory WithIdentityPoolRoleAttachment(Action<Humidifier.Cognito.IdentityPoolRoleAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.IdentityPoolRoleAttachmentFactory(resourceName, resourceFactoryAction));
        IdentityPoolRoleAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.LogDeliveryConfigurationFactory WithLogDeliveryConfiguration(Action<Humidifier.Cognito.LogDeliveryConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.LogDeliveryConfigurationFactory(resourceName, resourceFactoryAction));
        LogDeliveryConfigurationFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolFactory WithUserPool(Action<Humidifier.Cognito.UserPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolFactory(resourceName, resourceFactoryAction));
        UserPoolFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolClientFactory WithUserPoolClient(Action<Humidifier.Cognito.UserPoolClient> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolClientFactory(resourceName, resourceFactoryAction));
        UserPoolClientFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolDomainFactory WithUserPoolDomain(Action<Humidifier.Cognito.UserPoolDomain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolDomainFactory(resourceName, resourceFactoryAction));
        UserPoolDomainFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolGroupFactory WithUserPoolGroup(Action<Humidifier.Cognito.UserPoolGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolGroupFactory(resourceName, resourceFactoryAction));
        UserPoolGroupFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolIdentityProviderFactory WithUserPoolIdentityProvider(Action<Humidifier.Cognito.UserPoolIdentityProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolIdentityProviderFactory(resourceName, resourceFactoryAction));
        UserPoolIdentityProviderFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolResourceServerFactory WithUserPoolResourceServer(Action<Humidifier.Cognito.UserPoolResourceServer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolResourceServerFactory(resourceName, resourceFactoryAction));
        UserPoolResourceServerFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolRiskConfigurationAttachmentFactory WithUserPoolRiskConfigurationAttachment(Action<Humidifier.Cognito.UserPoolRiskConfigurationAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolRiskConfigurationAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolRiskConfigurationAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUICustomizationAttachmentFactory WithUserPoolUICustomizationAttachment(Action<Humidifier.Cognito.UserPoolUICustomizationAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUICustomizationAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolUICustomizationAttachmentFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUserFactory WithUserPoolUser(Action<Humidifier.Cognito.UserPoolUser> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUserFactory(resourceName, resourceFactoryAction));
        UserPoolUserFactories.Add(factory);
        return factory;
    }

    public Cognito.UserPoolUserToGroupAttachmentFactory WithUserPoolUserToGroupAttachment(Action<Humidifier.Cognito.UserPoolUserToGroupAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Cognito.UserPoolUserToGroupAttachmentFactory(resourceName, resourceFactoryAction));
        UserPoolUserToGroupAttachmentFactories.Add(factory);
        return factory;
    }

    public Comprehend.DocumentClassifierFactory WithDocumentClassifier(Action<Humidifier.Comprehend.DocumentClassifier> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Comprehend.DocumentClassifierFactory(resourceName, resourceFactoryAction));
        DocumentClassifierFactories.Add(factory);
        return factory;
    }

    public Comprehend.FlywheelFactory WithFlywheel(Action<Humidifier.Comprehend.Flywheel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Comprehend.FlywheelFactory(resourceName, resourceFactoryAction));
        FlywheelFactories.Add(factory);
        return factory;
    }

    public Config.AggregationAuthorizationFactory WithAggregationAuthorization(Action<Humidifier.Config.AggregationAuthorization> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.AggregationAuthorizationFactory(resourceName, resourceFactoryAction));
        AggregationAuthorizationFactories.Add(factory);
        return factory;
    }

    public Config.ConfigRuleFactory WithConfigRule(Action<Humidifier.Config.ConfigRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigRuleFactory(resourceName, resourceFactoryAction));
        ConfigRuleFactories.Add(factory);
        return factory;
    }

    public Config.ConfigurationAggregatorFactory WithConfigurationAggregator(Action<Humidifier.Config.ConfigurationAggregator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigurationAggregatorFactory(resourceName, resourceFactoryAction));
        ConfigurationAggregatorFactories.Add(factory);
        return factory;
    }

    public Config.ConfigurationRecorderFactory WithConfigurationRecorder(Action<Humidifier.Config.ConfigurationRecorder> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConfigurationRecorderFactory(resourceName, resourceFactoryAction));
        ConfigurationRecorderFactories.Add(factory);
        return factory;
    }

    public Config.ConformancePackFactory WithConformancePack(Action<Humidifier.Config.ConformancePack> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.ConformancePackFactory(resourceName, resourceFactoryAction));
        ConformancePackFactories.Add(factory);
        return factory;
    }

    public Config.DeliveryChannelFactory WithDeliveryChannel(Action<Humidifier.Config.DeliveryChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.DeliveryChannelFactory(resourceName, resourceFactoryAction));
        DeliveryChannelFactories.Add(factory);
        return factory;
    }

    public Config.OrganizationConfigRuleFactory WithOrganizationConfigRule(Action<Humidifier.Config.OrganizationConfigRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.OrganizationConfigRuleFactory(resourceName, resourceFactoryAction));
        OrganizationConfigRuleFactories.Add(factory);
        return factory;
    }

    public Config.OrganizationConformancePackFactory WithOrganizationConformancePack(Action<Humidifier.Config.OrganizationConformancePack> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.OrganizationConformancePackFactory(resourceName, resourceFactoryAction));
        OrganizationConformancePackFactories.Add(factory);
        return factory;
    }

    public Config.RemediationConfigurationFactory WithRemediationConfiguration(Action<Humidifier.Config.RemediationConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.RemediationConfigurationFactory(resourceName, resourceFactoryAction));
        RemediationConfigurationFactories.Add(factory);
        return factory;
    }

    public Config.StoredQueryFactory WithStoredQuery(Action<Humidifier.Config.StoredQuery> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Config.StoredQueryFactory(resourceName, resourceFactoryAction));
        StoredQueryFactories.Add(factory);
        return factory;
    }

    public Connect.AgentStatusFactory WithAgentStatus(Action<Humidifier.Connect.AgentStatus> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.AgentStatusFactory(resourceName, resourceFactoryAction));
        AgentStatusFactories.Add(factory);
        return factory;
    }

    public Connect.ApprovedOriginFactory WithApprovedOrigin(Action<Humidifier.Connect.ApprovedOrigin> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ApprovedOriginFactory(resourceName, resourceFactoryAction));
        ApprovedOriginFactories.Add(factory);
        return factory;
    }

    public Connect.ContactFlowFactory WithContactFlow(Action<Humidifier.Connect.ContactFlow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ContactFlowFactory(resourceName, resourceFactoryAction));
        ContactFlowFactories.Add(factory);
        return factory;
    }

    public Connect.ContactFlowModuleFactory WithContactFlowModule(Action<Humidifier.Connect.ContactFlowModule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ContactFlowModuleFactory(resourceName, resourceFactoryAction));
        ContactFlowModuleFactories.Add(factory);
        return factory;
    }

    public Connect.EvaluationFormFactory WithEvaluationForm(Action<Humidifier.Connect.EvaluationForm> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.EvaluationFormFactory(resourceName, resourceFactoryAction));
        EvaluationFormFactories.Add(factory);
        return factory;
    }

    public Connect.HoursOfOperationFactory WithHoursOfOperation(Action<Humidifier.Connect.HoursOfOperation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.HoursOfOperationFactory(resourceName, resourceFactoryAction));
        HoursOfOperationFactories.Add(factory);
        return factory;
    }

    public Connect.InstanceFactory WithConnectInstance(Action<Humidifier.Connect.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.InstanceFactory(resourceName, resourceFactoryAction));
        ConnectInstanceFactories.Add(factory);
        return factory;
    }

    public EC2.InstanceFactory WithEC2Instance(Action<Humidifier.EC2.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InstanceFactory(resourceName, resourceFactoryAction));
        EC2InstanceFactories.Add(factory);
        return factory;
    }

    public Lightsail.InstanceFactory WithLightsailInstance(Action<Humidifier.Lightsail.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.InstanceFactory(resourceName, resourceFactoryAction));
        LightsailInstanceFactories.Add(factory);
        return factory;
    }

    public OpsWorks.InstanceFactory WithOpsWorksInstance(Action<Humidifier.OpsWorks.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.InstanceFactory(resourceName, resourceFactoryAction));
        OpsWorksInstanceFactories.Add(factory);
        return factory;
    }

    public SSO.InstanceFactory WithSSOInstance(Action<Humidifier.SSO.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.InstanceFactory(resourceName, resourceFactoryAction));
        SSOInstanceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.InstanceFactory WithServiceDiscoveryInstance(Action<Humidifier.ServiceDiscovery.Instance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.InstanceFactory(resourceName, resourceFactoryAction));
        ServiceDiscoveryInstanceFactories.Add(factory);
        return factory;
    }

    public Connect.InstanceStorageConfigFactory WithInstanceStorageConfig(Action<Humidifier.Connect.InstanceStorageConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.InstanceStorageConfigFactory(resourceName, resourceFactoryAction));
        InstanceStorageConfigFactories.Add(factory);
        return factory;
    }

    public Connect.IntegrationAssociationFactory WithIntegrationAssociation(Action<Humidifier.Connect.IntegrationAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.IntegrationAssociationFactory(resourceName, resourceFactoryAction));
        IntegrationAssociationFactories.Add(factory);
        return factory;
    }

    public Connect.PhoneNumberFactory WithPhoneNumber(Action<Humidifier.Connect.PhoneNumber> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PhoneNumberFactory(resourceName, resourceFactoryAction));
        PhoneNumberFactories.Add(factory);
        return factory;
    }

    public Connect.PredefinedAttributeFactory WithPredefinedAttribute(Action<Humidifier.Connect.PredefinedAttribute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.PredefinedAttributeFactory(resourceName, resourceFactoryAction));
        PredefinedAttributeFactories.Add(factory);
        return factory;
    }

    public Connect.QueueFactory WithConnectQueue(Action<Humidifier.Connect.Queue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.QueueFactory(resourceName, resourceFactoryAction));
        ConnectQueueFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueFactory WithDeadlineQueue(Action<Humidifier.Deadline.Queue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueFactory(resourceName, resourceFactoryAction));
        DeadlineQueueFactories.Add(factory);
        return factory;
    }

    public MediaConvert.QueueFactory WithMediaConvertQueue(Action<Humidifier.MediaConvert.Queue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.QueueFactory(resourceName, resourceFactoryAction));
        MediaConvertQueueFactories.Add(factory);
        return factory;
    }

    public SQS.QueueFactory WithSQSQueue(Action<Humidifier.SQS.Queue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueueFactory(resourceName, resourceFactoryAction));
        SQSQueueFactories.Add(factory);
        return factory;
    }

    public Connect.QuickConnectFactory WithQuickConnect(Action<Humidifier.Connect.QuickConnect> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.QuickConnectFactory(resourceName, resourceFactoryAction));
        QuickConnectFactories.Add(factory);
        return factory;
    }

    public Connect.RoutingProfileFactory WithRoutingProfile(Action<Humidifier.Connect.RoutingProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.RoutingProfileFactory(resourceName, resourceFactoryAction));
        RoutingProfileFactories.Add(factory);
        return factory;
    }

    public Connect.RuleFactory WithConnectRule(Action<Humidifier.Connect.Rule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.RuleFactory(resourceName, resourceFactoryAction));
        ConnectRuleFactories.Add(factory);
        return factory;
    }

    public Events.RuleFactory WithEventsRule(Action<Humidifier.Events.Rule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.RuleFactory(resourceName, resourceFactoryAction));
        EventsRuleFactories.Add(factory);
        return factory;
    }

    public VpcLattice.RuleFactory WithVpcLatticeRule(Action<Humidifier.VpcLattice.Rule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.RuleFactory(resourceName, resourceFactoryAction));
        VpcLatticeRuleFactories.Add(factory);
        return factory;
    }

    public WAF.RuleFactory WithWAFRule(Action<Humidifier.WAF.Rule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.RuleFactory(resourceName, resourceFactoryAction));
        WAFRuleFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RuleFactory WithWAFRegionalRule(Action<Humidifier.WAFRegional.Rule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RuleFactory(resourceName, resourceFactoryAction));
        WAFRegionalRuleFactories.Add(factory);
        return factory;
    }

    public Connect.SecurityKeyFactory WithSecurityKey(Action<Humidifier.Connect.SecurityKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.SecurityKeyFactory(resourceName, resourceFactoryAction));
        SecurityKeyFactories.Add(factory);
        return factory;
    }

    public Connect.SecurityProfileFactory WithConnectSecurityProfile(Action<Humidifier.Connect.SecurityProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.SecurityProfileFactory(resourceName, resourceFactoryAction));
        ConnectSecurityProfileFactories.Add(factory);
        return factory;
    }

    public IoT.SecurityProfileFactory WithIoTSecurityProfile(Action<Humidifier.IoT.SecurityProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SecurityProfileFactory(resourceName, resourceFactoryAction));
        IoTSecurityProfileFactories.Add(factory);
        return factory;
    }

    public Connect.TaskTemplateFactory WithTaskTemplate(Action<Humidifier.Connect.TaskTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.TaskTemplateFactory(resourceName, resourceFactoryAction));
        TaskTemplateFactories.Add(factory);
        return factory;
    }

    public Connect.TrafficDistributionGroupFactory WithTrafficDistributionGroup(Action<Humidifier.Connect.TrafficDistributionGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.TrafficDistributionGroupFactory(resourceName, resourceFactoryAction));
        TrafficDistributionGroupFactories.Add(factory);
        return factory;
    }

    public Connect.UserHierarchyGroupFactory WithUserHierarchyGroup(Action<Humidifier.Connect.UserHierarchyGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserHierarchyGroupFactory(resourceName, resourceFactoryAction));
        UserHierarchyGroupFactories.Add(factory);
        return factory;
    }

    public Connect.UserHierarchyStructureFactory WithUserHierarchyStructure(Action<Humidifier.Connect.UserHierarchyStructure> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.UserHierarchyStructureFactory(resourceName, resourceFactoryAction));
        UserHierarchyStructureFactories.Add(factory);
        return factory;
    }

    public Connect.ViewFactory WithConnectView(Action<Humidifier.Connect.View> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ViewFactory(resourceName, resourceFactoryAction));
        ConnectViewFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.ViewFactory WithResourceExplorer2View(Action<Humidifier.ResourceExplorer2.View> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.ViewFactory(resourceName, resourceFactoryAction));
        ResourceExplorer2ViewFactories.Add(factory);
        return factory;
    }

    public Connect.ViewVersionFactory WithViewVersion(Action<Humidifier.Connect.ViewVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Connect.ViewVersionFactory(resourceName, resourceFactoryAction));
        ViewVersionFactories.Add(factory);
        return factory;
    }

    public ConnectCampaigns.CampaignFactory WithConnectCampaignsCampaign(Action<Humidifier.ConnectCampaigns.Campaign> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ConnectCampaigns.CampaignFactory(resourceName, resourceFactoryAction));
        ConnectCampaignsCampaignFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.CampaignFactory WithIoTFleetWiseCampaign(Action<Humidifier.IoTFleetWise.Campaign> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.CampaignFactory(resourceName, resourceFactoryAction));
        IoTFleetWiseCampaignFactories.Add(factory);
        return factory;
    }

    public Pinpoint.CampaignFactory WithPinpointCampaign(Action<Humidifier.Pinpoint.Campaign> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.CampaignFactory(resourceName, resourceFactoryAction));
        PinpointCampaignFactories.Add(factory);
        return factory;
    }

    public ControlTower.EnabledBaselineFactory WithEnabledBaseline(Action<Humidifier.ControlTower.EnabledBaseline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.EnabledBaselineFactory(resourceName, resourceFactoryAction));
        EnabledBaselineFactories.Add(factory);
        return factory;
    }

    public ControlTower.EnabledControlFactory WithEnabledControl(Action<Humidifier.ControlTower.EnabledControl> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.EnabledControlFactory(resourceName, resourceFactoryAction));
        EnabledControlFactories.Add(factory);
        return factory;
    }

    public ControlTower.LandingZoneFactory WithLandingZone(Action<Humidifier.ControlTower.LandingZone> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ControlTower.LandingZoneFactory(resourceName, resourceFactoryAction));
        LandingZoneFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.CalculatedAttributeDefinitionFactory WithCalculatedAttributeDefinition(Action<Humidifier.CustomerProfiles.CalculatedAttributeDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.CalculatedAttributeDefinitionFactory(resourceName, resourceFactoryAction));
        CalculatedAttributeDefinitionFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.EventStreamFactory WithCustomerProfilesEventStream(Action<Humidifier.CustomerProfiles.EventStream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.EventStreamFactory(resourceName, resourceFactoryAction));
        CustomerProfilesEventStreamFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EventStreamFactory WithPinpointEventStream(Action<Humidifier.Pinpoint.EventStream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EventStreamFactory(resourceName, resourceFactoryAction));
        PinpointEventStreamFactories.Add(factory);
        return factory;
    }

    public CustomerProfiles.ObjectTypeFactory WithObjectType(Action<Humidifier.CustomerProfiles.ObjectType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new CustomerProfiles.ObjectTypeFactory(resourceName, resourceFactoryAction));
        ObjectTypeFactories.Add(factory);
        return factory;
    }

    public DAX.ClusterFactory WithDAXCluster(Action<Humidifier.DAX.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.ClusterFactory(resourceName, resourceFactoryAction));
        DAXClusterFactories.Add(factory);
        return factory;
    }

    public DocDBElastic.ClusterFactory WithDocDBElasticCluster(Action<Humidifier.DocDBElastic.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDBElastic.ClusterFactory(resourceName, resourceFactoryAction));
        DocDBElasticClusterFactories.Add(factory);
        return factory;
    }

    public ECS.ClusterFactory WithECSCluster(Action<Humidifier.ECS.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ClusterFactory(resourceName, resourceFactoryAction));
        ECSClusterFactories.Add(factory);
        return factory;
    }

    public EKS.ClusterFactory WithEKSCluster(Action<Humidifier.EKS.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.ClusterFactory(resourceName, resourceFactoryAction));
        EKSClusterFactories.Add(factory);
        return factory;
    }

    public EMR.ClusterFactory WithEMRCluster(Action<Humidifier.EMR.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.ClusterFactory(resourceName, resourceFactoryAction));
        EMRClusterFactories.Add(factory);
        return factory;
    }

    public MSK.ClusterFactory WithMSKCluster(Action<Humidifier.MSK.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ClusterFactory(resourceName, resourceFactoryAction));
        MSKClusterFactories.Add(factory);
        return factory;
    }

    public MediaLive.ClusterFactory WithMediaLiveCluster(Action<Humidifier.MediaLive.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ClusterFactory(resourceName, resourceFactoryAction));
        MediaLiveClusterFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ClusterFactory WithMemoryDBCluster(Action<Humidifier.MemoryDB.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ClusterFactory(resourceName, resourceFactoryAction));
        MemoryDBClusterFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterFactory WithRedshiftCluster(Action<Humidifier.Redshift.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterFactory(resourceName, resourceFactoryAction));
        RedshiftClusterFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.ClusterFactory WithRoute53RecoveryControlCluster(Action<Humidifier.Route53RecoveryControl.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.ClusterFactory(resourceName, resourceFactoryAction));
        Route53RecoveryControlClusterFactories.Add(factory);
        return factory;
    }

    public SageMaker.ClusterFactory WithSageMakerCluster(Action<Humidifier.SageMaker.Cluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ClusterFactory(resourceName, resourceFactoryAction));
        SageMakerClusterFactories.Add(factory);
        return factory;
    }

    public DAX.ParameterGroupFactory WithDAXParameterGroup(Action<Humidifier.DAX.ParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.ParameterGroupFactory(resourceName, resourceFactoryAction));
        DAXParameterGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ParameterGroupFactory WithElastiCacheParameterGroup(Action<Humidifier.ElastiCache.ParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ParameterGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheParameterGroupFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ParameterGroupFactory WithMemoryDBParameterGroup(Action<Humidifier.MemoryDB.ParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ParameterGroupFactory(resourceName, resourceFactoryAction));
        MemoryDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public DAX.SubnetGroupFactory WithDAXSubnetGroup(Action<Humidifier.DAX.SubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DAX.SubnetGroupFactory(resourceName, resourceFactoryAction));
        DAXSubnetGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SubnetGroupFactory WithElastiCacheSubnetGroup(Action<Humidifier.ElastiCache.SubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SubnetGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheSubnetGroupFactories.Add(factory);
        return factory;
    }

    public MemoryDB.SubnetGroupFactory WithMemoryDBSubnetGroup(Action<Humidifier.MemoryDB.SubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.SubnetGroupFactory(resourceName, resourceFactoryAction));
        MemoryDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DLM.LifecyclePolicyFactory WithDLMLifecyclePolicy(Action<Humidifier.DLM.LifecyclePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DLM.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        DLMLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.LifecyclePolicyFactory WithImageBuilderLifecyclePolicy(Action<Humidifier.ImageBuilder.LifecyclePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        ImageBuilderLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.LifecyclePolicyFactory WithOpenSearchServerlessLifecyclePolicy(Action<Humidifier.OpenSearchServerless.LifecyclePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.LifecyclePolicyFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessLifecyclePolicyFactories.Add(factory);
        return factory;
    }

    public DMS.DataProviderFactory WithDataProvider(Action<Humidifier.DMS.DataProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.DataProviderFactory(resourceName, resourceFactoryAction));
        DataProviderFactories.Add(factory);
        return factory;
    }

    public DMS.EndpointFactory WithDMSEndpoint(Action<Humidifier.DMS.Endpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.EndpointFactory(resourceName, resourceFactoryAction));
        DMSEndpointFactories.Add(factory);
        return factory;
    }

    public Events.EndpointFactory WithEventsEndpoint(Action<Humidifier.Events.Endpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EndpointFactory(resourceName, resourceFactoryAction));
        EventsEndpointFactories.Add(factory);
        return factory;
    }

    public S3Outposts.EndpointFactory WithS3OutpostsEndpoint(Action<Humidifier.S3Outposts.Endpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.EndpointFactory(resourceName, resourceFactoryAction));
        S3OutpostsEndpointFactories.Add(factory);
        return factory;
    }

    public SageMaker.EndpointFactory WithSageMakerEndpoint(Action<Humidifier.SageMaker.Endpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.EndpointFactory(resourceName, resourceFactoryAction));
        SageMakerEndpointFactories.Add(factory);
        return factory;
    }

    public DMS.EventSubscriptionFactory WithDMSEventSubscription(Action<Humidifier.DMS.EventSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        DMSEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public DocDB.EventSubscriptionFactory WithDocDBEventSubscription(Action<Humidifier.DocDB.EventSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        DocDBEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public Neptune.EventSubscriptionFactory WithNeptuneEventSubscription(Action<Humidifier.Neptune.EventSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        NeptuneEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public RDS.EventSubscriptionFactory WithRDSEventSubscription(Action<Humidifier.RDS.EventSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        RDSEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public Redshift.EventSubscriptionFactory WithRedshiftEventSubscription(Action<Humidifier.Redshift.EventSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EventSubscriptionFactory(resourceName, resourceFactoryAction));
        RedshiftEventSubscriptionFactories.Add(factory);
        return factory;
    }

    public DMS.InstanceProfileFactory WithDMSInstanceProfile(Action<Humidifier.DMS.InstanceProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.InstanceProfileFactory(resourceName, resourceFactoryAction));
        DMSInstanceProfileFactories.Add(factory);
        return factory;
    }

    public IAM.InstanceProfileFactory WithIAMInstanceProfile(Action<Humidifier.IAM.InstanceProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.InstanceProfileFactory(resourceName, resourceFactoryAction));
        IAMInstanceProfileFactories.Add(factory);
        return factory;
    }

    public DMS.MigrationProjectFactory WithMigrationProject(Action<Humidifier.DMS.MigrationProject> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.MigrationProjectFactory(resourceName, resourceFactoryAction));
        MigrationProjectFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationConfigFactory WithReplicationConfig(Action<Humidifier.DMS.ReplicationConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationConfigFactory(resourceName, resourceFactoryAction));
        ReplicationConfigFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationInstanceFactory WithReplicationInstance(Action<Humidifier.DMS.ReplicationInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationInstanceFactory(resourceName, resourceFactoryAction));
        ReplicationInstanceFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationSubnetGroupFactory WithReplicationSubnetGroup(Action<Humidifier.DMS.ReplicationSubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationSubnetGroupFactory(resourceName, resourceFactoryAction));
        ReplicationSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DMS.ReplicationTaskFactory WithReplicationTask(Action<Humidifier.DMS.ReplicationTask> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DMS.ReplicationTaskFactory(resourceName, resourceFactoryAction));
        ReplicationTaskFactories.Add(factory);
        return factory;
    }

    public DataBrew.DatasetFactory WithDataBrewDataset(Action<Humidifier.DataBrew.Dataset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.DatasetFactory(resourceName, resourceFactoryAction));
        DataBrewDatasetFactories.Add(factory);
        return factory;
    }

    public Forecast.DatasetFactory WithForecastDataset(Action<Humidifier.Forecast.Dataset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Forecast.DatasetFactory(resourceName, resourceFactoryAction));
        ForecastDatasetFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.DatasetFactory WithIoTAnalyticsDataset(Action<Humidifier.IoTAnalytics.Dataset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.DatasetFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsDatasetFactories.Add(factory);
        return factory;
    }

    public Personalize.DatasetFactory WithPersonalizeDataset(Action<Humidifier.Personalize.Dataset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.DatasetFactory(resourceName, resourceFactoryAction));
        PersonalizeDatasetFactories.Add(factory);
        return factory;
    }

    public DataBrew.JobFactory WithDataBrewJob(Action<Humidifier.DataBrew.Job> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.JobFactory(resourceName, resourceFactoryAction));
        DataBrewJobFactories.Add(factory);
        return factory;
    }

    public Glue.JobFactory WithGlueJob(Action<Humidifier.Glue.Job> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.JobFactory(resourceName, resourceFactoryAction));
        GlueJobFactories.Add(factory);
        return factory;
    }

    public DataBrew.RecipeFactory WithRecipe(Action<Humidifier.DataBrew.Recipe> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.RecipeFactory(resourceName, resourceFactoryAction));
        RecipeFactories.Add(factory);
        return factory;
    }

    public DataBrew.RulesetFactory WithRuleset(Action<Humidifier.DataBrew.Ruleset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.RulesetFactory(resourceName, resourceFactoryAction));
        RulesetFactories.Add(factory);
        return factory;
    }

    public DataBrew.ScheduleFactory WithDataBrewSchedule(Action<Humidifier.DataBrew.Schedule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataBrew.ScheduleFactory(resourceName, resourceFactoryAction));
        DataBrewScheduleFactories.Add(factory);
        return factory;
    }

    public Scheduler.ScheduleFactory WithSchedulerSchedule(Action<Humidifier.Scheduler.Schedule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Scheduler.ScheduleFactory(resourceName, resourceFactoryAction));
        SchedulerScheduleFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationAzureBlobFactory WithLocationAzureBlob(Action<Humidifier.DataSync.LocationAzureBlob> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationAzureBlobFactory(resourceName, resourceFactoryAction));
        LocationAzureBlobFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationEFSFactory WithLocationEFS(Action<Humidifier.DataSync.LocationEFS> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationEFSFactory(resourceName, resourceFactoryAction));
        LocationEFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxLustreFactory WithLocationFSxLustre(Action<Humidifier.DataSync.LocationFSxLustre> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxLustreFactory(resourceName, resourceFactoryAction));
        LocationFSxLustreFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxONTAPFactory WithLocationFSxONTAP(Action<Humidifier.DataSync.LocationFSxONTAP> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxONTAPFactory(resourceName, resourceFactoryAction));
        LocationFSxONTAPFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxOpenZFSFactory WithLocationFSxOpenZFS(Action<Humidifier.DataSync.LocationFSxOpenZFS> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxOpenZFSFactory(resourceName, resourceFactoryAction));
        LocationFSxOpenZFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationFSxWindowsFactory WithLocationFSxWindows(Action<Humidifier.DataSync.LocationFSxWindows> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationFSxWindowsFactory(resourceName, resourceFactoryAction));
        LocationFSxWindowsFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationHDFSFactory WithLocationHDFS(Action<Humidifier.DataSync.LocationHDFS> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationHDFSFactory(resourceName, resourceFactoryAction));
        LocationHDFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationNFSFactory WithLocationNFS(Action<Humidifier.DataSync.LocationNFS> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationNFSFactory(resourceName, resourceFactoryAction));
        LocationNFSFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationObjectStorageFactory WithLocationObjectStorage(Action<Humidifier.DataSync.LocationObjectStorage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationObjectStorageFactory(resourceName, resourceFactoryAction));
        LocationObjectStorageFactories.Add(factory);
        return factory;
    }

    public DataSync.LocationS3Factory WithLocationS3(Action<Humidifier.DataSync.LocationS3> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationS3Factory(resourceName, resourceFactoryAction));
        LocationS3Factories.Add(factory);
        return factory;
    }

    public DataSync.LocationSMBFactory WithLocationSMB(Action<Humidifier.DataSync.LocationSMB> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.LocationSMBFactory(resourceName, resourceFactoryAction));
        LocationSMBFactories.Add(factory);
        return factory;
    }

    public DataSync.StorageSystemFactory WithStorageSystem(Action<Humidifier.DataSync.StorageSystem> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.StorageSystemFactory(resourceName, resourceFactoryAction));
        StorageSystemFactories.Add(factory);
        return factory;
    }

    public DataSync.TaskFactory WithTask(Action<Humidifier.DataSync.Task> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataSync.TaskFactory(resourceName, resourceFactoryAction));
        TaskFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentActionsFactory WithEnvironmentActions(Action<Humidifier.DataZone.EnvironmentActions> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentActionsFactory(resourceName, resourceFactoryAction));
        EnvironmentActionsFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentBlueprintConfigurationFactory WithEnvironmentBlueprintConfiguration(Action<Humidifier.DataZone.EnvironmentBlueprintConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentBlueprintConfigurationFactory(resourceName, resourceFactoryAction));
        EnvironmentBlueprintConfigurationFactories.Add(factory);
        return factory;
    }

    public DataZone.EnvironmentProfileFactory WithEnvironmentProfile(Action<Humidifier.DataZone.EnvironmentProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.EnvironmentProfileFactory(resourceName, resourceFactoryAction));
        EnvironmentProfileFactories.Add(factory);
        return factory;
    }

    public DataZone.GroupProfileFactory WithGroupProfile(Action<Humidifier.DataZone.GroupProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.GroupProfileFactory(resourceName, resourceFactoryAction));
        GroupProfileFactories.Add(factory);
        return factory;
    }

    public DataZone.ProjectMembershipFactory WithProjectMembership(Action<Humidifier.DataZone.ProjectMembership> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.ProjectMembershipFactory(resourceName, resourceFactoryAction));
        ProjectMembershipFactories.Add(factory);
        return factory;
    }

    public DataZone.SubscriptionTargetFactory WithSubscriptionTarget(Action<Humidifier.DataZone.SubscriptionTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.SubscriptionTargetFactory(resourceName, resourceFactoryAction));
        SubscriptionTargetFactories.Add(factory);
        return factory;
    }

    public DataZone.UserProfileFactory WithDataZoneUserProfile(Action<Humidifier.DataZone.UserProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DataZone.UserProfileFactory(resourceName, resourceFactoryAction));
        DataZoneUserProfileFactories.Add(factory);
        return factory;
    }

    public OpsWorks.UserProfileFactory WithOpsWorksUserProfile(Action<Humidifier.OpsWorks.UserProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.UserProfileFactory(resourceName, resourceFactoryAction));
        OpsWorksUserProfileFactories.Add(factory);
        return factory;
    }

    public SageMaker.UserProfileFactory WithSageMakerUserProfile(Action<Humidifier.SageMaker.UserProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.UserProfileFactory(resourceName, resourceFactoryAction));
        SageMakerUserProfileFactories.Add(factory);
        return factory;
    }

    public Deadline.FarmFactory WithFarm(Action<Humidifier.Deadline.Farm> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.FarmFactory(resourceName, resourceFactoryAction));
        FarmFactories.Add(factory);
        return factory;
    }

    public Deadline.LicenseEndpointFactory WithLicenseEndpoint(Action<Humidifier.Deadline.LicenseEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.LicenseEndpointFactory(resourceName, resourceFactoryAction));
        LicenseEndpointFactories.Add(factory);
        return factory;
    }

    public Deadline.MeteredProductFactory WithMeteredProduct(Action<Humidifier.Deadline.MeteredProduct> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.MeteredProductFactory(resourceName, resourceFactoryAction));
        MeteredProductFactories.Add(factory);
        return factory;
    }

    public Deadline.MonitorFactory WithDeadlineMonitor(Action<Humidifier.Deadline.Monitor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.MonitorFactory(resourceName, resourceFactoryAction));
        DeadlineMonitorFactories.Add(factory);
        return factory;
    }

    public InternetMonitor.MonitorFactory WithInternetMonitorMonitor(Action<Humidifier.InternetMonitor.Monitor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new InternetMonitor.MonitorFactory(resourceName, resourceFactoryAction));
        InternetMonitorMonitorFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueEnvironmentFactory WithQueueEnvironment(Action<Humidifier.Deadline.QueueEnvironment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueEnvironmentFactory(resourceName, resourceFactoryAction));
        QueueEnvironmentFactories.Add(factory);
        return factory;
    }

    public Deadline.QueueFleetAssociationFactory WithQueueFleetAssociation(Action<Humidifier.Deadline.QueueFleetAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.QueueFleetAssociationFactory(resourceName, resourceFactoryAction));
        QueueFleetAssociationFactories.Add(factory);
        return factory;
    }

    public Deadline.StorageProfileFactory WithStorageProfile(Action<Humidifier.Deadline.StorageProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Deadline.StorageProfileFactory(resourceName, resourceFactoryAction));
        StorageProfileFactories.Add(factory);
        return factory;
    }

    public Detective.GraphFactory WithDetectiveGraph(Action<Humidifier.Detective.Graph> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.GraphFactory(resourceName, resourceFactoryAction));
        DetectiveGraphFactories.Add(factory);
        return factory;
    }

    public NeptuneGraph.GraphFactory WithNeptuneGraphGraph(Action<Humidifier.NeptuneGraph.Graph> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NeptuneGraph.GraphFactory(resourceName, resourceFactoryAction));
        NeptuneGraphGraphFactories.Add(factory);
        return factory;
    }

    public Detective.MemberInvitationFactory WithMemberInvitation(Action<Humidifier.Detective.MemberInvitation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.MemberInvitationFactory(resourceName, resourceFactoryAction));
        MemberInvitationFactories.Add(factory);
        return factory;
    }

    public Detective.OrganizationAdminFactory WithOrganizationAdmin(Action<Humidifier.Detective.OrganizationAdmin> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Detective.OrganizationAdminFactory(resourceName, resourceFactoryAction));
        OrganizationAdminFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.LogAnomalyDetectionIntegrationFactory WithLogAnomalyDetectionIntegration(Action<Humidifier.DevOpsGuru.LogAnomalyDetectionIntegration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.LogAnomalyDetectionIntegrationFactory(resourceName, resourceFactoryAction));
        LogAnomalyDetectionIntegrationFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.NotificationChannelFactory WithDevOpsGuruNotificationChannel(Action<Humidifier.DevOpsGuru.NotificationChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.NotificationChannelFactory(resourceName, resourceFactoryAction));
        DevOpsGuruNotificationChannelFactories.Add(factory);
        return factory;
    }

    public FMS.NotificationChannelFactory WithFMSNotificationChannel(Action<Humidifier.FMS.NotificationChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.NotificationChannelFactory(resourceName, resourceFactoryAction));
        FMSNotificationChannelFactories.Add(factory);
        return factory;
    }

    public DevOpsGuru.ResourceCollectionFactory WithResourceCollection(Action<Humidifier.DevOpsGuru.ResourceCollection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DevOpsGuru.ResourceCollectionFactory(resourceName, resourceFactoryAction));
        ResourceCollectionFactories.Add(factory);
        return factory;
    }

    public DirectoryService.MicrosoftADFactory WithMicrosoftAD(Action<Humidifier.DirectoryService.MicrosoftAD> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DirectoryService.MicrosoftADFactory(resourceName, resourceFactoryAction));
        MicrosoftADFactories.Add(factory);
        return factory;
    }

    public DirectoryService.SimpleADFactory WithSimpleAD(Action<Humidifier.DirectoryService.SimpleAD> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DirectoryService.SimpleADFactory(resourceName, resourceFactoryAction));
        SimpleADFactories.Add(factory);
        return factory;
    }

    public DocDB.DBClusterFactory WithDocDBDBCluster(Action<Humidifier.DocDB.DBCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBClusterFactory(resourceName, resourceFactoryAction));
        DocDBDBClusterFactories.Add(factory);
        return factory;
    }

    public Neptune.DBClusterFactory WithNeptuneDBCluster(Action<Humidifier.Neptune.DBCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBClusterFactory(resourceName, resourceFactoryAction));
        NeptuneDBClusterFactories.Add(factory);
        return factory;
    }

    public RDS.DBClusterFactory WithRDSDBCluster(Action<Humidifier.RDS.DBCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBClusterFactory(resourceName, resourceFactoryAction));
        RDSDBClusterFactories.Add(factory);
        return factory;
    }

    public DocDB.DBClusterParameterGroupFactory WithDocDBDBClusterParameterGroup(Action<Humidifier.DocDB.DBClusterParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        DocDBDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public Neptune.DBClusterParameterGroupFactory WithNeptuneDBClusterParameterGroup(Action<Humidifier.Neptune.DBClusterParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBClusterParameterGroupFactory WithRDSDBClusterParameterGroup(Action<Humidifier.RDS.DBClusterParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        RDSDBClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public DocDB.DBInstanceFactory WithDocDBDBInstance(Action<Humidifier.DocDB.DBInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBInstanceFactory(resourceName, resourceFactoryAction));
        DocDBDBInstanceFactories.Add(factory);
        return factory;
    }

    public Neptune.DBInstanceFactory WithNeptuneDBInstance(Action<Humidifier.Neptune.DBInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBInstanceFactory(resourceName, resourceFactoryAction));
        NeptuneDBInstanceFactories.Add(factory);
        return factory;
    }

    public RDS.DBInstanceFactory WithRDSDBInstance(Action<Humidifier.RDS.DBInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBInstanceFactory(resourceName, resourceFactoryAction));
        RDSDBInstanceFactories.Add(factory);
        return factory;
    }

    public DocDB.DBSubnetGroupFactory WithDocDBDBSubnetGroup(Action<Humidifier.DocDB.DBSubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DocDB.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        DocDBDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public Neptune.DBSubnetGroupFactory WithNeptuneDBSubnetGroup(Action<Humidifier.Neptune.DBSubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSubnetGroupFactory WithRDSDBSubnetGroup(Action<Humidifier.RDS.DBSubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSubnetGroupFactory(resourceName, resourceFactoryAction));
        RDSDBSubnetGroupFactories.Add(factory);
        return factory;
    }

    public DynamoDB.GlobalTableFactory WithGlobalTable(Action<Humidifier.DynamoDB.GlobalTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new DynamoDB.GlobalTableFactory(resourceName, resourceFactoryAction));
        GlobalTableFactories.Add(factory);
        return factory;
    }

    public EC2.CapacityReservationFleetFactory WithCapacityReservationFleet(Action<Humidifier.EC2.CapacityReservationFleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CapacityReservationFleetFactory(resourceName, resourceFactoryAction));
        CapacityReservationFleetFactories.Add(factory);
        return factory;
    }

    public EC2.CarrierGatewayFactory WithCarrierGateway(Action<Humidifier.EC2.CarrierGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CarrierGatewayFactory(resourceName, resourceFactoryAction));
        CarrierGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnAuthorizationRuleFactory WithClientVpnAuthorizationRule(Action<Humidifier.EC2.ClientVpnAuthorizationRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnAuthorizationRuleFactory(resourceName, resourceFactoryAction));
        ClientVpnAuthorizationRuleFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnEndpointFactory WithClientVpnEndpoint(Action<Humidifier.EC2.ClientVpnEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnEndpointFactory(resourceName, resourceFactoryAction));
        ClientVpnEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnRouteFactory WithClientVpnRoute(Action<Humidifier.EC2.ClientVpnRoute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnRouteFactory(resourceName, resourceFactoryAction));
        ClientVpnRouteFactories.Add(factory);
        return factory;
    }

    public EC2.ClientVpnTargetNetworkAssociationFactory WithClientVpnTargetNetworkAssociation(Action<Humidifier.EC2.ClientVpnTargetNetworkAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.ClientVpnTargetNetworkAssociationFactory(resourceName, resourceFactoryAction));
        ClientVpnTargetNetworkAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.CustomerGatewayFactory WithCustomerGateway(Action<Humidifier.EC2.CustomerGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.CustomerGatewayFactory(resourceName, resourceFactoryAction));
        CustomerGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.DHCPOptionsFactory WithDHCPOptions(Action<Humidifier.EC2.DHCPOptions> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.DHCPOptionsFactory(resourceName, resourceFactoryAction));
        DHCPOptionsFactories.Add(factory);
        return factory;
    }

    public EC2.EC2FleetFactory WithEC2Fleet(Action<Humidifier.EC2.EC2Fleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EC2FleetFactory(resourceName, resourceFactoryAction));
        EC2FleetFactories.Add(factory);
        return factory;
    }

    public EC2.EIPFactory WithEIP(Action<Humidifier.EC2.EIP> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EIPFactory(resourceName, resourceFactoryAction));
        EIPFactories.Add(factory);
        return factory;
    }

    public EC2.EIPAssociationFactory WithEIPAssociation(Action<Humidifier.EC2.EIPAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EIPAssociationFactory(resourceName, resourceFactoryAction));
        EIPAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.EgressOnlyInternetGatewayFactory WithEgressOnlyInternetGateway(Action<Humidifier.EC2.EgressOnlyInternetGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EgressOnlyInternetGatewayFactory(resourceName, resourceFactoryAction));
        EgressOnlyInternetGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.EnclaveCertificateIamRoleAssociationFactory WithEnclaveCertificateIamRoleAssociation(Action<Humidifier.EC2.EnclaveCertificateIamRoleAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.EnclaveCertificateIamRoleAssociationFactory(resourceName, resourceFactoryAction));
        EnclaveCertificateIamRoleAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.FlowLogFactory WithFlowLog(Action<Humidifier.EC2.FlowLog> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.FlowLogFactory(resourceName, resourceFactoryAction));
        FlowLogFactories.Add(factory);
        return factory;
    }

    public EC2.GatewayRouteTableAssociationFactory WithGatewayRouteTableAssociation(Action<Humidifier.EC2.GatewayRouteTableAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.GatewayRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        GatewayRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.HostFactory WithHost(Action<Humidifier.EC2.Host> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.HostFactory(resourceName, resourceFactoryAction));
        HostFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMFactory WithIPAM(Action<Humidifier.EC2.IPAM> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMFactory(resourceName, resourceFactoryAction));
        IPAMFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMAllocationFactory WithIPAMAllocation(Action<Humidifier.EC2.IPAMAllocation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMAllocationFactory(resourceName, resourceFactoryAction));
        IPAMAllocationFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMPoolFactory WithIPAMPool(Action<Humidifier.EC2.IPAMPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMPoolFactory(resourceName, resourceFactoryAction));
        IPAMPoolFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMPoolCidrFactory WithIPAMPoolCidr(Action<Humidifier.EC2.IPAMPoolCidr> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMPoolCidrFactory(resourceName, resourceFactoryAction));
        IPAMPoolCidrFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMResourceDiscoveryFactory WithIPAMResourceDiscovery(Action<Humidifier.EC2.IPAMResourceDiscovery> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMResourceDiscoveryFactory(resourceName, resourceFactoryAction));
        IPAMResourceDiscoveryFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMResourceDiscoveryAssociationFactory WithIPAMResourceDiscoveryAssociation(Action<Humidifier.EC2.IPAMResourceDiscoveryAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMResourceDiscoveryAssociationFactory(resourceName, resourceFactoryAction));
        IPAMResourceDiscoveryAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.IPAMScopeFactory WithIPAMScope(Action<Humidifier.EC2.IPAMScope> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.IPAMScopeFactory(resourceName, resourceFactoryAction));
        IPAMScopeFactories.Add(factory);
        return factory;
    }

    public EC2.InstanceConnectEndpointFactory WithInstanceConnectEndpoint(Action<Humidifier.EC2.InstanceConnectEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InstanceConnectEndpointFactory(resourceName, resourceFactoryAction));
        InstanceConnectEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.InternetGatewayFactory WithInternetGateway(Action<Humidifier.EC2.InternetGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.InternetGatewayFactory(resourceName, resourceFactoryAction));
        InternetGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.KeyPairFactory WithKeyPair(Action<Humidifier.EC2.KeyPair> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.KeyPairFactory(resourceName, resourceFactoryAction));
        KeyPairFactories.Add(factory);
        return factory;
    }

    public EC2.LaunchTemplateFactory WithLaunchTemplate(Action<Humidifier.EC2.LaunchTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LaunchTemplateFactory(resourceName, resourceFactoryAction));
        LaunchTemplateFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteFactory WithLocalGatewayRoute(Action<Humidifier.EC2.LocalGatewayRoute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableFactory WithLocalGatewayRouteTable(Action<Humidifier.EC2.LocalGatewayRouteTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableVPCAssociationFactory WithLocalGatewayRouteTableVPCAssociation(Action<Humidifier.EC2.LocalGatewayRouteTableVPCAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableVPCAssociationFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableVPCAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactory WithLocalGatewayRouteTableVirtualInterfaceGroupAssociation(Action<Humidifier.EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactory(resourceName, resourceFactoryAction));
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.NatGatewayFactory WithNatGateway(Action<Humidifier.EC2.NatGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NatGatewayFactory(resourceName, resourceFactoryAction));
        NatGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkAclFactory WithNetworkAcl(Action<Humidifier.EC2.NetworkAcl> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkAclFactory(resourceName, resourceFactoryAction));
        NetworkAclFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkAclEntryFactory WithNetworkAclEntry(Action<Humidifier.EC2.NetworkAclEntry> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkAclEntryFactory(resourceName, resourceFactoryAction));
        NetworkAclEntryFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAccessScopeFactory WithNetworkInsightsAccessScope(Action<Humidifier.EC2.NetworkInsightsAccessScope> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAccessScopeFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAccessScopeFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAccessScopeAnalysisFactory WithNetworkInsightsAccessScopeAnalysis(Action<Humidifier.EC2.NetworkInsightsAccessScopeAnalysis> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAccessScopeAnalysisFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAccessScopeAnalysisFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsAnalysisFactory WithNetworkInsightsAnalysis(Action<Humidifier.EC2.NetworkInsightsAnalysis> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsAnalysisFactory(resourceName, resourceFactoryAction));
        NetworkInsightsAnalysisFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInsightsPathFactory WithNetworkInsightsPath(Action<Humidifier.EC2.NetworkInsightsPath> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInsightsPathFactory(resourceName, resourceFactoryAction));
        NetworkInsightsPathFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfaceFactory WithNetworkInterface(Action<Humidifier.EC2.NetworkInterface> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfaceFactory(resourceName, resourceFactoryAction));
        NetworkInterfaceFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfaceAttachmentFactory WithNetworkInterfaceAttachment(Action<Humidifier.EC2.NetworkInterfaceAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfaceAttachmentFactory(resourceName, resourceFactoryAction));
        NetworkInterfaceAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkInterfacePermissionFactory WithNetworkInterfacePermission(Action<Humidifier.EC2.NetworkInterfacePermission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkInterfacePermissionFactory(resourceName, resourceFactoryAction));
        NetworkInterfacePermissionFactories.Add(factory);
        return factory;
    }

    public EC2.NetworkPerformanceMetricSubscriptionFactory WithNetworkPerformanceMetricSubscription(Action<Humidifier.EC2.NetworkPerformanceMetricSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.NetworkPerformanceMetricSubscriptionFactory(resourceName, resourceFactoryAction));
        NetworkPerformanceMetricSubscriptionFactories.Add(factory);
        return factory;
    }

    public EC2.PlacementGroupFactory WithPlacementGroup(Action<Humidifier.EC2.PlacementGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.PlacementGroupFactory(resourceName, resourceFactoryAction));
        PlacementGroupFactories.Add(factory);
        return factory;
    }

    public EC2.PrefixListFactory WithPrefixList(Action<Humidifier.EC2.PrefixList> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.PrefixListFactory(resourceName, resourceFactoryAction));
        PrefixListFactories.Add(factory);
        return factory;
    }

    public EC2.RouteTableFactory WithRouteTable(Action<Humidifier.EC2.RouteTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.RouteTableFactory(resourceName, resourceFactoryAction));
        RouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupFactory WithEC2SecurityGroup(Action<Humidifier.EC2.SecurityGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupFactory(resourceName, resourceFactoryAction));
        EC2SecurityGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SecurityGroupFactory WithElastiCacheSecurityGroup(Action<Humidifier.ElastiCache.SecurityGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SecurityGroupFactory(resourceName, resourceFactoryAction));
        ElastiCacheSecurityGroupFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupEgressFactory WithSecurityGroupEgress(Action<Humidifier.EC2.SecurityGroupEgress> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupEgressFactory(resourceName, resourceFactoryAction));
        SecurityGroupEgressFactories.Add(factory);
        return factory;
    }

    public EC2.SecurityGroupIngressFactory WithEC2SecurityGroupIngress(Action<Humidifier.EC2.SecurityGroupIngress> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        EC2SecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public ElastiCache.SecurityGroupIngressFactory WithElastiCacheSecurityGroupIngress(Action<Humidifier.ElastiCache.SecurityGroupIngress> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.SecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        ElastiCacheSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public EC2.SnapshotBlockPublicAccessFactory WithSnapshotBlockPublicAccess(Action<Humidifier.EC2.SnapshotBlockPublicAccess> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SnapshotBlockPublicAccessFactory(resourceName, resourceFactoryAction));
        SnapshotBlockPublicAccessFactories.Add(factory);
        return factory;
    }

    public EC2.SpotFleetFactory WithSpotFleet(Action<Humidifier.EC2.SpotFleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SpotFleetFactory(resourceName, resourceFactoryAction));
        SpotFleetFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetFactory WithSubnet(Action<Humidifier.EC2.Subnet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetFactory(resourceName, resourceFactoryAction));
        SubnetFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetCidrBlockFactory WithSubnetCidrBlock(Action<Humidifier.EC2.SubnetCidrBlock> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetCidrBlockFactory(resourceName, resourceFactoryAction));
        SubnetCidrBlockFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetNetworkAclAssociationFactory WithSubnetNetworkAclAssociation(Action<Humidifier.EC2.SubnetNetworkAclAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetNetworkAclAssociationFactory(resourceName, resourceFactoryAction));
        SubnetNetworkAclAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.SubnetRouteTableAssociationFactory WithSubnetRouteTableAssociation(Action<Humidifier.EC2.SubnetRouteTableAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.SubnetRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        SubnetRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorFilterFactory WithTrafficMirrorFilter(Action<Humidifier.EC2.TrafficMirrorFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorFilterFactory(resourceName, resourceFactoryAction));
        TrafficMirrorFilterFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorFilterRuleFactory WithTrafficMirrorFilterRule(Action<Humidifier.EC2.TrafficMirrorFilterRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorFilterRuleFactory(resourceName, resourceFactoryAction));
        TrafficMirrorFilterRuleFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorSessionFactory WithTrafficMirrorSession(Action<Humidifier.EC2.TrafficMirrorSession> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorSessionFactory(resourceName, resourceFactoryAction));
        TrafficMirrorSessionFactories.Add(factory);
        return factory;
    }

    public EC2.TrafficMirrorTargetFactory WithTrafficMirrorTarget(Action<Humidifier.EC2.TrafficMirrorTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TrafficMirrorTargetFactory(resourceName, resourceFactoryAction));
        TrafficMirrorTargetFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayFactory WithTransitGateway(Action<Humidifier.EC2.TransitGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayFactory(resourceName, resourceFactoryAction));
        TransitGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayAttachmentFactory WithTransitGatewayAttachment(Action<Humidifier.EC2.TransitGatewayAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayConnectFactory WithTransitGatewayConnect(Action<Humidifier.EC2.TransitGatewayConnect> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayConnectFactory(resourceName, resourceFactoryAction));
        TransitGatewayConnectFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastDomainFactory WithTransitGatewayMulticastDomain(Action<Humidifier.EC2.TransitGatewayMulticastDomain> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastDomainFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastDomainFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastDomainAssociationFactory WithTransitGatewayMulticastDomainAssociation(Action<Humidifier.EC2.TransitGatewayMulticastDomainAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastDomainAssociationFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastDomainAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastGroupMemberFactory WithTransitGatewayMulticastGroupMember(Action<Humidifier.EC2.TransitGatewayMulticastGroupMember> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastGroupMemberFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastGroupMemberFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayMulticastGroupSourceFactory WithTransitGatewayMulticastGroupSource(Action<Humidifier.EC2.TransitGatewayMulticastGroupSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayMulticastGroupSourceFactory(resourceName, resourceFactoryAction));
        TransitGatewayMulticastGroupSourceFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayPeeringAttachmentFactory WithTransitGatewayPeeringAttachment(Action<Humidifier.EC2.TransitGatewayPeeringAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayPeeringAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayPeeringAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteFactory WithTransitGatewayRoute(Action<Humidifier.EC2.TransitGatewayRoute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTableFactory WithTransitGatewayRouteTable(Action<Humidifier.EC2.TransitGatewayRouteTable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTableFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTableAssociationFactory WithTransitGatewayRouteTableAssociation(Action<Humidifier.EC2.TransitGatewayRouteTableAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTableAssociationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayRouteTablePropagationFactory WithTransitGatewayRouteTablePropagation(Action<Humidifier.EC2.TransitGatewayRouteTablePropagation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayRouteTablePropagationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTablePropagationFactories.Add(factory);
        return factory;
    }

    public EC2.TransitGatewayVpcAttachmentFactory WithTransitGatewayVpcAttachment(Action<Humidifier.EC2.TransitGatewayVpcAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.TransitGatewayVpcAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayVpcAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.VPCFactory WithVPC(Action<Humidifier.EC2.VPC> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCFactory(resourceName, resourceFactoryAction));
        VPCFactories.Add(factory);
        return factory;
    }

    public EC2.VPCCidrBlockFactory WithVPCCidrBlock(Action<Humidifier.EC2.VPCCidrBlock> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCCidrBlockFactory(resourceName, resourceFactoryAction));
        VPCCidrBlockFactories.Add(factory);
        return factory;
    }

    public EC2.VPCDHCPOptionsAssociationFactory WithVPCDHCPOptionsAssociation(Action<Humidifier.EC2.VPCDHCPOptionsAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCDHCPOptionsAssociationFactory(resourceName, resourceFactoryAction));
        VPCDHCPOptionsAssociationFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointFactory WithVPCEndpoint(Action<Humidifier.EC2.VPCEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointFactory(resourceName, resourceFactoryAction));
        VPCEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointConnectionNotificationFactory WithVPCEndpointConnectionNotification(Action<Humidifier.EC2.VPCEndpointConnectionNotification> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointConnectionNotificationFactory(resourceName, resourceFactoryAction));
        VPCEndpointConnectionNotificationFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointServiceFactory WithVPCEndpointService(Action<Humidifier.EC2.VPCEndpointService> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointServiceFactory(resourceName, resourceFactoryAction));
        VPCEndpointServiceFactories.Add(factory);
        return factory;
    }

    public EC2.VPCEndpointServicePermissionsFactory WithVPCEndpointServicePermissions(Action<Humidifier.EC2.VPCEndpointServicePermissions> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCEndpointServicePermissionsFactory(resourceName, resourceFactoryAction));
        VPCEndpointServicePermissionsFactories.Add(factory);
        return factory;
    }

    public EC2.VPCGatewayAttachmentFactory WithVPCGatewayAttachment(Action<Humidifier.EC2.VPCGatewayAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCGatewayAttachmentFactory(resourceName, resourceFactoryAction));
        VPCGatewayAttachmentFactories.Add(factory);
        return factory;
    }

    public EC2.VPCPeeringConnectionFactory WithVPCPeeringConnection(Action<Humidifier.EC2.VPCPeeringConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPCPeeringConnectionFactory(resourceName, resourceFactoryAction));
        VPCPeeringConnectionFactories.Add(factory);
        return factory;
    }

    public EC2.VPNConnectionFactory WithVPNConnection(Action<Humidifier.EC2.VPNConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNConnectionFactory(resourceName, resourceFactoryAction));
        VPNConnectionFactories.Add(factory);
        return factory;
    }

    public EC2.VPNConnectionRouteFactory WithVPNConnectionRoute(Action<Humidifier.EC2.VPNConnectionRoute> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNConnectionRouteFactory(resourceName, resourceFactoryAction));
        VPNConnectionRouteFactories.Add(factory);
        return factory;
    }

    public EC2.VPNGatewayFactory WithVPNGateway(Action<Humidifier.EC2.VPNGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNGatewayFactory(resourceName, resourceFactoryAction));
        VPNGatewayFactories.Add(factory);
        return factory;
    }

    public EC2.VPNGatewayRoutePropagationFactory WithVPNGatewayRoutePropagation(Action<Humidifier.EC2.VPNGatewayRoutePropagation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VPNGatewayRoutePropagationFactory(resourceName, resourceFactoryAction));
        VPNGatewayRoutePropagationFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessEndpointFactory WithVerifiedAccessEndpoint(Action<Humidifier.EC2.VerifiedAccessEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessEndpointFactory(resourceName, resourceFactoryAction));
        VerifiedAccessEndpointFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessGroupFactory WithVerifiedAccessGroup(Action<Humidifier.EC2.VerifiedAccessGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessGroupFactory(resourceName, resourceFactoryAction));
        VerifiedAccessGroupFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessInstanceFactory WithVerifiedAccessInstance(Action<Humidifier.EC2.VerifiedAccessInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessInstanceFactory(resourceName, resourceFactoryAction));
        VerifiedAccessInstanceFactories.Add(factory);
        return factory;
    }

    public EC2.VerifiedAccessTrustProviderFactory WithVerifiedAccessTrustProvider(Action<Humidifier.EC2.VerifiedAccessTrustProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VerifiedAccessTrustProviderFactory(resourceName, resourceFactoryAction));
        VerifiedAccessTrustProviderFactories.Add(factory);
        return factory;
    }

    public EC2.VolumeFactory WithEC2Volume(Action<Humidifier.EC2.Volume> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VolumeFactory(resourceName, resourceFactoryAction));
        EC2VolumeFactories.Add(factory);
        return factory;
    }

    public FSx.VolumeFactory WithFSxVolume(Action<Humidifier.FSx.Volume> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.VolumeFactory(resourceName, resourceFactoryAction));
        FSxVolumeFactories.Add(factory);
        return factory;
    }

    public OpsWorks.VolumeFactory WithOpsWorksVolume(Action<Humidifier.OpsWorks.Volume> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.VolumeFactory(resourceName, resourceFactoryAction));
        OpsWorksVolumeFactories.Add(factory);
        return factory;
    }

    public EC2.VolumeAttachmentFactory WithVolumeAttachment(Action<Humidifier.EC2.VolumeAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EC2.VolumeAttachmentFactory(resourceName, resourceFactoryAction));
        VolumeAttachmentFactories.Add(factory);
        return factory;
    }

    public ECR.PublicRepositoryFactory WithPublicRepository(Action<Humidifier.ECR.PublicRepository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.PublicRepositoryFactory(resourceName, resourceFactoryAction));
        PublicRepositoryFactories.Add(factory);
        return factory;
    }

    public ECR.PullThroughCacheRuleFactory WithPullThroughCacheRule(Action<Humidifier.ECR.PullThroughCacheRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.PullThroughCacheRuleFactory(resourceName, resourceFactoryAction));
        PullThroughCacheRuleFactories.Add(factory);
        return factory;
    }

    public ECR.RegistryPolicyFactory WithECRRegistryPolicy(Action<Humidifier.ECR.RegistryPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RegistryPolicyFactory(resourceName, resourceFactoryAction));
        ECRRegistryPolicyFactories.Add(factory);
        return factory;
    }

    public EventSchemas.RegistryPolicyFactory WithEventSchemasRegistryPolicy(Action<Humidifier.EventSchemas.RegistryPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.RegistryPolicyFactory(resourceName, resourceFactoryAction));
        EventSchemasRegistryPolicyFactories.Add(factory);
        return factory;
    }

    public ECR.ReplicationConfigurationFactory WithReplicationConfiguration(Action<Humidifier.ECR.ReplicationConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.ReplicationConfigurationFactory(resourceName, resourceFactoryAction));
        ReplicationConfigurationFactories.Add(factory);
        return factory;
    }

    public ECR.RepositoryCreationTemplateFactory WithRepositoryCreationTemplate(Action<Humidifier.ECR.RepositoryCreationTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECR.RepositoryCreationTemplateFactory(resourceName, resourceFactoryAction));
        RepositoryCreationTemplateFactories.Add(factory);
        return factory;
    }

    public ECS.CapacityProviderFactory WithCapacityProvider(Action<Humidifier.ECS.CapacityProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.CapacityProviderFactory(resourceName, resourceFactoryAction));
        CapacityProviderFactories.Add(factory);
        return factory;
    }

    public ECS.ClusterCapacityProviderAssociationsFactory WithClusterCapacityProviderAssociations(Action<Humidifier.ECS.ClusterCapacityProviderAssociations> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.ClusterCapacityProviderAssociationsFactory(resourceName, resourceFactoryAction));
        ClusterCapacityProviderAssociationsFactories.Add(factory);
        return factory;
    }

    public ECS.PrimaryTaskSetFactory WithPrimaryTaskSet(Action<Humidifier.ECS.PrimaryTaskSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.PrimaryTaskSetFactory(resourceName, resourceFactoryAction));
        PrimaryTaskSetFactories.Add(factory);
        return factory;
    }

    public ECS.TaskDefinitionFactory WithECSTaskDefinition(Action<Humidifier.ECS.TaskDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.TaskDefinitionFactory(resourceName, resourceFactoryAction));
        ECSTaskDefinitionFactories.Add(factory);
        return factory;
    }

    public IoTWireless.TaskDefinitionFactory WithIoTWirelessTaskDefinition(Action<Humidifier.IoTWireless.TaskDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.TaskDefinitionFactory(resourceName, resourceFactoryAction));
        IoTWirelessTaskDefinitionFactories.Add(factory);
        return factory;
    }

    public ECS.TaskSetFactory WithTaskSet(Action<Humidifier.ECS.TaskSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ECS.TaskSetFactory(resourceName, resourceFactoryAction));
        TaskSetFactories.Add(factory);
        return factory;
    }

    public EFS.AccessPointFactory WithEFSAccessPoint(Action<Humidifier.EFS.AccessPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.AccessPointFactory(resourceName, resourceFactoryAction));
        EFSAccessPointFactories.Add(factory);
        return factory;
    }

    public S3.AccessPointFactory WithS3AccessPoint(Action<Humidifier.S3.AccessPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessPointFactory(resourceName, resourceFactoryAction));
        S3AccessPointFactories.Add(factory);
        return factory;
    }

    public S3ObjectLambda.AccessPointFactory WithS3ObjectLambdaAccessPoint(Action<Humidifier.S3ObjectLambda.AccessPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3ObjectLambda.AccessPointFactory(resourceName, resourceFactoryAction));
        S3ObjectLambdaAccessPointFactories.Add(factory);
        return factory;
    }

    public S3Outposts.AccessPointFactory WithS3OutpostsAccessPoint(Action<Humidifier.S3Outposts.AccessPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.AccessPointFactory(resourceName, resourceFactoryAction));
        S3OutpostsAccessPointFactories.Add(factory);
        return factory;
    }

    public EFS.FileSystemFactory WithEFSFileSystem(Action<Humidifier.EFS.FileSystem> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.FileSystemFactory(resourceName, resourceFactoryAction));
        EFSFileSystemFactories.Add(factory);
        return factory;
    }

    public FSx.FileSystemFactory WithFSxFileSystem(Action<Humidifier.FSx.FileSystem> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.FileSystemFactory(resourceName, resourceFactoryAction));
        FSxFileSystemFactories.Add(factory);
        return factory;
    }

    public EFS.MountTargetFactory WithMountTarget(Action<Humidifier.EFS.MountTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EFS.MountTargetFactory(resourceName, resourceFactoryAction));
        MountTargetFactories.Add(factory);
        return factory;
    }

    public EKS.AccessEntryFactory WithAccessEntry(Action<Humidifier.EKS.AccessEntry> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.AccessEntryFactory(resourceName, resourceFactoryAction));
        AccessEntryFactories.Add(factory);
        return factory;
    }

    public EKS.AddonFactory WithAddon(Action<Humidifier.EKS.Addon> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.AddonFactory(resourceName, resourceFactoryAction));
        AddonFactories.Add(factory);
        return factory;
    }

    public EKS.FargateProfileFactory WithFargateProfile(Action<Humidifier.EKS.FargateProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.FargateProfileFactory(resourceName, resourceFactoryAction));
        FargateProfileFactories.Add(factory);
        return factory;
    }

    public EKS.IdentityProviderConfigFactory WithIdentityProviderConfig(Action<Humidifier.EKS.IdentityProviderConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.IdentityProviderConfigFactory(resourceName, resourceFactoryAction));
        IdentityProviderConfigFactories.Add(factory);
        return factory;
    }

    public EKS.NodegroupFactory WithNodegroup(Action<Humidifier.EKS.Nodegroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.NodegroupFactory(resourceName, resourceFactoryAction));
        NodegroupFactories.Add(factory);
        return factory;
    }

    public EKS.PodIdentityAssociationFactory WithPodIdentityAssociation(Action<Humidifier.EKS.PodIdentityAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EKS.PodIdentityAssociationFactory(resourceName, resourceFactoryAction));
        PodIdentityAssociationFactories.Add(factory);
        return factory;
    }

    public EMR.InstanceFleetConfigFactory WithInstanceFleetConfig(Action<Humidifier.EMR.InstanceFleetConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.InstanceFleetConfigFactory(resourceName, resourceFactoryAction));
        InstanceFleetConfigFactories.Add(factory);
        return factory;
    }

    public EMR.InstanceGroupConfigFactory WithInstanceGroupConfig(Action<Humidifier.EMR.InstanceGroupConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.InstanceGroupConfigFactory(resourceName, resourceFactoryAction));
        InstanceGroupConfigFactories.Add(factory);
        return factory;
    }

    public EMR.SecurityConfigurationFactory WithEMRSecurityConfiguration(Action<Humidifier.EMR.SecurityConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.SecurityConfigurationFactory(resourceName, resourceFactoryAction));
        EMRSecurityConfigurationFactories.Add(factory);
        return factory;
    }

    public Glue.SecurityConfigurationFactory WithGlueSecurityConfiguration(Action<Humidifier.Glue.SecurityConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SecurityConfigurationFactory(resourceName, resourceFactoryAction));
        GlueSecurityConfigurationFactories.Add(factory);
        return factory;
    }

    public EMR.StepFactory WithStep(Action<Humidifier.EMR.Step> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StepFactory(resourceName, resourceFactoryAction));
        StepFactories.Add(factory);
        return factory;
    }

    public EMR.StudioFactory WithEMRStudio(Action<Humidifier.EMR.Studio> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StudioFactory(resourceName, resourceFactoryAction));
        EMRStudioFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StudioFactory WithNimbleStudioStudio(Action<Humidifier.NimbleStudio.Studio> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StudioFactory(resourceName, resourceFactoryAction));
        NimbleStudioStudioFactories.Add(factory);
        return factory;
    }

    public EMR.StudioSessionMappingFactory WithStudioSessionMapping(Action<Humidifier.EMR.StudioSessionMapping> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.StudioSessionMappingFactory(resourceName, resourceFactoryAction));
        StudioSessionMappingFactories.Add(factory);
        return factory;
    }

    public EMR.WALWorkspaceFactory WithWALWorkspace(Action<Humidifier.EMR.WALWorkspace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMR.WALWorkspaceFactory(resourceName, resourceFactoryAction));
        WALWorkspaceFactories.Add(factory);
        return factory;
    }

    public EMRContainers.VirtualClusterFactory WithVirtualCluster(Action<Humidifier.EMRContainers.VirtualCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EMRContainers.VirtualClusterFactory(resourceName, resourceFactoryAction));
        VirtualClusterFactories.Add(factory);
        return factory;
    }

    public ElastiCache.CacheClusterFactory WithCacheCluster(Action<Humidifier.ElastiCache.CacheCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.CacheClusterFactory(resourceName, resourceFactoryAction));
        CacheClusterFactories.Add(factory);
        return factory;
    }

    public ElastiCache.GlobalReplicationGroupFactory WithGlobalReplicationGroup(Action<Humidifier.ElastiCache.GlobalReplicationGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.GlobalReplicationGroupFactory(resourceName, resourceFactoryAction));
        GlobalReplicationGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ReplicationGroupFactory WithReplicationGroup(Action<Humidifier.ElastiCache.ReplicationGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ReplicationGroupFactory(resourceName, resourceFactoryAction));
        ReplicationGroupFactories.Add(factory);
        return factory;
    }

    public ElastiCache.ServerlessCacheFactory WithServerlessCache(Action<Humidifier.ElastiCache.ServerlessCache> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.ServerlessCacheFactory(resourceName, resourceFactoryAction));
        ServerlessCacheFactories.Add(factory);
        return factory;
    }

    public ElastiCache.UserGroupFactory WithUserGroup(Action<Humidifier.ElastiCache.UserGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElastiCache.UserGroupFactory(resourceName, resourceFactoryAction));
        UserGroupFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ApplicationVersionFactory WithApplicationVersion(Action<Humidifier.ElasticBeanstalk.ApplicationVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ApplicationVersionFactory(resourceName, resourceFactoryAction));
        ApplicationVersionFactories.Add(factory);
        return factory;
    }

    public ElasticBeanstalk.ConfigurationTemplateFactory WithConfigurationTemplate(Action<Humidifier.ElasticBeanstalk.ConfigurationTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticBeanstalk.ConfigurationTemplateFactory(resourceName, resourceFactoryAction));
        ConfigurationTemplateFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancing.LoadBalancerFactory WithElasticLoadBalancingLoadBalancer(Action<Humidifier.ElasticLoadBalancing.LoadBalancer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancing.LoadBalancerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingLoadBalancerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.LoadBalancerFactory WithElasticLoadBalancingV2LoadBalancer(Action<Humidifier.ElasticLoadBalancingV2.LoadBalancer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.LoadBalancerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2LoadBalancerFactories.Add(factory);
        return factory;
    }

    public Lightsail.LoadBalancerFactory WithLightsailLoadBalancer(Action<Humidifier.Lightsail.LoadBalancer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.LoadBalancerFactory(resourceName, resourceFactoryAction));
        LightsailLoadBalancerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerFactory WithElasticLoadBalancingV2Listener(Action<Humidifier.ElasticLoadBalancingV2.Listener> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2ListenerFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.ListenerFactory WithGlobalAcceleratorListener(Action<Humidifier.GlobalAccelerator.Listener> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.ListenerFactory(resourceName, resourceFactoryAction));
        GlobalAcceleratorListenerFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ListenerFactory WithVpcLatticeListener(Action<Humidifier.VpcLattice.Listener> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ListenerFactory(resourceName, resourceFactoryAction));
        VpcLatticeListenerFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerCertificateFactory WithListenerCertificate(Action<Humidifier.ElasticLoadBalancingV2.ListenerCertificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerCertificateFactory(resourceName, resourceFactoryAction));
        ListenerCertificateFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.ListenerRuleFactory WithListenerRule(Action<Humidifier.ElasticLoadBalancingV2.ListenerRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.ListenerRuleFactory(resourceName, resourceFactoryAction));
        ListenerRuleFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TargetGroupFactory WithElasticLoadBalancingV2TargetGroup(Action<Humidifier.ElasticLoadBalancingV2.TargetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TargetGroupFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2TargetGroupFactories.Add(factory);
        return factory;
    }

    public VpcLattice.TargetGroupFactory WithVpcLatticeTargetGroup(Action<Humidifier.VpcLattice.TargetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.TargetGroupFactory(resourceName, resourceFactoryAction));
        VpcLatticeTargetGroupFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TrustStoreFactory WithElasticLoadBalancingV2TrustStore(Action<Humidifier.ElasticLoadBalancingV2.TrustStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TrustStoreFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancingV2TrustStoreFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.TrustStoreFactory WithWorkSpacesWebTrustStore(Action<Humidifier.WorkSpacesWeb.TrustStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.TrustStoreFactory(resourceName, resourceFactoryAction));
        WorkSpacesWebTrustStoreFactories.Add(factory);
        return factory;
    }

    public ElasticLoadBalancingV2.TrustStoreRevocationFactory WithTrustStoreRevocation(Action<Humidifier.ElasticLoadBalancingV2.TrustStoreRevocation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ElasticLoadBalancingV2.TrustStoreRevocationFactory(resourceName, resourceFactoryAction));
        TrustStoreRevocationFactories.Add(factory);
        return factory;
    }

    public EntityResolution.IdMappingWorkflowFactory WithIdMappingWorkflow(Action<Humidifier.EntityResolution.IdMappingWorkflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.IdMappingWorkflowFactory(resourceName, resourceFactoryAction));
        IdMappingWorkflowFactories.Add(factory);
        return factory;
    }

    public EntityResolution.IdNamespaceFactory WithIdNamespace(Action<Humidifier.EntityResolution.IdNamespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.IdNamespaceFactory(resourceName, resourceFactoryAction));
        IdNamespaceFactories.Add(factory);
        return factory;
    }

    public EntityResolution.MatchingWorkflowFactory WithMatchingWorkflow(Action<Humidifier.EntityResolution.MatchingWorkflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.MatchingWorkflowFactory(resourceName, resourceFactoryAction));
        MatchingWorkflowFactories.Add(factory);
        return factory;
    }

    public EntityResolution.PolicyStatementFactory WithPolicyStatement(Action<Humidifier.EntityResolution.PolicyStatement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.PolicyStatementFactory(resourceName, resourceFactoryAction));
        PolicyStatementFactories.Add(factory);
        return factory;
    }

    public EntityResolution.SchemaMappingFactory WithSchemaMapping(Action<Humidifier.EntityResolution.SchemaMapping> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EntityResolution.SchemaMappingFactory(resourceName, resourceFactoryAction));
        SchemaMappingFactories.Add(factory);
        return factory;
    }

    public EventSchemas.DiscovererFactory WithDiscoverer(Action<Humidifier.EventSchemas.Discoverer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.DiscovererFactory(resourceName, resourceFactoryAction));
        DiscovererFactories.Add(factory);
        return factory;
    }

    public EventSchemas.RegistryFactory WithEventSchemasRegistry(Action<Humidifier.EventSchemas.Registry> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.RegistryFactory(resourceName, resourceFactoryAction));
        EventSchemasRegistryFactories.Add(factory);
        return factory;
    }

    public Glue.RegistryFactory WithGlueRegistry(Action<Humidifier.Glue.Registry> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.RegistryFactory(resourceName, resourceFactoryAction));
        GlueRegistryFactories.Add(factory);
        return factory;
    }

    public EventSchemas.SchemaFactory WithEventSchemasSchema(Action<Humidifier.EventSchemas.Schema> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new EventSchemas.SchemaFactory(resourceName, resourceFactoryAction));
        EventSchemasSchemaFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaFactory WithGlueSchema(Action<Humidifier.Glue.Schema> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaFactory(resourceName, resourceFactoryAction));
        GlueSchemaFactories.Add(factory);
        return factory;
    }

    public Personalize.SchemaFactory WithPersonalizeSchema(Action<Humidifier.Personalize.Schema> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.SchemaFactory(resourceName, resourceFactoryAction));
        PersonalizeSchemaFactories.Add(factory);
        return factory;
    }

    public Events.ApiDestinationFactory WithApiDestination(Action<Humidifier.Events.ApiDestination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ApiDestinationFactory(resourceName, resourceFactoryAction));
        ApiDestinationFactories.Add(factory);
        return factory;
    }

    public Events.ArchiveFactory WithArchive(Action<Humidifier.Events.Archive> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.ArchiveFactory(resourceName, resourceFactoryAction));
        ArchiveFactories.Add(factory);
        return factory;
    }

    public Events.EventBusFactory WithEventBus(Action<Humidifier.Events.EventBus> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EventBusFactory(resourceName, resourceFactoryAction));
        EventBusFactories.Add(factory);
        return factory;
    }

    public Events.EventBusPolicyFactory WithEventBusPolicy(Action<Humidifier.Events.EventBusPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Events.EventBusPolicyFactory(resourceName, resourceFactoryAction));
        EventBusPolicyFactories.Add(factory);
        return factory;
    }

    public Evidently.ExperimentFactory WithExperiment(Action<Humidifier.Evidently.Experiment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.ExperimentFactory(resourceName, resourceFactoryAction));
        ExperimentFactories.Add(factory);
        return factory;
    }

    public Evidently.FeatureFactory WithFeature(Action<Humidifier.Evidently.Feature> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.FeatureFactory(resourceName, resourceFactoryAction));
        FeatureFactories.Add(factory);
        return factory;
    }

    public Evidently.LaunchFactory WithLaunch(Action<Humidifier.Evidently.Launch> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.LaunchFactory(resourceName, resourceFactoryAction));
        LaunchFactories.Add(factory);
        return factory;
    }

    public Evidently.SegmentFactory WithEvidentlySegment(Action<Humidifier.Evidently.Segment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Evidently.SegmentFactory(resourceName, resourceFactoryAction));
        EvidentlySegmentFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SegmentFactory WithPinpointSegment(Action<Humidifier.Pinpoint.Segment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SegmentFactory(resourceName, resourceFactoryAction));
        PinpointSegmentFactories.Add(factory);
        return factory;
    }

    public FIS.ExperimentTemplateFactory WithExperimentTemplate(Action<Humidifier.FIS.ExperimentTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FIS.ExperimentTemplateFactory(resourceName, resourceFactoryAction));
        ExperimentTemplateFactories.Add(factory);
        return factory;
    }

    public FIS.TargetAccountConfigurationFactory WithTargetAccountConfiguration(Action<Humidifier.FIS.TargetAccountConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FIS.TargetAccountConfigurationFactory(resourceName, resourceFactoryAction));
        TargetAccountConfigurationFactories.Add(factory);
        return factory;
    }

    public FMS.PolicyFactory WithFMSPolicy(Action<Humidifier.FMS.Policy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.PolicyFactory(resourceName, resourceFactoryAction));
        FMSPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.PolicyFactory WithIAMPolicy(Action<Humidifier.IAM.Policy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.PolicyFactory(resourceName, resourceFactoryAction));
        IAMPolicyFactories.Add(factory);
        return factory;
    }

    public IoT.PolicyFactory WithIoTPolicy(Action<Humidifier.IoT.Policy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.PolicyFactory(resourceName, resourceFactoryAction));
        IoTPolicyFactories.Add(factory);
        return factory;
    }

    public Organizations.PolicyFactory WithOrganizationsPolicy(Action<Humidifier.Organizations.Policy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.PolicyFactory(resourceName, resourceFactoryAction));
        OrganizationsPolicyFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyFactory WithVerifiedPermissionsPolicy(Action<Humidifier.VerifiedPermissions.Policy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyFactory(resourceName, resourceFactoryAction));
        VerifiedPermissionsPolicyFactories.Add(factory);
        return factory;
    }

    public FMS.ResourceSetFactory WithFMSResourceSet(Action<Humidifier.FMS.ResourceSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FMS.ResourceSetFactory(resourceName, resourceFactoryAction));
        FMSResourceSetFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.ResourceSetFactory WithRoute53RecoveryReadinessResourceSet(Action<Humidifier.Route53RecoveryReadiness.ResourceSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.ResourceSetFactory(resourceName, resourceFactoryAction));
        Route53RecoveryReadinessResourceSetFactories.Add(factory);
        return factory;
    }

    public FSx.DataRepositoryAssociationFactory WithDataRepositoryAssociation(Action<Humidifier.FSx.DataRepositoryAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.DataRepositoryAssociationFactory(resourceName, resourceFactoryAction));
        DataRepositoryAssociationFactories.Add(factory);
        return factory;
    }

    public FSx.SnapshotFactory WithSnapshot(Action<Humidifier.FSx.Snapshot> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.SnapshotFactory(resourceName, resourceFactoryAction));
        SnapshotFactories.Add(factory);
        return factory;
    }

    public FSx.StorageVirtualMachineFactory WithStorageVirtualMachine(Action<Humidifier.FSx.StorageVirtualMachine> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FSx.StorageVirtualMachineFactory(resourceName, resourceFactoryAction));
        StorageVirtualMachineFactories.Add(factory);
        return factory;
    }

    public Forecast.DatasetGroupFactory WithForecastDatasetGroup(Action<Humidifier.Forecast.DatasetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Forecast.DatasetGroupFactory(resourceName, resourceFactoryAction));
        ForecastDatasetGroupFactories.Add(factory);
        return factory;
    }

    public Personalize.DatasetGroupFactory WithPersonalizeDatasetGroup(Action<Humidifier.Personalize.DatasetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.DatasetGroupFactory(resourceName, resourceFactoryAction));
        PersonalizeDatasetGroupFactories.Add(factory);
        return factory;
    }

    public FraudDetector.DetectorFactory WithFraudDetectorDetector(Action<Humidifier.FraudDetector.Detector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.DetectorFactory(resourceName, resourceFactoryAction));
        FraudDetectorDetectorFactories.Add(factory);
        return factory;
    }

    public GuardDuty.DetectorFactory WithGuardDutyDetector(Action<Humidifier.GuardDuty.Detector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.DetectorFactory(resourceName, resourceFactoryAction));
        GuardDutyDetectorFactories.Add(factory);
        return factory;
    }

    public FraudDetector.EntityTypeFactory WithEntityType(Action<Humidifier.FraudDetector.EntityType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.EntityTypeFactory(resourceName, resourceFactoryAction));
        EntityTypeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.EventTypeFactory WithEventType(Action<Humidifier.FraudDetector.EventType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.EventTypeFactory(resourceName, resourceFactoryAction));
        EventTypeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.LabelFactory WithLabel(Action<Humidifier.FraudDetector.Label> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.LabelFactory(resourceName, resourceFactoryAction));
        LabelFactories.Add(factory);
        return factory;
    }

    public FraudDetector.ListFactory WithList(Action<Humidifier.FraudDetector.List> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.ListFactory(resourceName, resourceFactoryAction));
        ListFactories.Add(factory);
        return factory;
    }

    public FraudDetector.OutcomeFactory WithOutcome(Action<Humidifier.FraudDetector.Outcome> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.OutcomeFactory(resourceName, resourceFactoryAction));
        OutcomeFactories.Add(factory);
        return factory;
    }

    public FraudDetector.VariableFactory WithVariable(Action<Humidifier.FraudDetector.Variable> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new FraudDetector.VariableFactory(resourceName, resourceFactoryAction));
        VariableFactories.Add(factory);
        return factory;
    }

    public GameLift.AliasFactory WithGameLiftAlias(Action<Humidifier.GameLift.Alias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.AliasFactory(resourceName, resourceFactoryAction));
        GameLiftAliasFactories.Add(factory);
        return factory;
    }

    public KMS.AliasFactory WithKMSAlias(Action<Humidifier.KMS.Alias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.AliasFactory(resourceName, resourceFactoryAction));
        KMSAliasFactories.Add(factory);
        return factory;
    }

    public Lambda.AliasFactory WithLambdaAlias(Action<Humidifier.Lambda.Alias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.AliasFactory(resourceName, resourceFactoryAction));
        LambdaAliasFactories.Add(factory);
        return factory;
    }

    public PaymentCryptography.AliasFactory WithPaymentCryptographyAlias(Action<Humidifier.PaymentCryptography.Alias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PaymentCryptography.AliasFactory(resourceName, resourceFactoryAction));
        PaymentCryptographyAliasFactories.Add(factory);
        return factory;
    }

    public GameLift.BuildFactory WithBuild(Action<Humidifier.GameLift.Build> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.BuildFactory(resourceName, resourceFactoryAction));
        BuildFactories.Add(factory);
        return factory;
    }

    public GameLift.ContainerGroupDefinitionFactory WithContainerGroupDefinition(Action<Humidifier.GameLift.ContainerGroupDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.ContainerGroupDefinitionFactory(resourceName, resourceFactoryAction));
        ContainerGroupDefinitionFactories.Add(factory);
        return factory;
    }

    public GameLift.GameServerGroupFactory WithGameServerGroup(Action<Humidifier.GameLift.GameServerGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.GameServerGroupFactory(resourceName, resourceFactoryAction));
        GameServerGroupFactories.Add(factory);
        return factory;
    }

    public GameLift.GameSessionQueueFactory WithGameSessionQueue(Action<Humidifier.GameLift.GameSessionQueue> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.GameSessionQueueFactory(resourceName, resourceFactoryAction));
        GameSessionQueueFactories.Add(factory);
        return factory;
    }

    public GameLift.LocationFactory WithLocation(Action<Humidifier.GameLift.Location> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.LocationFactory(resourceName, resourceFactoryAction));
        LocationFactories.Add(factory);
        return factory;
    }

    public GameLift.MatchmakingConfigurationFactory WithMatchmakingConfiguration(Action<Humidifier.GameLift.MatchmakingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.MatchmakingConfigurationFactory(resourceName, resourceFactoryAction));
        MatchmakingConfigurationFactories.Add(factory);
        return factory;
    }

    public GameLift.MatchmakingRuleSetFactory WithMatchmakingRuleSet(Action<Humidifier.GameLift.MatchmakingRuleSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.MatchmakingRuleSetFactory(resourceName, resourceFactoryAction));
        MatchmakingRuleSetFactories.Add(factory);
        return factory;
    }

    public GameLift.ScriptFactory WithScript(Action<Humidifier.GameLift.Script> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GameLift.ScriptFactory(resourceName, resourceFactoryAction));
        ScriptFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.AcceleratorFactory WithAccelerator(Action<Humidifier.GlobalAccelerator.Accelerator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.AcceleratorFactory(resourceName, resourceFactoryAction));
        AcceleratorFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.CrossAccountAttachmentFactory WithCrossAccountAttachment(Action<Humidifier.GlobalAccelerator.CrossAccountAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.CrossAccountAttachmentFactory(resourceName, resourceFactoryAction));
        CrossAccountAttachmentFactories.Add(factory);
        return factory;
    }

    public GlobalAccelerator.EndpointGroupFactory WithEndpointGroup(Action<Humidifier.GlobalAccelerator.EndpointGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GlobalAccelerator.EndpointGroupFactory(resourceName, resourceFactoryAction));
        EndpointGroupFactories.Add(factory);
        return factory;
    }

    public Glue.ClassifierFactory WithClassifier(Action<Humidifier.Glue.Classifier> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.ClassifierFactory(resourceName, resourceFactoryAction));
        ClassifierFactories.Add(factory);
        return factory;
    }

    public Glue.CrawlerFactory WithCrawler(Action<Humidifier.Glue.Crawler> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.CrawlerFactory(resourceName, resourceFactoryAction));
        CrawlerFactories.Add(factory);
        return factory;
    }

    public Glue.CustomEntityTypeFactory WithCustomEntityType(Action<Humidifier.Glue.CustomEntityType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.CustomEntityTypeFactory(resourceName, resourceFactoryAction));
        CustomEntityTypeFactories.Add(factory);
        return factory;
    }

    public Glue.DataCatalogEncryptionSettingsFactory WithDataCatalogEncryptionSettings(Action<Humidifier.Glue.DataCatalogEncryptionSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DataCatalogEncryptionSettingsFactory(resourceName, resourceFactoryAction));
        DataCatalogEncryptionSettingsFactories.Add(factory);
        return factory;
    }

    public Glue.DataQualityRulesetFactory WithDataQualityRuleset(Action<Humidifier.Glue.DataQualityRuleset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DataQualityRulesetFactory(resourceName, resourceFactoryAction));
        DataQualityRulesetFactories.Add(factory);
        return factory;
    }

    public Glue.DatabaseFactory WithGlueDatabase(Action<Humidifier.Glue.Database> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DatabaseFactory(resourceName, resourceFactoryAction));
        GlueDatabaseFactories.Add(factory);
        return factory;
    }

    public Lightsail.DatabaseFactory WithLightsailDatabase(Action<Humidifier.Lightsail.Database> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DatabaseFactory(resourceName, resourceFactoryAction));
        LightsailDatabaseFactories.Add(factory);
        return factory;
    }

    public Timestream.DatabaseFactory WithTimestreamDatabase(Action<Humidifier.Timestream.Database> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.DatabaseFactory(resourceName, resourceFactoryAction));
        TimestreamDatabaseFactories.Add(factory);
        return factory;
    }

    public Glue.DevEndpointFactory WithDevEndpoint(Action<Humidifier.Glue.DevEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.DevEndpointFactory(resourceName, resourceFactoryAction));
        DevEndpointFactories.Add(factory);
        return factory;
    }

    public Glue.MLTransformFactory WithMLTransform(Action<Humidifier.Glue.MLTransform> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.MLTransformFactory(resourceName, resourceFactoryAction));
        MLTransformFactories.Add(factory);
        return factory;
    }

    public Glue.PartitionFactory WithPartition(Action<Humidifier.Glue.Partition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.PartitionFactory(resourceName, resourceFactoryAction));
        PartitionFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaVersionFactory WithSchemaVersion(Action<Humidifier.Glue.SchemaVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaVersionFactory(resourceName, resourceFactoryAction));
        SchemaVersionFactories.Add(factory);
        return factory;
    }

    public Glue.SchemaVersionMetadataFactory WithSchemaVersionMetadata(Action<Humidifier.Glue.SchemaVersionMetadata> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.SchemaVersionMetadataFactory(resourceName, resourceFactoryAction));
        SchemaVersionMetadataFactories.Add(factory);
        return factory;
    }

    public Glue.TableOptimizerFactory WithTableOptimizer(Action<Humidifier.Glue.TableOptimizer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TableOptimizerFactory(resourceName, resourceFactoryAction));
        TableOptimizerFactories.Add(factory);
        return factory;
    }

    public Glue.TriggerFactory WithTrigger(Action<Humidifier.Glue.Trigger> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.TriggerFactory(resourceName, resourceFactoryAction));
        TriggerFactories.Add(factory);
        return factory;
    }

    public Glue.WorkflowFactory WithGlueWorkflow(Action<Humidifier.Glue.Workflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Glue.WorkflowFactory(resourceName, resourceFactoryAction));
        GlueWorkflowFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.WorkflowFactory WithImageBuilderWorkflow(Action<Humidifier.ImageBuilder.Workflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.WorkflowFactory(resourceName, resourceFactoryAction));
        ImageBuilderWorkflowFactories.Add(factory);
        return factory;
    }

    public Omics.WorkflowFactory WithOmicsWorkflow(Action<Humidifier.Omics.Workflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.WorkflowFactory(resourceName, resourceFactoryAction));
        OmicsWorkflowFactories.Add(factory);
        return factory;
    }

    public Transfer.WorkflowFactory WithTransferWorkflow(Action<Humidifier.Transfer.Workflow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.WorkflowFactory(resourceName, resourceFactoryAction));
        TransferWorkflowFactories.Add(factory);
        return factory;
    }

    public Greengrass.ConnectorDefinitionFactory WithConnectorDefinition(Action<Humidifier.Greengrass.ConnectorDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ConnectorDefinitionFactory(resourceName, resourceFactoryAction));
        ConnectorDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ConnectorDefinitionVersionFactory WithConnectorDefinitionVersion(Action<Humidifier.Greengrass.ConnectorDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ConnectorDefinitionVersionFactory(resourceName, resourceFactoryAction));
        ConnectorDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.CoreDefinitionFactory WithCoreDefinition(Action<Humidifier.Greengrass.CoreDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.CoreDefinitionFactory(resourceName, resourceFactoryAction));
        CoreDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.CoreDefinitionVersionFactory WithCoreDefinitionVersion(Action<Humidifier.Greengrass.CoreDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.CoreDefinitionVersionFactory(resourceName, resourceFactoryAction));
        CoreDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.DeviceDefinitionFactory WithDeviceDefinition(Action<Humidifier.Greengrass.DeviceDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.DeviceDefinitionFactory(resourceName, resourceFactoryAction));
        DeviceDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.DeviceDefinitionVersionFactory WithDeviceDefinitionVersion(Action<Humidifier.Greengrass.DeviceDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.DeviceDefinitionVersionFactory(resourceName, resourceFactoryAction));
        DeviceDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.FunctionDefinitionFactory WithFunctionDefinition(Action<Humidifier.Greengrass.FunctionDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.FunctionDefinitionFactory(resourceName, resourceFactoryAction));
        FunctionDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.FunctionDefinitionVersionFactory WithFunctionDefinitionVersion(Action<Humidifier.Greengrass.FunctionDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.FunctionDefinitionVersionFactory(resourceName, resourceFactoryAction));
        FunctionDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.GroupFactory WithGreengrassGroup(Action<Humidifier.Greengrass.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.GroupFactory(resourceName, resourceFactoryAction));
        GreengrassGroupFactories.Add(factory);
        return factory;
    }

    public IAM.GroupFactory WithIAMGroup(Action<Humidifier.IAM.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.GroupFactory(resourceName, resourceFactoryAction));
        IAMGroupFactories.Add(factory);
        return factory;
    }

    public IdentityStore.GroupFactory WithIdentityStoreGroup(Action<Humidifier.IdentityStore.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IdentityStore.GroupFactory(resourceName, resourceFactoryAction));
        IdentityStoreGroupFactories.Add(factory);
        return factory;
    }

    public ResourceGroups.GroupFactory WithResourceGroupsGroup(Action<Humidifier.ResourceGroups.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceGroups.GroupFactory(resourceName, resourceFactoryAction));
        ResourceGroupsGroupFactories.Add(factory);
        return factory;
    }

    public Synthetics.GroupFactory WithSyntheticsGroup(Action<Humidifier.Synthetics.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Synthetics.GroupFactory(resourceName, resourceFactoryAction));
        SyntheticsGroupFactories.Add(factory);
        return factory;
    }

    public XRay.GroupFactory WithXRayGroup(Action<Humidifier.XRay.Group> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.GroupFactory(resourceName, resourceFactoryAction));
        XRayGroupFactories.Add(factory);
        return factory;
    }

    public Greengrass.GroupVersionFactory WithGroupVersion(Action<Humidifier.Greengrass.GroupVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.GroupVersionFactory(resourceName, resourceFactoryAction));
        GroupVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.LoggerDefinitionFactory WithLoggerDefinition(Action<Humidifier.Greengrass.LoggerDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.LoggerDefinitionFactory(resourceName, resourceFactoryAction));
        LoggerDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.LoggerDefinitionVersionFactory WithLoggerDefinitionVersion(Action<Humidifier.Greengrass.LoggerDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.LoggerDefinitionVersionFactory(resourceName, resourceFactoryAction));
        LoggerDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ResourceDefinitionFactory WithResourceDefinition(Action<Humidifier.Greengrass.ResourceDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ResourceDefinitionFactory(resourceName, resourceFactoryAction));
        ResourceDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.ResourceDefinitionVersionFactory WithResourceDefinitionVersion(Action<Humidifier.Greengrass.ResourceDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.ResourceDefinitionVersionFactory(resourceName, resourceFactoryAction));
        ResourceDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public Greengrass.SubscriptionDefinitionFactory WithSubscriptionDefinition(Action<Humidifier.Greengrass.SubscriptionDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.SubscriptionDefinitionFactory(resourceName, resourceFactoryAction));
        SubscriptionDefinitionFactories.Add(factory);
        return factory;
    }

    public Greengrass.SubscriptionDefinitionVersionFactory WithSubscriptionDefinitionVersion(Action<Humidifier.Greengrass.SubscriptionDefinitionVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Greengrass.SubscriptionDefinitionVersionFactory(resourceName, resourceFactoryAction));
        SubscriptionDefinitionVersionFactories.Add(factory);
        return factory;
    }

    public GreengrassV2.ComponentVersionFactory WithComponentVersion(Action<Humidifier.GreengrassV2.ComponentVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GreengrassV2.ComponentVersionFactory(resourceName, resourceFactoryAction));
        ComponentVersionFactories.Add(factory);
        return factory;
    }

    public GroundStation.ConfigFactory WithConfig(Action<Humidifier.GroundStation.Config> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.ConfigFactory(resourceName, resourceFactoryAction));
        ConfigFactories.Add(factory);
        return factory;
    }

    public GroundStation.DataflowEndpointGroupFactory WithDataflowEndpointGroup(Action<Humidifier.GroundStation.DataflowEndpointGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.DataflowEndpointGroupFactory(resourceName, resourceFactoryAction));
        DataflowEndpointGroupFactories.Add(factory);
        return factory;
    }

    public GroundStation.MissionProfileFactory WithMissionProfile(Action<Humidifier.GroundStation.MissionProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GroundStation.MissionProfileFactory(resourceName, resourceFactoryAction));
        MissionProfileFactories.Add(factory);
        return factory;
    }

    public GuardDuty.FilterFactory WithGuardDutyFilter(Action<Humidifier.GuardDuty.Filter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.FilterFactory(resourceName, resourceFactoryAction));
        GuardDutyFilterFactories.Add(factory);
        return factory;
    }

    public InspectorV2.FilterFactory WithInspectorV2Filter(Action<Humidifier.InspectorV2.Filter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new InspectorV2.FilterFactory(resourceName, resourceFactoryAction));
        InspectorV2FilterFactories.Add(factory);
        return factory;
    }

    public GuardDuty.IPSetFactory WithGuardDutyIPSet(Action<Humidifier.GuardDuty.IPSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.IPSetFactory(resourceName, resourceFactoryAction));
        GuardDutyIPSetFactories.Add(factory);
        return factory;
    }

    public WAF.IPSetFactory WithWAFIPSet(Action<Humidifier.WAF.IPSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.IPSetFactory(resourceName, resourceFactoryAction));
        WAFIPSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.IPSetFactory WithWAFRegionalIPSet(Action<Humidifier.WAFRegional.IPSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.IPSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalIPSetFactories.Add(factory);
        return factory;
    }

    public WAFv2.IPSetFactory WithWAFv2IPSet(Action<Humidifier.WAFv2.IPSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.IPSetFactory(resourceName, resourceFactoryAction));
        WAFv2IPSetFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MalwareProtectionPlanFactory WithMalwareProtectionPlan(Action<Humidifier.GuardDuty.MalwareProtectionPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MalwareProtectionPlanFactory(resourceName, resourceFactoryAction));
        MalwareProtectionPlanFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MasterFactory WithMaster(Action<Humidifier.GuardDuty.Master> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MasterFactory(resourceName, resourceFactoryAction));
        MasterFactories.Add(factory);
        return factory;
    }

    public GuardDuty.MemberFactory WithGuardDutyMember(Action<Humidifier.GuardDuty.Member> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.MemberFactory(resourceName, resourceFactoryAction));
        GuardDutyMemberFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.MemberFactory WithManagedBlockchainMember(Action<Humidifier.ManagedBlockchain.Member> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.MemberFactory(resourceName, resourceFactoryAction));
        ManagedBlockchainMemberFactories.Add(factory);
        return factory;
    }

    public GuardDuty.ThreatIntelSetFactory WithThreatIntelSet(Action<Humidifier.GuardDuty.ThreatIntelSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new GuardDuty.ThreatIntelSetFactory(resourceName, resourceFactoryAction));
        ThreatIntelSetFactories.Add(factory);
        return factory;
    }

    public HealthImaging.DatastoreFactory WithHealthImagingDatastore(Action<Humidifier.HealthImaging.Datastore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new HealthImaging.DatastoreFactory(resourceName, resourceFactoryAction));
        HealthImagingDatastoreFactories.Add(factory);
        return factory;
    }

    public IoTAnalytics.DatastoreFactory WithIoTAnalyticsDatastore(Action<Humidifier.IoTAnalytics.Datastore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTAnalytics.DatastoreFactory(resourceName, resourceFactoryAction));
        IoTAnalyticsDatastoreFactories.Add(factory);
        return factory;
    }

    public HealthLake.FHIRDatastoreFactory WithFHIRDatastore(Action<Humidifier.HealthLake.FHIRDatastore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new HealthLake.FHIRDatastoreFactory(resourceName, resourceFactoryAction));
        FHIRDatastoreFactories.Add(factory);
        return factory;
    }

    public IAM.AccessKeyFactory WithAccessKey(Action<Humidifier.IAM.AccessKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.AccessKeyFactory(resourceName, resourceFactoryAction));
        AccessKeyFactories.Add(factory);
        return factory;
    }

    public IAM.GroupPolicyFactory WithGroupPolicy(Action<Humidifier.IAM.GroupPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.GroupPolicyFactory(resourceName, resourceFactoryAction));
        GroupPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.ManagedPolicyFactory WithManagedPolicy(Action<Humidifier.IAM.ManagedPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ManagedPolicyFactory(resourceName, resourceFactoryAction));
        ManagedPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.OIDCProviderFactory WithOIDCProvider(Action<Humidifier.IAM.OIDCProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.OIDCProviderFactory(resourceName, resourceFactoryAction));
        OIDCProviderFactories.Add(factory);
        return factory;
    }

    public IAM.RoleFactory WithRole(Action<Humidifier.IAM.Role> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.RoleFactory(resourceName, resourceFactoryAction));
        RoleFactories.Add(factory);
        return factory;
    }

    public IAM.RolePolicyFactory WithRolePolicy(Action<Humidifier.IAM.RolePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.RolePolicyFactory(resourceName, resourceFactoryAction));
        RolePolicyFactories.Add(factory);
        return factory;
    }

    public IAM.SAMLProviderFactory WithSAMLProvider(Action<Humidifier.IAM.SAMLProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.SAMLProviderFactory(resourceName, resourceFactoryAction));
        SAMLProviderFactories.Add(factory);
        return factory;
    }

    public IAM.ServerCertificateFactory WithServerCertificate(Action<Humidifier.IAM.ServerCertificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ServerCertificateFactory(resourceName, resourceFactoryAction));
        ServerCertificateFactories.Add(factory);
        return factory;
    }

    public IAM.ServiceLinkedRoleFactory WithServiceLinkedRole(Action<Humidifier.IAM.ServiceLinkedRole> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.ServiceLinkedRoleFactory(resourceName, resourceFactoryAction));
        ServiceLinkedRoleFactories.Add(factory);
        return factory;
    }

    public IAM.UserPolicyFactory WithUserPolicy(Action<Humidifier.IAM.UserPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserPolicyFactory(resourceName, resourceFactoryAction));
        UserPolicyFactories.Add(factory);
        return factory;
    }

    public IAM.UserToGroupAdditionFactory WithUserToGroupAddition(Action<Humidifier.IAM.UserToGroupAddition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.UserToGroupAdditionFactory(resourceName, resourceFactoryAction));
        UserToGroupAdditionFactories.Add(factory);
        return factory;
    }

    public IAM.VirtualMFADeviceFactory WithVirtualMFADevice(Action<Humidifier.IAM.VirtualMFADevice> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IAM.VirtualMFADeviceFactory(resourceName, resourceFactoryAction));
        VirtualMFADeviceFactories.Add(factory);
        return factory;
    }

    public IVS.EncoderConfigurationFactory WithEncoderConfiguration(Action<Humidifier.IVS.EncoderConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.EncoderConfigurationFactory(resourceName, resourceFactoryAction));
        EncoderConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.PlaybackKeyPairFactory WithPlaybackKeyPair(Action<Humidifier.IVS.PlaybackKeyPair> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PlaybackKeyPairFactory(resourceName, resourceFactoryAction));
        PlaybackKeyPairFactories.Add(factory);
        return factory;
    }

    public IVS.PlaybackRestrictionPolicyFactory WithPlaybackRestrictionPolicy(Action<Humidifier.IVS.PlaybackRestrictionPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.PlaybackRestrictionPolicyFactory(resourceName, resourceFactoryAction));
        PlaybackRestrictionPolicyFactories.Add(factory);
        return factory;
    }

    public IVS.RecordingConfigurationFactory WithRecordingConfiguration(Action<Humidifier.IVS.RecordingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.RecordingConfigurationFactory(resourceName, resourceFactoryAction));
        RecordingConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.StorageConfigurationFactory WithStorageConfiguration(Action<Humidifier.IVS.StorageConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StorageConfigurationFactory(resourceName, resourceFactoryAction));
        StorageConfigurationFactories.Add(factory);
        return factory;
    }

    public IVS.StreamKeyFactory WithStreamKey(Action<Humidifier.IVS.StreamKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVS.StreamKeyFactory(resourceName, resourceFactoryAction));
        StreamKeyFactories.Add(factory);
        return factory;
    }

    public IVSChat.LoggingConfigurationFactory WithIVSChatLoggingConfiguration(Action<Humidifier.IVSChat.LoggingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVSChat.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        IVSChatLoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.LoggingConfigurationFactory WithNetworkFirewallLoggingConfiguration(Action<Humidifier.NetworkFirewall.LoggingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        NetworkFirewallLoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public WAFv2.LoggingConfigurationFactory WithWAFv2LoggingConfiguration(Action<Humidifier.WAFv2.LoggingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.LoggingConfigurationFactory(resourceName, resourceFactoryAction));
        WAFv2LoggingConfigurationFactories.Add(factory);
        return factory;
    }

    public IVSChat.RoomFactory WithRoom(Action<Humidifier.IVSChat.Room> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IVSChat.RoomFactory(resourceName, resourceFactoryAction));
        RoomFactories.Add(factory);
        return factory;
    }

    public IdentityStore.GroupMembershipFactory WithGroupMembership(Action<Humidifier.IdentityStore.GroupMembership> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IdentityStore.GroupMembershipFactory(resourceName, resourceFactoryAction));
        GroupMembershipFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ContainerRecipeFactory WithContainerRecipe(Action<Humidifier.ImageBuilder.ContainerRecipe> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ContainerRecipeFactory(resourceName, resourceFactoryAction));
        ContainerRecipeFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.DistributionConfigurationFactory WithDistributionConfiguration(Action<Humidifier.ImageBuilder.DistributionConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.DistributionConfigurationFactory(resourceName, resourceFactoryAction));
        DistributionConfigurationFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImageFactory WithImageBuilderImage(Action<Humidifier.ImageBuilder.Image> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImageFactory(resourceName, resourceFactoryAction));
        ImageBuilderImageFactories.Add(factory);
        return factory;
    }

    public SageMaker.ImageFactory WithSageMakerImage(Action<Humidifier.SageMaker.Image> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ImageFactory(resourceName, resourceFactoryAction));
        SageMakerImageFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImagePipelineFactory WithImagePipeline(Action<Humidifier.ImageBuilder.ImagePipeline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImagePipelineFactory(resourceName, resourceFactoryAction));
        ImagePipelineFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.ImageRecipeFactory WithImageRecipe(Action<Humidifier.ImageBuilder.ImageRecipe> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.ImageRecipeFactory(resourceName, resourceFactoryAction));
        ImageRecipeFactories.Add(factory);
        return factory;
    }

    public ImageBuilder.InfrastructureConfigurationFactory WithInfrastructureConfiguration(Action<Humidifier.ImageBuilder.InfrastructureConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ImageBuilder.InfrastructureConfigurationFactory(resourceName, resourceFactoryAction));
        InfrastructureConfigurationFactories.Add(factory);
        return factory;
    }

    public Inspector.AssessmentTargetFactory WithAssessmentTarget(Action<Humidifier.Inspector.AssessmentTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.AssessmentTargetFactory(resourceName, resourceFactoryAction));
        AssessmentTargetFactories.Add(factory);
        return factory;
    }

    public Inspector.AssessmentTemplateFactory WithAssessmentTemplate(Action<Humidifier.Inspector.AssessmentTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.AssessmentTemplateFactory(resourceName, resourceFactoryAction));
        AssessmentTemplateFactories.Add(factory);
        return factory;
    }

    public Inspector.ResourceGroupFactory WithResourceGroup(Action<Humidifier.Inspector.ResourceGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Inspector.ResourceGroupFactory(resourceName, resourceFactoryAction));
        ResourceGroupFactories.Add(factory);
        return factory;
    }

    public InspectorV2.CisScanConfigurationFactory WithCisScanConfiguration(Action<Humidifier.InspectorV2.CisScanConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new InspectorV2.CisScanConfigurationFactory(resourceName, resourceFactoryAction));
        CisScanConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT1Click.DeviceFactory WithIoT1ClickDevice(Action<Humidifier.IoT1Click.Device> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.DeviceFactory(resourceName, resourceFactoryAction));
        IoT1ClickDeviceFactories.Add(factory);
        return factory;
    }

    public NetworkManager.DeviceFactory WithNetworkManagerDevice(Action<Humidifier.NetworkManager.Device> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.DeviceFactory(resourceName, resourceFactoryAction));
        NetworkManagerDeviceFactories.Add(factory);
        return factory;
    }

    public SageMaker.DeviceFactory WithSageMakerDevice(Action<Humidifier.SageMaker.Device> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DeviceFactory(resourceName, resourceFactoryAction));
        SageMakerDeviceFactories.Add(factory);
        return factory;
    }

    public IoT1Click.PlacementFactory WithPlacement(Action<Humidifier.IoT1Click.Placement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT1Click.PlacementFactory(resourceName, resourceFactoryAction));
        PlacementFactories.Add(factory);
        return factory;
    }

    public IoT.AccountAuditConfigurationFactory WithAccountAuditConfiguration(Action<Humidifier.IoT.AccountAuditConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.AccountAuditConfigurationFactory(resourceName, resourceFactoryAction));
        AccountAuditConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT.CACertificateFactory WithCACertificate(Action<Humidifier.IoT.CACertificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CACertificateFactory(resourceName, resourceFactoryAction));
        CACertificateFactories.Add(factory);
        return factory;
    }

    public IoT.CertificateProviderFactory WithCertificateProvider(Action<Humidifier.IoT.CertificateProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CertificateProviderFactory(resourceName, resourceFactoryAction));
        CertificateProviderFactories.Add(factory);
        return factory;
    }

    public IoT.CustomMetricFactory WithCustomMetric(Action<Humidifier.IoT.CustomMetric> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.CustomMetricFactory(resourceName, resourceFactoryAction));
        CustomMetricFactories.Add(factory);
        return factory;
    }

    public IoT.DimensionFactory WithDimension(Action<Humidifier.IoT.Dimension> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.DimensionFactory(resourceName, resourceFactoryAction));
        DimensionFactories.Add(factory);
        return factory;
    }

    public IoT.DomainConfigurationFactory WithDomainConfiguration(Action<Humidifier.IoT.DomainConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.DomainConfigurationFactory(resourceName, resourceFactoryAction));
        DomainConfigurationFactories.Add(factory);
        return factory;
    }

    public IoT.FleetMetricFactory WithFleetMetric(Action<Humidifier.IoT.FleetMetric> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.FleetMetricFactory(resourceName, resourceFactoryAction));
        FleetMetricFactories.Add(factory);
        return factory;
    }

    public IoT.JobTemplateFactory WithIoTJobTemplate(Action<Humidifier.IoT.JobTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.JobTemplateFactory(resourceName, resourceFactoryAction));
        IoTJobTemplateFactories.Add(factory);
        return factory;
    }

    public MediaConvert.JobTemplateFactory WithMediaConvertJobTemplate(Action<Humidifier.MediaConvert.JobTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.JobTemplateFactory(resourceName, resourceFactoryAction));
        MediaConvertJobTemplateFactories.Add(factory);
        return factory;
    }

    public IoT.LoggingFactory WithLogging(Action<Humidifier.IoT.Logging> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.LoggingFactory(resourceName, resourceFactoryAction));
        LoggingFactories.Add(factory);
        return factory;
    }

    public IoT.MitigationActionFactory WithMitigationAction(Action<Humidifier.IoT.MitigationAction> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.MitigationActionFactory(resourceName, resourceFactoryAction));
        MitigationActionFactories.Add(factory);
        return factory;
    }

    public IoT.PolicyPrincipalAttachmentFactory WithPolicyPrincipalAttachment(Action<Humidifier.IoT.PolicyPrincipalAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.PolicyPrincipalAttachmentFactory(resourceName, resourceFactoryAction));
        PolicyPrincipalAttachmentFactories.Add(factory);
        return factory;
    }

    public IoT.ProvisioningTemplateFactory WithProvisioningTemplate(Action<Humidifier.IoT.ProvisioningTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ProvisioningTemplateFactory(resourceName, resourceFactoryAction));
        ProvisioningTemplateFactories.Add(factory);
        return factory;
    }

    public IoT.ResourceSpecificLoggingFactory WithResourceSpecificLogging(Action<Humidifier.IoT.ResourceSpecificLogging> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ResourceSpecificLoggingFactory(resourceName, resourceFactoryAction));
        ResourceSpecificLoggingFactories.Add(factory);
        return factory;
    }

    public IoT.RoleAliasFactory WithRoleAlias(Action<Humidifier.IoT.RoleAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.RoleAliasFactory(resourceName, resourceFactoryAction));
        RoleAliasFactories.Add(factory);
        return factory;
    }

    public IoT.ScheduledAuditFactory WithScheduledAudit(Action<Humidifier.IoT.ScheduledAudit> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ScheduledAuditFactory(resourceName, resourceFactoryAction));
        ScheduledAuditFactories.Add(factory);
        return factory;
    }

    public IoT.SoftwarePackageFactory WithSoftwarePackage(Action<Humidifier.IoT.SoftwarePackage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SoftwarePackageFactory(resourceName, resourceFactoryAction));
        SoftwarePackageFactories.Add(factory);
        return factory;
    }

    public IoT.SoftwarePackageVersionFactory WithSoftwarePackageVersion(Action<Humidifier.IoT.SoftwarePackageVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.SoftwarePackageVersionFactory(resourceName, resourceFactoryAction));
        SoftwarePackageVersionFactories.Add(factory);
        return factory;
    }

    public IoT.ThingFactory WithThing(Action<Humidifier.IoT.Thing> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingFactory(resourceName, resourceFactoryAction));
        ThingFactories.Add(factory);
        return factory;
    }

    public IoT.ThingGroupFactory WithThingGroup(Action<Humidifier.IoT.ThingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingGroupFactory(resourceName, resourceFactoryAction));
        ThingGroupFactories.Add(factory);
        return factory;
    }

    public IoT.ThingPrincipalAttachmentFactory WithThingPrincipalAttachment(Action<Humidifier.IoT.ThingPrincipalAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingPrincipalAttachmentFactory(resourceName, resourceFactoryAction));
        ThingPrincipalAttachmentFactories.Add(factory);
        return factory;
    }

    public IoT.ThingTypeFactory WithThingType(Action<Humidifier.IoT.ThingType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.ThingTypeFactory(resourceName, resourceFactoryAction));
        ThingTypeFactories.Add(factory);
        return factory;
    }

    public IoT.TopicRuleFactory WithTopicRule(Action<Humidifier.IoT.TopicRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.TopicRuleFactory(resourceName, resourceFactoryAction));
        TopicRuleFactories.Add(factory);
        return factory;
    }

    public IoT.TopicRuleDestinationFactory WithTopicRuleDestination(Action<Humidifier.IoT.TopicRuleDestination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoT.TopicRuleDestinationFactory(resourceName, resourceFactoryAction));
        TopicRuleDestinationFactories.Add(factory);
        return factory;
    }

    public IoTCoreDeviceAdvisor.SuiteDefinitionFactory WithSuiteDefinition(Action<Humidifier.IoTCoreDeviceAdvisor.SuiteDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTCoreDeviceAdvisor.SuiteDefinitionFactory(resourceName, resourceFactoryAction));
        SuiteDefinitionFactories.Add(factory);
        return factory;
    }

    public IoTEvents.AlarmModelFactory WithAlarmModel(Action<Humidifier.IoTEvents.AlarmModel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.AlarmModelFactory(resourceName, resourceFactoryAction));
        AlarmModelFactories.Add(factory);
        return factory;
    }

    public IoTEvents.DetectorModelFactory WithDetectorModel(Action<Humidifier.IoTEvents.DetectorModel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.DetectorModelFactory(resourceName, resourceFactoryAction));
        DetectorModelFactories.Add(factory);
        return factory;
    }

    public IoTEvents.InputFactory WithIoTEventsInput(Action<Humidifier.IoTEvents.Input> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTEvents.InputFactory(resourceName, resourceFactoryAction));
        IoTEventsInputFactories.Add(factory);
        return factory;
    }

    public MediaLive.InputFactory WithMediaLiveInput(Action<Humidifier.MediaLive.Input> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.InputFactory(resourceName, resourceFactoryAction));
        MediaLiveInputFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.DecoderManifestFactory WithDecoderManifest(Action<Humidifier.IoTFleetWise.DecoderManifest> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.DecoderManifestFactory(resourceName, resourceFactoryAction));
        DecoderManifestFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.ModelManifestFactory WithModelManifest(Action<Humidifier.IoTFleetWise.ModelManifest> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.ModelManifestFactory(resourceName, resourceFactoryAction));
        ModelManifestFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.SignalCatalogFactory WithSignalCatalog(Action<Humidifier.IoTFleetWise.SignalCatalog> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.SignalCatalogFactory(resourceName, resourceFactoryAction));
        SignalCatalogFactories.Add(factory);
        return factory;
    }

    public IoTFleetWise.VehicleFactory WithVehicle(Action<Humidifier.IoTFleetWise.Vehicle> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTFleetWise.VehicleFactory(resourceName, resourceFactoryAction));
        VehicleFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AccessPolicyFactory WithIoTSiteWiseAccessPolicy(Action<Humidifier.IoTSiteWise.AccessPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AccessPolicyFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseAccessPolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.AccessPolicyFactory WithOpenSearchServerlessAccessPolicy(Action<Humidifier.OpenSearchServerless.AccessPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.AccessPolicyFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessAccessPolicyFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AssetFactory WithIoTSiteWiseAsset(Action<Humidifier.IoTSiteWise.Asset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AssetFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseAssetFactories.Add(factory);
        return factory;
    }

    public MediaPackage.AssetFactory WithMediaPackageAsset(Action<Humidifier.MediaPackage.Asset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.AssetFactory(resourceName, resourceFactoryAction));
        MediaPackageAssetFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.AssetModelFactory WithAssetModel(Action<Humidifier.IoTSiteWise.AssetModel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.AssetModelFactory(resourceName, resourceFactoryAction));
        AssetModelFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.GatewayFactory WithIoTSiteWiseGateway(Action<Humidifier.IoTSiteWise.Gateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.GatewayFactory(resourceName, resourceFactoryAction));
        IoTSiteWiseGatewayFactories.Add(factory);
        return factory;
    }

    public MediaConnect.GatewayFactory WithMediaConnectGateway(Action<Humidifier.MediaConnect.Gateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.GatewayFactory(resourceName, resourceFactoryAction));
        MediaConnectGatewayFactories.Add(factory);
        return factory;
    }

    public IoTSiteWise.PortalFactory WithIoTSiteWisePortal(Action<Humidifier.IoTSiteWise.Portal> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTSiteWise.PortalFactory(resourceName, resourceFactoryAction));
        IoTSiteWisePortalFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.PortalFactory WithWorkSpacesWebPortal(Action<Humidifier.WorkSpacesWeb.Portal> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.PortalFactory(resourceName, resourceFactoryAction));
        WorkSpacesWebPortalFactories.Add(factory);
        return factory;
    }

    public IoTThingsGraph.FlowTemplateFactory WithFlowTemplate(Action<Humidifier.IoTThingsGraph.FlowTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTThingsGraph.FlowTemplateFactory(resourceName, resourceFactoryAction));
        FlowTemplateFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.ComponentTypeFactory WithComponentType(Action<Humidifier.IoTTwinMaker.ComponentType> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.ComponentTypeFactory(resourceName, resourceFactoryAction));
        ComponentTypeFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.EntityFactory WithEntity(Action<Humidifier.IoTTwinMaker.Entity> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.EntityFactory(resourceName, resourceFactoryAction));
        EntityFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.SceneFactory WithScene(Action<Humidifier.IoTTwinMaker.Scene> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.SceneFactory(resourceName, resourceFactoryAction));
        SceneFactories.Add(factory);
        return factory;
    }

    public IoTTwinMaker.SyncJobFactory WithSyncJob(Action<Humidifier.IoTTwinMaker.SyncJob> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTTwinMaker.SyncJobFactory(resourceName, resourceFactoryAction));
        SyncJobFactories.Add(factory);
        return factory;
    }

    public IoTWireless.DestinationFactory WithIoTWirelessDestination(Action<Humidifier.IoTWireless.Destination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.DestinationFactory(resourceName, resourceFactoryAction));
        IoTWirelessDestinationFactories.Add(factory);
        return factory;
    }

    public Logs.DestinationFactory WithLogsDestination(Action<Humidifier.Logs.Destination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DestinationFactory(resourceName, resourceFactoryAction));
        LogsDestinationFactories.Add(factory);
        return factory;
    }

    public IoTWireless.DeviceProfileFactory WithDeviceProfile(Action<Humidifier.IoTWireless.DeviceProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.DeviceProfileFactory(resourceName, resourceFactoryAction));
        DeviceProfileFactories.Add(factory);
        return factory;
    }

    public IoTWireless.FuotaTaskFactory WithFuotaTask(Action<Humidifier.IoTWireless.FuotaTask> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.FuotaTaskFactory(resourceName, resourceFactoryAction));
        FuotaTaskFactories.Add(factory);
        return factory;
    }

    public IoTWireless.MulticastGroupFactory WithMulticastGroup(Action<Humidifier.IoTWireless.MulticastGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.MulticastGroupFactory(resourceName, resourceFactoryAction));
        MulticastGroupFactories.Add(factory);
        return factory;
    }

    public IoTWireless.NetworkAnalyzerConfigurationFactory WithNetworkAnalyzerConfiguration(Action<Humidifier.IoTWireless.NetworkAnalyzerConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.NetworkAnalyzerConfigurationFactory(resourceName, resourceFactoryAction));
        NetworkAnalyzerConfigurationFactories.Add(factory);
        return factory;
    }

    public IoTWireless.PartnerAccountFactory WithPartnerAccount(Action<Humidifier.IoTWireless.PartnerAccount> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.PartnerAccountFactory(resourceName, resourceFactoryAction));
        PartnerAccountFactories.Add(factory);
        return factory;
    }

    public IoTWireless.ServiceProfileFactory WithServiceProfile(Action<Humidifier.IoTWireless.ServiceProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.ServiceProfileFactory(resourceName, resourceFactoryAction));
        ServiceProfileFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessDeviceFactory WithWirelessDevice(Action<Humidifier.IoTWireless.WirelessDevice> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessDeviceFactory(resourceName, resourceFactoryAction));
        WirelessDeviceFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessDeviceImportTaskFactory WithWirelessDeviceImportTask(Action<Humidifier.IoTWireless.WirelessDeviceImportTask> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessDeviceImportTaskFactory(resourceName, resourceFactoryAction));
        WirelessDeviceImportTaskFactories.Add(factory);
        return factory;
    }

    public IoTWireless.WirelessGatewayFactory WithWirelessGateway(Action<Humidifier.IoTWireless.WirelessGateway> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new IoTWireless.WirelessGatewayFactory(resourceName, resourceFactoryAction));
        WirelessGatewayFactories.Add(factory);
        return factory;
    }

    public KMS.KeyFactory WithKMSKey(Action<Humidifier.KMS.Key> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.KeyFactory(resourceName, resourceFactoryAction));
        KMSKeyFactories.Add(factory);
        return factory;
    }

    public PaymentCryptography.KeyFactory WithPaymentCryptographyKey(Action<Humidifier.PaymentCryptography.Key> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PaymentCryptography.KeyFactory(resourceName, resourceFactoryAction));
        PaymentCryptographyKeyFactories.Add(factory);
        return factory;
    }

    public KMS.ReplicaKeyFactory WithReplicaKey(Action<Humidifier.KMS.ReplicaKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KMS.ReplicaKeyFactory(resourceName, resourceFactoryAction));
        ReplicaKeyFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.CustomPluginFactory WithCustomPlugin(Action<Humidifier.KafkaConnect.CustomPlugin> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.CustomPluginFactory(resourceName, resourceFactoryAction));
        CustomPluginFactories.Add(factory);
        return factory;
    }

    public KafkaConnect.WorkerConfigurationFactory WithWorkerConfiguration(Action<Humidifier.KafkaConnect.WorkerConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KafkaConnect.WorkerConfigurationFactory(resourceName, resourceFactoryAction));
        WorkerConfigurationFactories.Add(factory);
        return factory;
    }

    public Kendra.FaqFactory WithFaq(Action<Humidifier.Kendra.Faq> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.FaqFactory(resourceName, resourceFactoryAction));
        FaqFactories.Add(factory);
        return factory;
    }

    public Kendra.IndexFactory WithKendraIndex(Action<Humidifier.Kendra.Index> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Kendra.IndexFactory(resourceName, resourceFactoryAction));
        KendraIndexFactories.Add(factory);
        return factory;
    }

    public QBusiness.IndexFactory WithQBusinessIndex(Action<Humidifier.QBusiness.Index> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.IndexFactory(resourceName, resourceFactoryAction));
        QBusinessIndexFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.IndexFactory WithResourceExplorer2Index(Action<Humidifier.ResourceExplorer2.Index> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.IndexFactory(resourceName, resourceFactoryAction));
        ResourceExplorer2IndexFactories.Add(factory);
        return factory;
    }

    public KendraRanking.ExecutionPlanFactory WithExecutionPlan(Action<Humidifier.KendraRanking.ExecutionPlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KendraRanking.ExecutionPlanFactory(resourceName, resourceFactoryAction));
        ExecutionPlanFactories.Add(factory);
        return factory;
    }

    public Kinesis.StreamFactory WithKinesisStream(Action<Humidifier.Kinesis.Stream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Kinesis.StreamFactory(resourceName, resourceFactoryAction));
        KinesisStreamFactories.Add(factory);
        return factory;
    }

    public KinesisVideo.StreamFactory WithKinesisVideoStream(Action<Humidifier.KinesisVideo.Stream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisVideo.StreamFactory(resourceName, resourceFactoryAction));
        KinesisVideoStreamFactories.Add(factory);
        return factory;
    }

    public QLDB.StreamFactory WithQLDBStream(Action<Humidifier.QLDB.Stream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QLDB.StreamFactory(resourceName, resourceFactoryAction));
        QLDBStreamFactories.Add(factory);
        return factory;
    }

    public Kinesis.StreamConsumerFactory WithStreamConsumer(Action<Humidifier.Kinesis.StreamConsumer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Kinesis.StreamConsumerFactory(resourceName, resourceFactoryAction));
        StreamConsumerFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationOutputFactory WithKinesisAnalyticsApplicationOutput(Action<Humidifier.KinesisAnalytics.ApplicationOutput> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationOutputFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationOutputFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationOutputFactory WithKinesisAnalyticsV2ApplicationOutput(Action<Humidifier.KinesisAnalyticsV2.ApplicationOutput> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationOutputFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationOutputFactories.Add(factory);
        return factory;
    }

    public KinesisAnalytics.ApplicationReferenceDataSourceFactory WithKinesisAnalyticsApplicationReferenceDataSource(Action<Humidifier.KinesisAnalytics.ApplicationReferenceDataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalytics.ApplicationReferenceDataSourceFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsApplicationReferenceDataSourceFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationReferenceDataSourceFactory WithKinesisAnalyticsV2ApplicationReferenceDataSource(Action<Humidifier.KinesisAnalyticsV2.ApplicationReferenceDataSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationReferenceDataSourceFactory(resourceName, resourceFactoryAction));
        KinesisAnalyticsV2ApplicationReferenceDataSourceFactories.Add(factory);
        return factory;
    }

    public KinesisAnalyticsV2.ApplicationCloudWatchLoggingOptionFactory WithApplicationCloudWatchLoggingOption(Action<Humidifier.KinesisAnalyticsV2.ApplicationCloudWatchLoggingOption> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisAnalyticsV2.ApplicationCloudWatchLoggingOptionFactory(resourceName, resourceFactoryAction));
        ApplicationCloudWatchLoggingOptionFactories.Add(factory);
        return factory;
    }

    public KinesisFirehose.DeliveryStreamFactory WithDeliveryStream(Action<Humidifier.KinesisFirehose.DeliveryStream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisFirehose.DeliveryStreamFactory(resourceName, resourceFactoryAction));
        DeliveryStreamFactories.Add(factory);
        return factory;
    }

    public KinesisVideo.SignalingChannelFactory WithSignalingChannel(Action<Humidifier.KinesisVideo.SignalingChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new KinesisVideo.SignalingChannelFactory(resourceName, resourceFactoryAction));
        SignalingChannelFactories.Add(factory);
        return factory;
    }

    public LakeFormation.DataCellsFilterFactory WithDataCellsFilter(Action<Humidifier.LakeFormation.DataCellsFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.DataCellsFilterFactory(resourceName, resourceFactoryAction));
        DataCellsFilterFactories.Add(factory);
        return factory;
    }

    public LakeFormation.DataLakeSettingsFactory WithDataLakeSettings(Action<Humidifier.LakeFormation.DataLakeSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.DataLakeSettingsFactory(resourceName, resourceFactoryAction));
        DataLakeSettingsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.PermissionsFactory WithPermissions(Action<Humidifier.LakeFormation.Permissions> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.PermissionsFactory(resourceName, resourceFactoryAction));
        PermissionsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.PrincipalPermissionsFactory WithPrincipalPermissions(Action<Humidifier.LakeFormation.PrincipalPermissions> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.PrincipalPermissionsFactory(resourceName, resourceFactoryAction));
        PrincipalPermissionsFactories.Add(factory);
        return factory;
    }

    public LakeFormation.TagFactory WithTag(Action<Humidifier.LakeFormation.Tag> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.TagFactory(resourceName, resourceFactoryAction));
        TagFactories.Add(factory);
        return factory;
    }

    public LakeFormation.TagAssociationFactory WithTagAssociation(Action<Humidifier.LakeFormation.TagAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LakeFormation.TagAssociationFactory(resourceName, resourceFactoryAction));
        TagAssociationFactories.Add(factory);
        return factory;
    }

    public Lambda.CodeSigningConfigFactory WithCodeSigningConfig(Action<Humidifier.Lambda.CodeSigningConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.CodeSigningConfigFactory(resourceName, resourceFactoryAction));
        CodeSigningConfigFactories.Add(factory);
        return factory;
    }

    public Lambda.EventInvokeConfigFactory WithEventInvokeConfig(Action<Humidifier.Lambda.EventInvokeConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.EventInvokeConfigFactory(resourceName, resourceFactoryAction));
        EventInvokeConfigFactories.Add(factory);
        return factory;
    }

    public Lambda.EventSourceMappingFactory WithEventSourceMapping(Action<Humidifier.Lambda.EventSourceMapping> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.EventSourceMappingFactory(resourceName, resourceFactoryAction));
        EventSourceMappingFactories.Add(factory);
        return factory;
    }

    public Lambda.LayerVersionFactory WithLayerVersion(Action<Humidifier.Lambda.LayerVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.LayerVersionFactory(resourceName, resourceFactoryAction));
        LayerVersionFactories.Add(factory);
        return factory;
    }

    public Lambda.LayerVersionPermissionFactory WithLayerVersionPermission(Action<Humidifier.Lambda.LayerVersionPermission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.LayerVersionPermissionFactory(resourceName, resourceFactoryAction));
        LayerVersionPermissionFactories.Add(factory);
        return factory;
    }

    public Lambda.UrlFactory WithUrl(Action<Humidifier.Lambda.Url> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.UrlFactory(resourceName, resourceFactoryAction));
        UrlFactories.Add(factory);
        return factory;
    }

    public Lambda.VersionFactory WithVersion(Action<Humidifier.Lambda.Version> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lambda.VersionFactory(resourceName, resourceFactoryAction));
        VersionFactories.Add(factory);
        return factory;
    }

    public Lex.BotFactory WithBot(Action<Humidifier.Lex.Bot> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotFactory(resourceName, resourceFactoryAction));
        BotFactories.Add(factory);
        return factory;
    }

    public Lex.BotAliasFactory WithBotAlias(Action<Humidifier.Lex.BotAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotAliasFactory(resourceName, resourceFactoryAction));
        BotAliasFactories.Add(factory);
        return factory;
    }

    public Lex.BotVersionFactory WithBotVersion(Action<Humidifier.Lex.BotVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lex.BotVersionFactory(resourceName, resourceFactoryAction));
        BotVersionFactories.Add(factory);
        return factory;
    }

    public LicenseManager.GrantFactory WithGrant(Action<Humidifier.LicenseManager.Grant> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LicenseManager.GrantFactory(resourceName, resourceFactoryAction));
        GrantFactories.Add(factory);
        return factory;
    }

    public LicenseManager.LicenseFactory WithLicense(Action<Humidifier.LicenseManager.License> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LicenseManager.LicenseFactory(resourceName, resourceFactoryAction));
        LicenseFactories.Add(factory);
        return factory;
    }

    public Lightsail.BucketFactory WithLightsailBucket(Action<Humidifier.Lightsail.Bucket> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.BucketFactory(resourceName, resourceFactoryAction));
        LightsailBucketFactories.Add(factory);
        return factory;
    }

    public S3.BucketFactory WithS3Bucket(Action<Humidifier.S3.Bucket> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.BucketFactory(resourceName, resourceFactoryAction));
        S3BucketFactories.Add(factory);
        return factory;
    }

    public S3Outposts.BucketFactory WithS3OutpostsBucket(Action<Humidifier.S3Outposts.Bucket> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.BucketFactory(resourceName, resourceFactoryAction));
        S3OutpostsBucketFactories.Add(factory);
        return factory;
    }

    public Lightsail.ContainerFactory WithLightsailContainer(Action<Humidifier.Lightsail.Container> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.ContainerFactory(resourceName, resourceFactoryAction));
        LightsailContainerFactories.Add(factory);
        return factory;
    }

    public MediaStore.ContainerFactory WithMediaStoreContainer(Action<Humidifier.MediaStore.Container> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaStore.ContainerFactory(resourceName, resourceFactoryAction));
        MediaStoreContainerFactories.Add(factory);
        return factory;
    }

    public Lightsail.DiskFactory WithDisk(Action<Humidifier.Lightsail.Disk> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.DiskFactory(resourceName, resourceFactoryAction));
        DiskFactories.Add(factory);
        return factory;
    }

    public Lightsail.LoadBalancerTlsCertificateFactory WithLoadBalancerTlsCertificate(Action<Humidifier.Lightsail.LoadBalancerTlsCertificate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.LoadBalancerTlsCertificateFactory(resourceName, resourceFactoryAction));
        LoadBalancerTlsCertificateFactories.Add(factory);
        return factory;
    }

    public Lightsail.StaticIpFactory WithStaticIp(Action<Humidifier.Lightsail.StaticIp> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Lightsail.StaticIpFactory(resourceName, resourceFactoryAction));
        StaticIpFactories.Add(factory);
        return factory;
    }

    public Location.APIKeyFactory WithAPIKey(Action<Humidifier.Location.APIKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.APIKeyFactory(resourceName, resourceFactoryAction));
        APIKeyFactories.Add(factory);
        return factory;
    }

    public Location.GeofenceCollectionFactory WithGeofenceCollection(Action<Humidifier.Location.GeofenceCollection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.GeofenceCollectionFactory(resourceName, resourceFactoryAction));
        GeofenceCollectionFactories.Add(factory);
        return factory;
    }

    public Location.MapFactory WithMap(Action<Humidifier.Location.Map> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.MapFactory(resourceName, resourceFactoryAction));
        MapFactories.Add(factory);
        return factory;
    }

    public Location.PlaceIndexFactory WithPlaceIndex(Action<Humidifier.Location.PlaceIndex> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.PlaceIndexFactory(resourceName, resourceFactoryAction));
        PlaceIndexFactories.Add(factory);
        return factory;
    }

    public Location.RouteCalculatorFactory WithRouteCalculator(Action<Humidifier.Location.RouteCalculator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.RouteCalculatorFactory(resourceName, resourceFactoryAction));
        RouteCalculatorFactories.Add(factory);
        return factory;
    }

    public Location.TrackerFactory WithTracker(Action<Humidifier.Location.Tracker> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.TrackerFactory(resourceName, resourceFactoryAction));
        TrackerFactories.Add(factory);
        return factory;
    }

    public Location.TrackerConsumerFactory WithTrackerConsumer(Action<Humidifier.Location.TrackerConsumer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Location.TrackerConsumerFactory(resourceName, resourceFactoryAction));
        TrackerConsumerFactories.Add(factory);
        return factory;
    }

    public Logs.AccountPolicyFactory WithAccountPolicy(Action<Humidifier.Logs.AccountPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.AccountPolicyFactory(resourceName, resourceFactoryAction));
        AccountPolicyFactories.Add(factory);
        return factory;
    }

    public Logs.DeliveryFactory WithDelivery(Action<Humidifier.Logs.Delivery> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliveryFactory(resourceName, resourceFactoryAction));
        DeliveryFactories.Add(factory);
        return factory;
    }

    public Logs.DeliveryDestinationFactory WithDeliveryDestination(Action<Humidifier.Logs.DeliveryDestination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliveryDestinationFactory(resourceName, resourceFactoryAction));
        DeliveryDestinationFactories.Add(factory);
        return factory;
    }

    public Logs.DeliverySourceFactory WithDeliverySource(Action<Humidifier.Logs.DeliverySource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.DeliverySourceFactory(resourceName, resourceFactoryAction));
        DeliverySourceFactories.Add(factory);
        return factory;
    }

    public Logs.LogAnomalyDetectorFactory WithLogAnomalyDetector(Action<Humidifier.Logs.LogAnomalyDetector> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogAnomalyDetectorFactory(resourceName, resourceFactoryAction));
        LogAnomalyDetectorFactories.Add(factory);
        return factory;
    }

    public Logs.LogGroupFactory WithLogGroup(Action<Humidifier.Logs.LogGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogGroupFactory(resourceName, resourceFactoryAction));
        LogGroupFactories.Add(factory);
        return factory;
    }

    public Logs.LogStreamFactory WithLogStream(Action<Humidifier.Logs.LogStream> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.LogStreamFactory(resourceName, resourceFactoryAction));
        LogStreamFactories.Add(factory);
        return factory;
    }

    public Logs.MetricFilterFactory WithMetricFilter(Action<Humidifier.Logs.MetricFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.MetricFilterFactory(resourceName, resourceFactoryAction));
        MetricFilterFactories.Add(factory);
        return factory;
    }

    public Logs.QueryDefinitionFactory WithQueryDefinition(Action<Humidifier.Logs.QueryDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.QueryDefinitionFactory(resourceName, resourceFactoryAction));
        QueryDefinitionFactories.Add(factory);
        return factory;
    }

    public Logs.SubscriptionFilterFactory WithSubscriptionFilter(Action<Humidifier.Logs.SubscriptionFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Logs.SubscriptionFilterFactory(resourceName, resourceFactoryAction));
        SubscriptionFilterFactories.Add(factory);
        return factory;
    }

    public LookoutEquipment.InferenceSchedulerFactory WithInferenceScheduler(Action<Humidifier.LookoutEquipment.InferenceScheduler> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutEquipment.InferenceSchedulerFactory(resourceName, resourceFactoryAction));
        InferenceSchedulerFactories.Add(factory);
        return factory;
    }

    public LookoutMetrics.AlertFactory WithAlert(Action<Humidifier.LookoutMetrics.Alert> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new LookoutMetrics.AlertFactory(resourceName, resourceFactoryAction));
        AlertFactories.Add(factory);
        return factory;
    }

    public MSK.BatchScramSecretFactory WithBatchScramSecret(Action<Humidifier.MSK.BatchScramSecret> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.BatchScramSecretFactory(resourceName, resourceFactoryAction));
        BatchScramSecretFactories.Add(factory);
        return factory;
    }

    public MSK.ClusterPolicyFactory WithClusterPolicy(Action<Humidifier.MSK.ClusterPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ClusterPolicyFactory(resourceName, resourceFactoryAction));
        ClusterPolicyFactories.Add(factory);
        return factory;
    }

    public MSK.ReplicatorFactory WithReplicator(Action<Humidifier.MSK.Replicator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ReplicatorFactory(resourceName, resourceFactoryAction));
        ReplicatorFactories.Add(factory);
        return factory;
    }

    public MSK.ServerlessClusterFactory WithServerlessCluster(Action<Humidifier.MSK.ServerlessCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.ServerlessClusterFactory(resourceName, resourceFactoryAction));
        ServerlessClusterFactories.Add(factory);
        return factory;
    }

    public MSK.VpcConnectionFactory WithVpcConnection(Action<Humidifier.MSK.VpcConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MSK.VpcConnectionFactory(resourceName, resourceFactoryAction));
        VpcConnectionFactories.Add(factory);
        return factory;
    }

    public Macie.AllowListFactory WithAllowList(Action<Humidifier.Macie.AllowList> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.AllowListFactory(resourceName, resourceFactoryAction));
        AllowListFactories.Add(factory);
        return factory;
    }

    public Macie.CustomDataIdentifierFactory WithCustomDataIdentifier(Action<Humidifier.Macie.CustomDataIdentifier> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.CustomDataIdentifierFactory(resourceName, resourceFactoryAction));
        CustomDataIdentifierFactories.Add(factory);
        return factory;
    }

    public Macie.FindingsFilterFactory WithFindingsFilter(Action<Humidifier.Macie.FindingsFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.FindingsFilterFactory(resourceName, resourceFactoryAction));
        FindingsFilterFactories.Add(factory);
        return factory;
    }

    public Macie.SessionFactory WithSession(Action<Humidifier.Macie.Session> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Macie.SessionFactory(resourceName, resourceFactoryAction));
        SessionFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.AccessorFactory WithAccessor(Action<Humidifier.ManagedBlockchain.Accessor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.AccessorFactory(resourceName, resourceFactoryAction));
        AccessorFactories.Add(factory);
        return factory;
    }

    public ManagedBlockchain.NodeFactory WithNode(Action<Humidifier.ManagedBlockchain.Node> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ManagedBlockchain.NodeFactory(resourceName, resourceFactoryAction));
        NodeFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeFactory WithBridge(Action<Humidifier.MediaConnect.Bridge> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeFactory(resourceName, resourceFactoryAction));
        BridgeFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeOutputFactory WithBridgeOutput(Action<Humidifier.MediaConnect.BridgeOutput> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeOutputFactory(resourceName, resourceFactoryAction));
        BridgeOutputFactories.Add(factory);
        return factory;
    }

    public MediaConnect.BridgeSourceFactory WithBridgeSource(Action<Humidifier.MediaConnect.BridgeSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.BridgeSourceFactory(resourceName, resourceFactoryAction));
        BridgeSourceFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowEntitlementFactory WithFlowEntitlement(Action<Humidifier.MediaConnect.FlowEntitlement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowEntitlementFactory(resourceName, resourceFactoryAction));
        FlowEntitlementFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowOutputFactory WithFlowOutput(Action<Humidifier.MediaConnect.FlowOutput> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowOutputFactory(resourceName, resourceFactoryAction));
        FlowOutputFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowSourceFactory WithFlowSource(Action<Humidifier.MediaConnect.FlowSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowSourceFactory(resourceName, resourceFactoryAction));
        FlowSourceFactories.Add(factory);
        return factory;
    }

    public MediaConnect.FlowVpcInterfaceFactory WithFlowVpcInterface(Action<Humidifier.MediaConnect.FlowVpcInterface> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConnect.FlowVpcInterfaceFactory(resourceName, resourceFactoryAction));
        FlowVpcInterfaceFactories.Add(factory);
        return factory;
    }

    public MediaConvert.PresetFactory WithPreset(Action<Humidifier.MediaConvert.Preset> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaConvert.PresetFactory(resourceName, resourceFactoryAction));
        PresetFactories.Add(factory);
        return factory;
    }

    public MediaLive.ChannelPlacementGroupFactory WithChannelPlacementGroup(Action<Humidifier.MediaLive.ChannelPlacementGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.ChannelPlacementGroupFactory(resourceName, resourceFactoryAction));
        ChannelPlacementGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.CloudWatchAlarmTemplateFactory WithCloudWatchAlarmTemplate(Action<Humidifier.MediaLive.CloudWatchAlarmTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.CloudWatchAlarmTemplateFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmTemplateFactories.Add(factory);
        return factory;
    }

    public MediaLive.CloudWatchAlarmTemplateGroupFactory WithCloudWatchAlarmTemplateGroup(Action<Humidifier.MediaLive.CloudWatchAlarmTemplateGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.CloudWatchAlarmTemplateGroupFactory(resourceName, resourceFactoryAction));
        CloudWatchAlarmTemplateGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.EventBridgeRuleTemplateFactory WithEventBridgeRuleTemplate(Action<Humidifier.MediaLive.EventBridgeRuleTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.EventBridgeRuleTemplateFactory(resourceName, resourceFactoryAction));
        EventBridgeRuleTemplateFactories.Add(factory);
        return factory;
    }

    public MediaLive.EventBridgeRuleTemplateGroupFactory WithEventBridgeRuleTemplateGroup(Action<Humidifier.MediaLive.EventBridgeRuleTemplateGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.EventBridgeRuleTemplateGroupFactory(resourceName, resourceFactoryAction));
        EventBridgeRuleTemplateGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.InputSecurityGroupFactory WithInputSecurityGroup(Action<Humidifier.MediaLive.InputSecurityGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.InputSecurityGroupFactory(resourceName, resourceFactoryAction));
        InputSecurityGroupFactories.Add(factory);
        return factory;
    }

    public MediaLive.MultiplexFactory WithMultiplex(Action<Humidifier.MediaLive.Multiplex> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.MultiplexFactory(resourceName, resourceFactoryAction));
        MultiplexFactories.Add(factory);
        return factory;
    }

    public MediaLive.MultiplexprogramFactory WithMultiplexprogram(Action<Humidifier.MediaLive.Multiplexprogram> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.MultiplexprogramFactory(resourceName, resourceFactoryAction));
        MultiplexprogramFactories.Add(factory);
        return factory;
    }

    public MediaLive.NetworkFactory WithNetwork(Action<Humidifier.MediaLive.Network> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.NetworkFactory(resourceName, resourceFactoryAction));
        NetworkFactories.Add(factory);
        return factory;
    }

    public MediaLive.SdiSourceFactory WithSdiSource(Action<Humidifier.MediaLive.SdiSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.SdiSourceFactory(resourceName, resourceFactoryAction));
        SdiSourceFactories.Add(factory);
        return factory;
    }

    public MediaLive.SignalMapFactory WithSignalMap(Action<Humidifier.MediaLive.SignalMap> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaLive.SignalMapFactory(resourceName, resourceFactoryAction));
        SignalMapFactories.Add(factory);
        return factory;
    }

    public MediaPackage.OriginEndpointFactory WithMediaPackageOriginEndpoint(Action<Humidifier.MediaPackage.OriginEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.OriginEndpointFactory(resourceName, resourceFactoryAction));
        MediaPackageOriginEndpointFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.OriginEndpointFactory WithMediaPackageV2OriginEndpoint(Action<Humidifier.MediaPackageV2.OriginEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.OriginEndpointFactory(resourceName, resourceFactoryAction));
        MediaPackageV2OriginEndpointFactories.Add(factory);
        return factory;
    }

    public MediaPackage.PackagingConfigurationFactory WithPackagingConfiguration(Action<Humidifier.MediaPackage.PackagingConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.PackagingConfigurationFactory(resourceName, resourceFactoryAction));
        PackagingConfigurationFactories.Add(factory);
        return factory;
    }

    public MediaPackage.PackagingGroupFactory WithPackagingGroup(Action<Humidifier.MediaPackage.PackagingGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackage.PackagingGroupFactory(resourceName, resourceFactoryAction));
        PackagingGroupFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelGroupFactory WithChannelGroup(Action<Humidifier.MediaPackageV2.ChannelGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelGroupFactory(resourceName, resourceFactoryAction));
        ChannelGroupFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.ChannelPolicyFactory WithMediaPackageV2ChannelPolicy(Action<Humidifier.MediaPackageV2.ChannelPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.ChannelPolicyFactory(resourceName, resourceFactoryAction));
        MediaPackageV2ChannelPolicyFactories.Add(factory);
        return factory;
    }

    public MediaTailor.ChannelPolicyFactory WithMediaTailorChannelPolicy(Action<Humidifier.MediaTailor.ChannelPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.ChannelPolicyFactory(resourceName, resourceFactoryAction));
        MediaTailorChannelPolicyFactories.Add(factory);
        return factory;
    }

    public MediaPackageV2.OriginEndpointPolicyFactory WithOriginEndpointPolicy(Action<Humidifier.MediaPackageV2.OriginEndpointPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaPackageV2.OriginEndpointPolicyFactory(resourceName, resourceFactoryAction));
        OriginEndpointPolicyFactories.Add(factory);
        return factory;
    }

    public MediaTailor.LiveSourceFactory WithLiveSource(Action<Humidifier.MediaTailor.LiveSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.LiveSourceFactory(resourceName, resourceFactoryAction));
        LiveSourceFactories.Add(factory);
        return factory;
    }

    public MediaTailor.PlaybackConfigurationFactory WithPlaybackConfiguration(Action<Humidifier.MediaTailor.PlaybackConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.PlaybackConfigurationFactory(resourceName, resourceFactoryAction));
        PlaybackConfigurationFactories.Add(factory);
        return factory;
    }

    public MediaTailor.SourceLocationFactory WithSourceLocation(Action<Humidifier.MediaTailor.SourceLocation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.SourceLocationFactory(resourceName, resourceFactoryAction));
        SourceLocationFactories.Add(factory);
        return factory;
    }

    public MediaTailor.VodSourceFactory WithVodSource(Action<Humidifier.MediaTailor.VodSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MediaTailor.VodSourceFactory(resourceName, resourceFactoryAction));
        VodSourceFactories.Add(factory);
        return factory;
    }

    public MemoryDB.ACLFactory WithACL(Action<Humidifier.MemoryDB.ACL> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new MemoryDB.ACLFactory(resourceName, resourceFactoryAction));
        ACLFactories.Add(factory);
        return factory;
    }

    public Neptune.DBParameterGroupFactory WithNeptuneDBParameterGroup(Action<Humidifier.Neptune.DBParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Neptune.DBParameterGroupFactory(resourceName, resourceFactoryAction));
        NeptuneDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBParameterGroupFactory WithRDSDBParameterGroup(Action<Humidifier.RDS.DBParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBParameterGroupFactory(resourceName, resourceFactoryAction));
        RDSDBParameterGroupFactories.Add(factory);
        return factory;
    }

    public NeptuneGraph.PrivateGraphEndpointFactory WithPrivateGraphEndpoint(Action<Humidifier.NeptuneGraph.PrivateGraphEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NeptuneGraph.PrivateGraphEndpointFactory(resourceName, resourceFactoryAction));
        PrivateGraphEndpointFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.FirewallFactory WithFirewall(Action<Humidifier.NetworkFirewall.Firewall> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.FirewallFactory(resourceName, resourceFactoryAction));
        FirewallFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.FirewallPolicyFactory WithFirewallPolicy(Action<Humidifier.NetworkFirewall.FirewallPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.FirewallPolicyFactory(resourceName, resourceFactoryAction));
        FirewallPolicyFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.RuleGroupFactory WithNetworkFirewallRuleGroup(Action<Humidifier.NetworkFirewall.RuleGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.RuleGroupFactory(resourceName, resourceFactoryAction));
        NetworkFirewallRuleGroupFactories.Add(factory);
        return factory;
    }

    public WAFv2.RuleGroupFactory WithWAFv2RuleGroup(Action<Humidifier.WAFv2.RuleGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.RuleGroupFactory(resourceName, resourceFactoryAction));
        WAFv2RuleGroupFactories.Add(factory);
        return factory;
    }

    public NetworkFirewall.TLSInspectionConfigurationFactory WithTLSInspectionConfiguration(Action<Humidifier.NetworkFirewall.TLSInspectionConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkFirewall.TLSInspectionConfigurationFactory(resourceName, resourceFactoryAction));
        TLSInspectionConfigurationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.ConnectAttachmentFactory WithConnectAttachment(Action<Humidifier.NetworkManager.ConnectAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.ConnectAttachmentFactory(resourceName, resourceFactoryAction));
        ConnectAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.ConnectPeerFactory WithConnectPeer(Action<Humidifier.NetworkManager.ConnectPeer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.ConnectPeerFactory(resourceName, resourceFactoryAction));
        ConnectPeerFactories.Add(factory);
        return factory;
    }

    public NetworkManager.CoreNetworkFactory WithCoreNetwork(Action<Humidifier.NetworkManager.CoreNetwork> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.CoreNetworkFactory(resourceName, resourceFactoryAction));
        CoreNetworkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.CustomerGatewayAssociationFactory WithCustomerGatewayAssociation(Action<Humidifier.NetworkManager.CustomerGatewayAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.CustomerGatewayAssociationFactory(resourceName, resourceFactoryAction));
        CustomerGatewayAssociationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.GlobalNetworkFactory WithGlobalNetwork(Action<Humidifier.NetworkManager.GlobalNetwork> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.GlobalNetworkFactory(resourceName, resourceFactoryAction));
        GlobalNetworkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.LinkFactory WithNetworkManagerLink(Action<Humidifier.NetworkManager.Link> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.LinkFactory(resourceName, resourceFactoryAction));
        NetworkManagerLinkFactories.Add(factory);
        return factory;
    }

    public Oam.LinkFactory WithOamLink(Action<Humidifier.Oam.Link> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Oam.LinkFactory(resourceName, resourceFactoryAction));
        OamLinkFactories.Add(factory);
        return factory;
    }

    public NetworkManager.LinkAssociationFactory WithLinkAssociation(Action<Humidifier.NetworkManager.LinkAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.LinkAssociationFactory(resourceName, resourceFactoryAction));
        LinkAssociationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.SiteFactory WithSite(Action<Humidifier.NetworkManager.Site> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.SiteFactory(resourceName, resourceFactoryAction));
        SiteFactories.Add(factory);
        return factory;
    }

    public NetworkManager.SiteToSiteVpnAttachmentFactory WithSiteToSiteVpnAttachment(Action<Humidifier.NetworkManager.SiteToSiteVpnAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.SiteToSiteVpnAttachmentFactory(resourceName, resourceFactoryAction));
        SiteToSiteVpnAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayPeeringFactory WithTransitGatewayPeering(Action<Humidifier.NetworkManager.TransitGatewayPeering> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayPeeringFactory(resourceName, resourceFactoryAction));
        TransitGatewayPeeringFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayRegistrationFactory WithTransitGatewayRegistration(Action<Humidifier.NetworkManager.TransitGatewayRegistration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayRegistrationFactory(resourceName, resourceFactoryAction));
        TransitGatewayRegistrationFactories.Add(factory);
        return factory;
    }

    public NetworkManager.TransitGatewayRouteTableAttachmentFactory WithTransitGatewayRouteTableAttachment(Action<Humidifier.NetworkManager.TransitGatewayRouteTableAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.TransitGatewayRouteTableAttachmentFactory(resourceName, resourceFactoryAction));
        TransitGatewayRouteTableAttachmentFactories.Add(factory);
        return factory;
    }

    public NetworkManager.VpcAttachmentFactory WithVpcAttachment(Action<Humidifier.NetworkManager.VpcAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NetworkManager.VpcAttachmentFactory(resourceName, resourceFactoryAction));
        VpcAttachmentFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.LaunchProfileFactory WithLaunchProfile(Action<Humidifier.NimbleStudio.LaunchProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.LaunchProfileFactory(resourceName, resourceFactoryAction));
        LaunchProfileFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StreamingImageFactory WithStreamingImage(Action<Humidifier.NimbleStudio.StreamingImage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StreamingImageFactory(resourceName, resourceFactoryAction));
        StreamingImageFactories.Add(factory);
        return factory;
    }

    public NimbleStudio.StudioComponentFactory WithStudioComponent(Action<Humidifier.NimbleStudio.StudioComponent> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new NimbleStudio.StudioComponentFactory(resourceName, resourceFactoryAction));
        StudioComponentFactories.Add(factory);
        return factory;
    }

    public Oam.SinkFactory WithSink(Action<Humidifier.Oam.Sink> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Oam.SinkFactory(resourceName, resourceFactoryAction));
        SinkFactories.Add(factory);
        return factory;
    }

    public Omics.AnnotationStoreFactory WithAnnotationStore(Action<Humidifier.Omics.AnnotationStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.AnnotationStoreFactory(resourceName, resourceFactoryAction));
        AnnotationStoreFactories.Add(factory);
        return factory;
    }

    public Omics.ReferenceStoreFactory WithReferenceStore(Action<Humidifier.Omics.ReferenceStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.ReferenceStoreFactory(resourceName, resourceFactoryAction));
        ReferenceStoreFactories.Add(factory);
        return factory;
    }

    public Omics.RunGroupFactory WithRunGroup(Action<Humidifier.Omics.RunGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.RunGroupFactory(resourceName, resourceFactoryAction));
        RunGroupFactories.Add(factory);
        return factory;
    }

    public Omics.SequenceStoreFactory WithSequenceStore(Action<Humidifier.Omics.SequenceStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.SequenceStoreFactory(resourceName, resourceFactoryAction));
        SequenceStoreFactories.Add(factory);
        return factory;
    }

    public Omics.VariantStoreFactory WithVariantStore(Action<Humidifier.Omics.VariantStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Omics.VariantStoreFactory(resourceName, resourceFactoryAction));
        VariantStoreFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.CollectionFactory WithOpenSearchServerlessCollection(Action<Humidifier.OpenSearchServerless.Collection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.CollectionFactory(resourceName, resourceFactoryAction));
        OpenSearchServerlessCollectionFactories.Add(factory);
        return factory;
    }

    public Rekognition.CollectionFactory WithRekognitionCollection(Action<Humidifier.Rekognition.Collection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.CollectionFactory(resourceName, resourceFactoryAction));
        RekognitionCollectionFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.SecurityConfigFactory WithSecurityConfig(Action<Humidifier.OpenSearchServerless.SecurityConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.SecurityConfigFactory(resourceName, resourceFactoryAction));
        SecurityConfigFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.SecurityPolicyFactory WithSecurityPolicy(Action<Humidifier.OpenSearchServerless.SecurityPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.SecurityPolicyFactory(resourceName, resourceFactoryAction));
        SecurityPolicyFactories.Add(factory);
        return factory;
    }

    public OpenSearchServerless.VpcEndpointFactory WithVpcEndpoint(Action<Humidifier.OpenSearchServerless.VpcEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpenSearchServerless.VpcEndpointFactory(resourceName, resourceFactoryAction));
        VpcEndpointFactories.Add(factory);
        return factory;
    }

    public OpsWorks.ElasticLoadBalancerAttachmentFactory WithElasticLoadBalancerAttachment(Action<Humidifier.OpsWorks.ElasticLoadBalancerAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.ElasticLoadBalancerAttachmentFactory(resourceName, resourceFactoryAction));
        ElasticLoadBalancerAttachmentFactories.Add(factory);
        return factory;
    }

    public OpsWorks.LayerFactory WithLayer(Action<Humidifier.OpsWorks.Layer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorks.LayerFactory(resourceName, resourceFactoryAction));
        LayerFactories.Add(factory);
        return factory;
    }

    public OpsWorksCM.ServerFactory WithOpsWorksCMServer(Action<Humidifier.OpsWorksCM.Server> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new OpsWorksCM.ServerFactory(resourceName, resourceFactoryAction));
        OpsWorksCMServerFactories.Add(factory);
        return factory;
    }

    public Transfer.ServerFactory WithTransferServer(Action<Humidifier.Transfer.Server> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.ServerFactory(resourceName, resourceFactoryAction));
        TransferServerFactories.Add(factory);
        return factory;
    }

    public Organizations.OrganizationFactory WithOrganization(Action<Humidifier.Organizations.Organization> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.OrganizationFactory(resourceName, resourceFactoryAction));
        OrganizationFactories.Add(factory);
        return factory;
    }

    public Organizations.OrganizationalUnitFactory WithOrganizationalUnit(Action<Humidifier.Organizations.OrganizationalUnit> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Organizations.OrganizationalUnitFactory(resourceName, resourceFactoryAction));
        OrganizationalUnitFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.DirectoryRegistrationFactory WithDirectoryRegistration(Action<Humidifier.PCAConnectorAD.DirectoryRegistration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.DirectoryRegistrationFactory(resourceName, resourceFactoryAction));
        DirectoryRegistrationFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.ServicePrincipalNameFactory WithServicePrincipalName(Action<Humidifier.PCAConnectorAD.ServicePrincipalName> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.ServicePrincipalNameFactory(resourceName, resourceFactoryAction));
        ServicePrincipalNameFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.TemplateFactory WithPCAConnectorADTemplate(Action<Humidifier.PCAConnectorAD.Template> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.TemplateFactory(resourceName, resourceFactoryAction));
        PCAConnectorADTemplateFactories.Add(factory);
        return factory;
    }

    public QuickSight.TemplateFactory WithQuickSightTemplate(Action<Humidifier.QuickSight.Template> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.TemplateFactory(resourceName, resourceFactoryAction));
        QuickSightTemplateFactories.Add(factory);
        return factory;
    }

    public SES.TemplateFactory WithSESTemplate(Action<Humidifier.SES.Template> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.TemplateFactory(resourceName, resourceFactoryAction));
        SESTemplateFactories.Add(factory);
        return factory;
    }

    public PCAConnectorAD.TemplateGroupAccessControlEntryFactory WithTemplateGroupAccessControlEntry(Action<Humidifier.PCAConnectorAD.TemplateGroupAccessControlEntry> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorAD.TemplateGroupAccessControlEntryFactory(resourceName, resourceFactoryAction));
        TemplateGroupAccessControlEntryFactories.Add(factory);
        return factory;
    }

    public PCAConnectorSCEP.ChallengeFactory WithChallenge(Action<Humidifier.PCAConnectorSCEP.Challenge> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PCAConnectorSCEP.ChallengeFactory(resourceName, resourceFactoryAction));
        ChallengeFactories.Add(factory);
        return factory;
    }

    public Panorama.ApplicationInstanceFactory WithApplicationInstance(Action<Humidifier.Panorama.ApplicationInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.ApplicationInstanceFactory(resourceName, resourceFactoryAction));
        ApplicationInstanceFactories.Add(factory);
        return factory;
    }

    public Panorama.PackageFactory WithPackage(Action<Humidifier.Panorama.Package> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.PackageFactory(resourceName, resourceFactoryAction));
        PackageFactories.Add(factory);
        return factory;
    }

    public Panorama.PackageVersionFactory WithPackageVersion(Action<Humidifier.Panorama.PackageVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Panorama.PackageVersionFactory(resourceName, resourceFactoryAction));
        PackageVersionFactories.Add(factory);
        return factory;
    }

    public Personalize.SolutionFactory WithSolution(Action<Humidifier.Personalize.Solution> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Personalize.SolutionFactory(resourceName, resourceFactoryAction));
        SolutionFactories.Add(factory);
        return factory;
    }

    public Pinpoint.ADMChannelFactory WithADMChannel(Action<Humidifier.Pinpoint.ADMChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.ADMChannelFactory(resourceName, resourceFactoryAction));
        ADMChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSChannelFactory WithAPNSChannel(Action<Humidifier.Pinpoint.APNSChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSChannelFactory(resourceName, resourceFactoryAction));
        APNSChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSSandboxChannelFactory WithAPNSSandboxChannel(Action<Humidifier.Pinpoint.APNSSandboxChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSSandboxChannelFactory(resourceName, resourceFactoryAction));
        APNSSandboxChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSVoipChannelFactory WithAPNSVoipChannel(Action<Humidifier.Pinpoint.APNSVoipChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSVoipChannelFactory(resourceName, resourceFactoryAction));
        APNSVoipChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.APNSVoipSandboxChannelFactory WithAPNSVoipSandboxChannel(Action<Humidifier.Pinpoint.APNSVoipSandboxChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.APNSVoipSandboxChannelFactory(resourceName, resourceFactoryAction));
        APNSVoipSandboxChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.ApplicationSettingsFactory WithApplicationSettings(Action<Humidifier.Pinpoint.ApplicationSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.ApplicationSettingsFactory(resourceName, resourceFactoryAction));
        ApplicationSettingsFactories.Add(factory);
        return factory;
    }

    public Pinpoint.BaiduChannelFactory WithBaiduChannel(Action<Humidifier.Pinpoint.BaiduChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.BaiduChannelFactory(resourceName, resourceFactoryAction));
        BaiduChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EmailChannelFactory WithEmailChannel(Action<Humidifier.Pinpoint.EmailChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EmailChannelFactory(resourceName, resourceFactoryAction));
        EmailChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.EmailTemplateFactory WithEmailTemplate(Action<Humidifier.Pinpoint.EmailTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.EmailTemplateFactory(resourceName, resourceFactoryAction));
        EmailTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.GCMChannelFactory WithGCMChannel(Action<Humidifier.Pinpoint.GCMChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.GCMChannelFactory(resourceName, resourceFactoryAction));
        GCMChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.InAppTemplateFactory WithInAppTemplate(Action<Humidifier.Pinpoint.InAppTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.InAppTemplateFactory(resourceName, resourceFactoryAction));
        InAppTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.PushTemplateFactory WithPushTemplate(Action<Humidifier.Pinpoint.PushTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.PushTemplateFactory(resourceName, resourceFactoryAction));
        PushTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SMSChannelFactory WithSMSChannel(Action<Humidifier.Pinpoint.SMSChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SMSChannelFactory(resourceName, resourceFactoryAction));
        SMSChannelFactories.Add(factory);
        return factory;
    }

    public Pinpoint.SmsTemplateFactory WithSmsTemplate(Action<Humidifier.Pinpoint.SmsTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.SmsTemplateFactory(resourceName, resourceFactoryAction));
        SmsTemplateFactories.Add(factory);
        return factory;
    }

    public Pinpoint.VoiceChannelFactory WithVoiceChannel(Action<Humidifier.Pinpoint.VoiceChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pinpoint.VoiceChannelFactory(resourceName, resourceFactoryAction));
        VoiceChannelFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.ConfigurationSetFactory WithPinpointEmailConfigurationSet(Action<Humidifier.PinpointEmail.ConfigurationSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.ConfigurationSetFactory(resourceName, resourceFactoryAction));
        PinpointEmailConfigurationSetFactories.Add(factory);
        return factory;
    }

    public SES.ConfigurationSetFactory WithSESConfigurationSet(Action<Humidifier.SES.ConfigurationSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ConfigurationSetFactory(resourceName, resourceFactoryAction));
        SESConfigurationSetFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.ConfigurationSetEventDestinationFactory WithPinpointEmailConfigurationSetEventDestination(Action<Humidifier.PinpointEmail.ConfigurationSetEventDestination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.ConfigurationSetEventDestinationFactory(resourceName, resourceFactoryAction));
        PinpointEmailConfigurationSetEventDestinationFactories.Add(factory);
        return factory;
    }

    public SES.ConfigurationSetEventDestinationFactory WithSESConfigurationSetEventDestination(Action<Humidifier.SES.ConfigurationSetEventDestination> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ConfigurationSetEventDestinationFactory(resourceName, resourceFactoryAction));
        SESConfigurationSetEventDestinationFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.DedicatedIpPoolFactory WithPinpointEmailDedicatedIpPool(Action<Humidifier.PinpointEmail.DedicatedIpPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.DedicatedIpPoolFactory(resourceName, resourceFactoryAction));
        PinpointEmailDedicatedIpPoolFactories.Add(factory);
        return factory;
    }

    public SES.DedicatedIpPoolFactory WithSESDedicatedIpPool(Action<Humidifier.SES.DedicatedIpPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.DedicatedIpPoolFactory(resourceName, resourceFactoryAction));
        SESDedicatedIpPoolFactories.Add(factory);
        return factory;
    }

    public PinpointEmail.IdentityFactory WithIdentity(Action<Humidifier.PinpointEmail.Identity> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new PinpointEmail.IdentityFactory(resourceName, resourceFactoryAction));
        IdentityFactories.Add(factory);
        return factory;
    }

    public Pipes.PipeFactory WithPipe(Action<Humidifier.Pipes.Pipe> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Pipes.PipeFactory(resourceName, resourceFactoryAction));
        PipeFactories.Add(factory);
        return factory;
    }

    public Proton.EnvironmentAccountConnectionFactory WithEnvironmentAccountConnection(Action<Humidifier.Proton.EnvironmentAccountConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.EnvironmentAccountConnectionFactory(resourceName, resourceFactoryAction));
        EnvironmentAccountConnectionFactories.Add(factory);
        return factory;
    }

    public Proton.EnvironmentTemplateFactory WithEnvironmentTemplate(Action<Humidifier.Proton.EnvironmentTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.EnvironmentTemplateFactory(resourceName, resourceFactoryAction));
        EnvironmentTemplateFactories.Add(factory);
        return factory;
    }

    public Proton.ServiceTemplateFactory WithServiceTemplate(Action<Humidifier.Proton.ServiceTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Proton.ServiceTemplateFactory(resourceName, resourceFactoryAction));
        ServiceTemplateFactories.Add(factory);
        return factory;
    }

    public QBusiness.PluginFactory WithPlugin(Action<Humidifier.QBusiness.Plugin> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.PluginFactory(resourceName, resourceFactoryAction));
        PluginFactories.Add(factory);
        return factory;
    }

    public QBusiness.RetrieverFactory WithRetriever(Action<Humidifier.QBusiness.Retriever> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.RetrieverFactory(resourceName, resourceFactoryAction));
        RetrieverFactories.Add(factory);
        return factory;
    }

    public QBusiness.WebExperienceFactory WithWebExperience(Action<Humidifier.QBusiness.WebExperience> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QBusiness.WebExperienceFactory(resourceName, resourceFactoryAction));
        WebExperienceFactories.Add(factory);
        return factory;
    }

    public QLDB.LedgerFactory WithLedger(Action<Humidifier.QLDB.Ledger> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QLDB.LedgerFactory(resourceName, resourceFactoryAction));
        LedgerFactories.Add(factory);
        return factory;
    }

    public QuickSight.AnalysisFactory WithAnalysis(Action<Humidifier.QuickSight.Analysis> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.AnalysisFactory(resourceName, resourceFactoryAction));
        AnalysisFactories.Add(factory);
        return factory;
    }

    public QuickSight.DataSetFactory WithDataSet(Action<Humidifier.QuickSight.DataSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.DataSetFactory(resourceName, resourceFactoryAction));
        DataSetFactories.Add(factory);
        return factory;
    }

    public QuickSight.RefreshScheduleFactory WithRefreshSchedule(Action<Humidifier.QuickSight.RefreshSchedule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.RefreshScheduleFactory(resourceName, resourceFactoryAction));
        RefreshScheduleFactories.Add(factory);
        return factory;
    }

    public QuickSight.TopicFactory WithQuickSightTopic(Action<Humidifier.QuickSight.Topic> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.TopicFactory(resourceName, resourceFactoryAction));
        QuickSightTopicFactories.Add(factory);
        return factory;
    }

    public SNS.TopicFactory WithSNSTopic(Action<Humidifier.SNS.Topic> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicFactory(resourceName, resourceFactoryAction));
        SNSTopicFactories.Add(factory);
        return factory;
    }

    public QuickSight.VPCConnectionFactory WithVPCConnection(Action<Humidifier.QuickSight.VPCConnection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new QuickSight.VPCConnectionFactory(resourceName, resourceFactoryAction));
        VPCConnectionFactories.Add(factory);
        return factory;
    }

    public RAM.ResourceShareFactory WithResourceShare(Action<Humidifier.RAM.ResourceShare> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RAM.ResourceShareFactory(resourceName, resourceFactoryAction));
        ResourceShareFactories.Add(factory);
        return factory;
    }

    public RDS.CustomDBEngineVersionFactory WithCustomDBEngineVersion(Action<Humidifier.RDS.CustomDBEngineVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.CustomDBEngineVersionFactory(resourceName, resourceFactoryAction));
        CustomDBEngineVersionFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyFactory WithDBProxy(Action<Humidifier.RDS.DBProxy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyFactory(resourceName, resourceFactoryAction));
        DBProxyFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyEndpointFactory WithDBProxyEndpoint(Action<Humidifier.RDS.DBProxyEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyEndpointFactory(resourceName, resourceFactoryAction));
        DBProxyEndpointFactories.Add(factory);
        return factory;
    }

    public RDS.DBProxyTargetGroupFactory WithDBProxyTargetGroup(Action<Humidifier.RDS.DBProxyTargetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBProxyTargetGroupFactory(resourceName, resourceFactoryAction));
        DBProxyTargetGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSecurityGroupFactory WithDBSecurityGroup(Action<Humidifier.RDS.DBSecurityGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSecurityGroupFactory(resourceName, resourceFactoryAction));
        DBSecurityGroupFactories.Add(factory);
        return factory;
    }

    public RDS.DBSecurityGroupIngressFactory WithDBSecurityGroupIngress(Action<Humidifier.RDS.DBSecurityGroupIngress> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.DBSecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        DBSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public RDS.GlobalClusterFactory WithGlobalCluster(Action<Humidifier.RDS.GlobalCluster> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.GlobalClusterFactory(resourceName, resourceFactoryAction));
        GlobalClusterFactories.Add(factory);
        return factory;
    }

    public RDS.OptionGroupFactory WithOptionGroup(Action<Humidifier.RDS.OptionGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RDS.OptionGroupFactory(resourceName, resourceFactoryAction));
        OptionGroupFactories.Add(factory);
        return factory;
    }

    public RUM.AppMonitorFactory WithAppMonitor(Action<Humidifier.RUM.AppMonitor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RUM.AppMonitorFactory(resourceName, resourceFactoryAction));
        AppMonitorFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterParameterGroupFactory WithClusterParameterGroup(Action<Humidifier.Redshift.ClusterParameterGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterParameterGroupFactory(resourceName, resourceFactoryAction));
        ClusterParameterGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSecurityGroupFactory WithClusterSecurityGroup(Action<Humidifier.Redshift.ClusterSecurityGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSecurityGroupFactory(resourceName, resourceFactoryAction));
        ClusterSecurityGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSecurityGroupIngressFactory WithClusterSecurityGroupIngress(Action<Humidifier.Redshift.ClusterSecurityGroupIngress> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSecurityGroupIngressFactory(resourceName, resourceFactoryAction));
        ClusterSecurityGroupIngressFactories.Add(factory);
        return factory;
    }

    public Redshift.ClusterSubnetGroupFactory WithClusterSubnetGroup(Action<Humidifier.Redshift.ClusterSubnetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.ClusterSubnetGroupFactory(resourceName, resourceFactoryAction));
        ClusterSubnetGroupFactories.Add(factory);
        return factory;
    }

    public Redshift.EndpointAccessFactory WithEndpointAccess(Action<Humidifier.Redshift.EndpointAccess> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EndpointAccessFactory(resourceName, resourceFactoryAction));
        EndpointAccessFactories.Add(factory);
        return factory;
    }

    public Redshift.EndpointAuthorizationFactory WithEndpointAuthorization(Action<Humidifier.Redshift.EndpointAuthorization> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Redshift.EndpointAuthorizationFactory(resourceName, resourceFactoryAction));
        EndpointAuthorizationFactories.Add(factory);
        return factory;
    }

    public RedshiftServerless.NamespaceFactory WithNamespace(Action<Humidifier.RedshiftServerless.Namespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RedshiftServerless.NamespaceFactory(resourceName, resourceFactoryAction));
        NamespaceFactories.Add(factory);
        return factory;
    }

    public RedshiftServerless.WorkgroupFactory WithWorkgroup(Action<Humidifier.RedshiftServerless.Workgroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RedshiftServerless.WorkgroupFactory(resourceName, resourceFactoryAction));
        WorkgroupFactories.Add(factory);
        return factory;
    }

    public Rekognition.StreamProcessorFactory WithStreamProcessor(Action<Humidifier.Rekognition.StreamProcessor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Rekognition.StreamProcessorFactory(resourceName, resourceFactoryAction));
        StreamProcessorFactories.Add(factory);
        return factory;
    }

    public ResilienceHub.ResiliencyPolicyFactory WithResiliencyPolicy(Action<Humidifier.ResilienceHub.ResiliencyPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResilienceHub.ResiliencyPolicyFactory(resourceName, resourceFactoryAction));
        ResiliencyPolicyFactories.Add(factory);
        return factory;
    }

    public ResourceExplorer2.DefaultViewAssociationFactory WithDefaultViewAssociation(Action<Humidifier.ResourceExplorer2.DefaultViewAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ResourceExplorer2.DefaultViewAssociationFactory(resourceName, resourceFactoryAction));
        DefaultViewAssociationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotFactory WithRobot(Action<Humidifier.RoboMaker.Robot> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotFactory(resourceName, resourceFactoryAction));
        RobotFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotApplicationFactory WithRobotApplication(Action<Humidifier.RoboMaker.RobotApplication> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotApplicationFactory(resourceName, resourceFactoryAction));
        RobotApplicationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.RobotApplicationVersionFactory WithRobotApplicationVersion(Action<Humidifier.RoboMaker.RobotApplicationVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.RobotApplicationVersionFactory(resourceName, resourceFactoryAction));
        RobotApplicationVersionFactories.Add(factory);
        return factory;
    }

    public RoboMaker.SimulationApplicationFactory WithSimulationApplication(Action<Humidifier.RoboMaker.SimulationApplication> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.SimulationApplicationFactory(resourceName, resourceFactoryAction));
        SimulationApplicationFactories.Add(factory);
        return factory;
    }

    public RoboMaker.SimulationApplicationVersionFactory WithSimulationApplicationVersion(Action<Humidifier.RoboMaker.SimulationApplicationVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RoboMaker.SimulationApplicationVersionFactory(resourceName, resourceFactoryAction));
        SimulationApplicationVersionFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.CRLFactory WithCRL(Action<Humidifier.RolesAnywhere.CRL> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.CRLFactory(resourceName, resourceFactoryAction));
        CRLFactories.Add(factory);
        return factory;
    }

    public RolesAnywhere.TrustAnchorFactory WithTrustAnchor(Action<Humidifier.RolesAnywhere.TrustAnchor> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new RolesAnywhere.TrustAnchorFactory(resourceName, resourceFactoryAction));
        TrustAnchorFactories.Add(factory);
        return factory;
    }

    public Route53.CidrCollectionFactory WithCidrCollection(Action<Humidifier.Route53.CidrCollection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.CidrCollectionFactory(resourceName, resourceFactoryAction));
        CidrCollectionFactories.Add(factory);
        return factory;
    }

    public Route53.DNSSECFactory WithDNSSEC(Action<Humidifier.Route53.DNSSEC> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.DNSSECFactory(resourceName, resourceFactoryAction));
        DNSSECFactories.Add(factory);
        return factory;
    }

    public Route53.HealthCheckFactory WithHealthCheck(Action<Humidifier.Route53.HealthCheck> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.HealthCheckFactory(resourceName, resourceFactoryAction));
        HealthCheckFactories.Add(factory);
        return factory;
    }

    public Route53.HostedZoneFactory WithHostedZone(Action<Humidifier.Route53.HostedZone> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.HostedZoneFactory(resourceName, resourceFactoryAction));
        HostedZoneFactories.Add(factory);
        return factory;
    }

    public Route53.KeySigningKeyFactory WithKeySigningKey(Action<Humidifier.Route53.KeySigningKey> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.KeySigningKeyFactory(resourceName, resourceFactoryAction));
        KeySigningKeyFactories.Add(factory);
        return factory;
    }

    public Route53.RecordSetFactory WithRecordSet(Action<Humidifier.Route53.RecordSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.RecordSetFactory(resourceName, resourceFactoryAction));
        RecordSetFactories.Add(factory);
        return factory;
    }

    public Route53.RecordSetGroupFactory WithRecordSetGroup(Action<Humidifier.Route53.RecordSetGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53.RecordSetGroupFactory(resourceName, resourceFactoryAction));
        RecordSetGroupFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileAssociationFactory WithProfileAssociation(Action<Humidifier.Route53Profiles.ProfileAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileAssociationFactory(resourceName, resourceFactoryAction));
        ProfileAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Profiles.ProfileResourceAssociationFactory WithProfileResourceAssociation(Action<Humidifier.Route53Profiles.ProfileResourceAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Profiles.ProfileResourceAssociationFactory(resourceName, resourceFactoryAction));
        ProfileResourceAssociationFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.ControlPanelFactory WithControlPanel(Action<Humidifier.Route53RecoveryControl.ControlPanel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.ControlPanelFactory(resourceName, resourceFactoryAction));
        ControlPanelFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.RoutingControlFactory WithRoutingControl(Action<Humidifier.Route53RecoveryControl.RoutingControl> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.RoutingControlFactory(resourceName, resourceFactoryAction));
        RoutingControlFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryControl.SafetyRuleFactory WithSafetyRule(Action<Humidifier.Route53RecoveryControl.SafetyRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryControl.SafetyRuleFactory(resourceName, resourceFactoryAction));
        SafetyRuleFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.CellFactory WithCell(Action<Humidifier.Route53RecoveryReadiness.Cell> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.CellFactory(resourceName, resourceFactoryAction));
        CellFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.ReadinessCheckFactory WithReadinessCheck(Action<Humidifier.Route53RecoveryReadiness.ReadinessCheck> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.ReadinessCheckFactory(resourceName, resourceFactoryAction));
        ReadinessCheckFactories.Add(factory);
        return factory;
    }

    public Route53RecoveryReadiness.RecoveryGroupFactory WithRecoveryGroup(Action<Humidifier.Route53RecoveryReadiness.RecoveryGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53RecoveryReadiness.RecoveryGroupFactory(resourceName, resourceFactoryAction));
        RecoveryGroupFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallDomainListFactory WithFirewallDomainList(Action<Humidifier.Route53Resolver.FirewallDomainList> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallDomainListFactory(resourceName, resourceFactoryAction));
        FirewallDomainListFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallRuleGroupFactory WithFirewallRuleGroup(Action<Humidifier.Route53Resolver.FirewallRuleGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallRuleGroupFactory(resourceName, resourceFactoryAction));
        FirewallRuleGroupFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.FirewallRuleGroupAssociationFactory WithFirewallRuleGroupAssociation(Action<Humidifier.Route53Resolver.FirewallRuleGroupAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.FirewallRuleGroupAssociationFactory(resourceName, resourceFactoryAction));
        FirewallRuleGroupAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.OutpostResolverFactory WithOutpostResolver(Action<Humidifier.Route53Resolver.OutpostResolver> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.OutpostResolverFactory(resourceName, resourceFactoryAction));
        OutpostResolverFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverConfigFactory WithResolverConfig(Action<Humidifier.Route53Resolver.ResolverConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverConfigFactory(resourceName, resourceFactoryAction));
        ResolverConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverDNSSECConfigFactory WithResolverDNSSECConfig(Action<Humidifier.Route53Resolver.ResolverDNSSECConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverDNSSECConfigFactory(resourceName, resourceFactoryAction));
        ResolverDNSSECConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverEndpointFactory WithResolverEndpoint(Action<Humidifier.Route53Resolver.ResolverEndpoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverEndpointFactory(resourceName, resourceFactoryAction));
        ResolverEndpointFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverQueryLoggingConfigFactory WithResolverQueryLoggingConfig(Action<Humidifier.Route53Resolver.ResolverQueryLoggingConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverQueryLoggingConfigFactory(resourceName, resourceFactoryAction));
        ResolverQueryLoggingConfigFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverQueryLoggingConfigAssociationFactory WithResolverQueryLoggingConfigAssociation(Action<Humidifier.Route53Resolver.ResolverQueryLoggingConfigAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverQueryLoggingConfigAssociationFactory(resourceName, resourceFactoryAction));
        ResolverQueryLoggingConfigAssociationFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverRuleFactory WithResolverRule(Action<Humidifier.Route53Resolver.ResolverRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverRuleFactory(resourceName, resourceFactoryAction));
        ResolverRuleFactories.Add(factory);
        return factory;
    }

    public Route53Resolver.ResolverRuleAssociationFactory WithResolverRuleAssociation(Action<Humidifier.Route53Resolver.ResolverRuleAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Route53Resolver.ResolverRuleAssociationFactory(resourceName, resourceFactoryAction));
        ResolverRuleAssociationFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantFactory WithAccessGrant(Action<Humidifier.S3.AccessGrant> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantFactory(resourceName, resourceFactoryAction));
        AccessGrantFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantsInstanceFactory WithAccessGrantsInstance(Action<Humidifier.S3.AccessGrantsInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantsInstanceFactory(resourceName, resourceFactoryAction));
        AccessGrantsInstanceFactories.Add(factory);
        return factory;
    }

    public S3.AccessGrantsLocationFactory WithAccessGrantsLocation(Action<Humidifier.S3.AccessGrantsLocation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.AccessGrantsLocationFactory(resourceName, resourceFactoryAction));
        AccessGrantsLocationFactories.Add(factory);
        return factory;
    }

    public S3.BucketPolicyFactory WithS3BucketPolicy(Action<Humidifier.S3.BucketPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3BucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3Express.BucketPolicyFactory WithS3ExpressBucketPolicy(Action<Humidifier.S3Express.BucketPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Express.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3ExpressBucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3Outposts.BucketPolicyFactory WithS3OutpostsBucketPolicy(Action<Humidifier.S3Outposts.BucketPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Outposts.BucketPolicyFactory(resourceName, resourceFactoryAction));
        S3OutpostsBucketPolicyFactories.Add(factory);
        return factory;
    }

    public S3.MultiRegionAccessPointFactory WithMultiRegionAccessPoint(Action<Humidifier.S3.MultiRegionAccessPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.MultiRegionAccessPointFactory(resourceName, resourceFactoryAction));
        MultiRegionAccessPointFactories.Add(factory);
        return factory;
    }

    public S3.MultiRegionAccessPointPolicyFactory WithMultiRegionAccessPointPolicy(Action<Humidifier.S3.MultiRegionAccessPointPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.MultiRegionAccessPointPolicyFactory(resourceName, resourceFactoryAction));
        MultiRegionAccessPointPolicyFactories.Add(factory);
        return factory;
    }

    public S3.StorageLensFactory WithStorageLens(Action<Humidifier.S3.StorageLens> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.StorageLensFactory(resourceName, resourceFactoryAction));
        StorageLensFactories.Add(factory);
        return factory;
    }

    public S3.StorageLensGroupFactory WithStorageLensGroup(Action<Humidifier.S3.StorageLensGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3.StorageLensGroupFactory(resourceName, resourceFactoryAction));
        StorageLensGroupFactories.Add(factory);
        return factory;
    }

    public S3Express.DirectoryBucketFactory WithDirectoryBucket(Action<Humidifier.S3Express.DirectoryBucket> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3Express.DirectoryBucketFactory(resourceName, resourceFactoryAction));
        DirectoryBucketFactories.Add(factory);
        return factory;
    }

    public S3ObjectLambda.AccessPointPolicyFactory WithAccessPointPolicy(Action<Humidifier.S3ObjectLambda.AccessPointPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new S3ObjectLambda.AccessPointPolicyFactory(resourceName, resourceFactoryAction));
        AccessPointPolicyFactories.Add(factory);
        return factory;
    }

    public SES.ContactListFactory WithContactList(Action<Humidifier.SES.ContactList> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ContactListFactory(resourceName, resourceFactoryAction));
        ContactListFactories.Add(factory);
        return factory;
    }

    public SES.EmailIdentityFactory WithEmailIdentity(Action<Humidifier.SES.EmailIdentity> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.EmailIdentityFactory(resourceName, resourceFactoryAction));
        EmailIdentityFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerAddonInstanceFactory WithMailManagerAddonInstance(Action<Humidifier.SES.MailManagerAddonInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerAddonInstanceFactory(resourceName, resourceFactoryAction));
        MailManagerAddonInstanceFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerAddonSubscriptionFactory WithMailManagerAddonSubscription(Action<Humidifier.SES.MailManagerAddonSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerAddonSubscriptionFactory(resourceName, resourceFactoryAction));
        MailManagerAddonSubscriptionFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerArchiveFactory WithMailManagerArchive(Action<Humidifier.SES.MailManagerArchive> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerArchiveFactory(resourceName, resourceFactoryAction));
        MailManagerArchiveFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerIngressPointFactory WithMailManagerIngressPoint(Action<Humidifier.SES.MailManagerIngressPoint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerIngressPointFactory(resourceName, resourceFactoryAction));
        MailManagerIngressPointFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerRelayFactory WithMailManagerRelay(Action<Humidifier.SES.MailManagerRelay> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerRelayFactory(resourceName, resourceFactoryAction));
        MailManagerRelayFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerRuleSetFactory WithMailManagerRuleSet(Action<Humidifier.SES.MailManagerRuleSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerRuleSetFactory(resourceName, resourceFactoryAction));
        MailManagerRuleSetFactories.Add(factory);
        return factory;
    }

    public SES.MailManagerTrafficPolicyFactory WithMailManagerTrafficPolicy(Action<Humidifier.SES.MailManagerTrafficPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.MailManagerTrafficPolicyFactory(resourceName, resourceFactoryAction));
        MailManagerTrafficPolicyFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptFilterFactory WithReceiptFilter(Action<Humidifier.SES.ReceiptFilter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptFilterFactory(resourceName, resourceFactoryAction));
        ReceiptFilterFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptRuleFactory WithReceiptRule(Action<Humidifier.SES.ReceiptRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptRuleFactory(resourceName, resourceFactoryAction));
        ReceiptRuleFactories.Add(factory);
        return factory;
    }

    public SES.ReceiptRuleSetFactory WithReceiptRuleSet(Action<Humidifier.SES.ReceiptRuleSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.ReceiptRuleSetFactory(resourceName, resourceFactoryAction));
        ReceiptRuleSetFactories.Add(factory);
        return factory;
    }

    public SES.VdmAttributesFactory WithVdmAttributes(Action<Humidifier.SES.VdmAttributes> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SES.VdmAttributesFactory(resourceName, resourceFactoryAction));
        VdmAttributesFactories.Add(factory);
        return factory;
    }

    public SNS.SubscriptionFactory WithSubscription(Action<Humidifier.SNS.Subscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.SubscriptionFactory(resourceName, resourceFactoryAction));
        SubscriptionFactories.Add(factory);
        return factory;
    }

    public SNS.TopicInlinePolicyFactory WithTopicInlinePolicy(Action<Humidifier.SNS.TopicInlinePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicInlinePolicyFactory(resourceName, resourceFactoryAction));
        TopicInlinePolicyFactories.Add(factory);
        return factory;
    }

    public SNS.TopicPolicyFactory WithTopicPolicy(Action<Humidifier.SNS.TopicPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SNS.TopicPolicyFactory(resourceName, resourceFactoryAction));
        TopicPolicyFactories.Add(factory);
        return factory;
    }

    public SQS.QueueInlinePolicyFactory WithQueueInlinePolicy(Action<Humidifier.SQS.QueueInlinePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueueInlinePolicyFactory(resourceName, resourceFactoryAction));
        QueueInlinePolicyFactories.Add(factory);
        return factory;
    }

    public SQS.QueuePolicyFactory WithQueuePolicy(Action<Humidifier.SQS.QueuePolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SQS.QueuePolicyFactory(resourceName, resourceFactoryAction));
        QueuePolicyFactories.Add(factory);
        return factory;
    }

    public SSM.AssociationFactory WithAssociation(Action<Humidifier.SSM.Association> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.AssociationFactory(resourceName, resourceFactoryAction));
        AssociationFactories.Add(factory);
        return factory;
    }

    public SSM.DocumentFactory WithDocument(Action<Humidifier.SSM.Document> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.DocumentFactory(resourceName, resourceFactoryAction));
        DocumentFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowFactory WithMaintenanceWindow(Action<Humidifier.SSM.MaintenanceWindow> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowTargetFactory WithMaintenanceWindowTarget(Action<Humidifier.SSM.MaintenanceWindowTarget> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowTargetFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowTargetFactories.Add(factory);
        return factory;
    }

    public SSM.MaintenanceWindowTaskFactory WithMaintenanceWindowTask(Action<Humidifier.SSM.MaintenanceWindowTask> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.MaintenanceWindowTaskFactory(resourceName, resourceFactoryAction));
        MaintenanceWindowTaskFactories.Add(factory);
        return factory;
    }

    public SSM.ParameterFactory WithParameter(Action<Humidifier.SSM.Parameter> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ParameterFactory(resourceName, resourceFactoryAction));
        ParameterFactories.Add(factory);
        return factory;
    }

    public SSM.PatchBaselineFactory WithPatchBaseline(Action<Humidifier.SSM.PatchBaseline> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.PatchBaselineFactory(resourceName, resourceFactoryAction));
        PatchBaselineFactories.Add(factory);
        return factory;
    }

    public SSM.ResourceDataSyncFactory WithResourceDataSync(Action<Humidifier.SSM.ResourceDataSync> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSM.ResourceDataSyncFactory(resourceName, resourceFactoryAction));
        ResourceDataSyncFactories.Add(factory);
        return factory;
    }

    public SSMContacts.ContactFactory WithContact(Action<Humidifier.SSMContacts.Contact> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.ContactFactory(resourceName, resourceFactoryAction));
        ContactFactories.Add(factory);
        return factory;
    }

    public SSMContacts.ContactChannelFactory WithContactChannel(Action<Humidifier.SSMContacts.ContactChannel> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.ContactChannelFactory(resourceName, resourceFactoryAction));
        ContactChannelFactories.Add(factory);
        return factory;
    }

    public SSMContacts.PlanFactory WithPlan(Action<Humidifier.SSMContacts.Plan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.PlanFactory(resourceName, resourceFactoryAction));
        PlanFactories.Add(factory);
        return factory;
    }

    public SSMContacts.RotationFactory WithRotation(Action<Humidifier.SSMContacts.Rotation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMContacts.RotationFactory(resourceName, resourceFactoryAction));
        RotationFactories.Add(factory);
        return factory;
    }

    public SSMIncidents.ReplicationSetFactory WithReplicationSet(Action<Humidifier.SSMIncidents.ReplicationSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMIncidents.ReplicationSetFactory(resourceName, resourceFactoryAction));
        ReplicationSetFactories.Add(factory);
        return factory;
    }

    public SSMIncidents.ResponsePlanFactory WithResponsePlan(Action<Humidifier.SSMIncidents.ResponsePlan> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMIncidents.ResponsePlanFactory(resourceName, resourceFactoryAction));
        ResponsePlanFactories.Add(factory);
        return factory;
    }

    public SSMQuickSetup.ConfigurationManagerFactory WithConfigurationManager(Action<Humidifier.SSMQuickSetup.ConfigurationManager> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSMQuickSetup.ConfigurationManagerFactory(resourceName, resourceFactoryAction));
        ConfigurationManagerFactories.Add(factory);
        return factory;
    }

    public SSO.ApplicationAssignmentFactory WithApplicationAssignment(Action<Humidifier.SSO.ApplicationAssignment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.ApplicationAssignmentFactory(resourceName, resourceFactoryAction));
        ApplicationAssignmentFactories.Add(factory);
        return factory;
    }

    public SSO.AssignmentFactory WithAssignment(Action<Humidifier.SSO.Assignment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.AssignmentFactory(resourceName, resourceFactoryAction));
        AssignmentFactories.Add(factory);
        return factory;
    }

    public SSO.InstanceAccessControlAttributeConfigurationFactory WithInstanceAccessControlAttributeConfiguration(Action<Humidifier.SSO.InstanceAccessControlAttributeConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.InstanceAccessControlAttributeConfigurationFactory(resourceName, resourceFactoryAction));
        InstanceAccessControlAttributeConfigurationFactories.Add(factory);
        return factory;
    }

    public SSO.PermissionSetFactory WithPermissionSet(Action<Humidifier.SSO.PermissionSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SSO.PermissionSetFactory(resourceName, resourceFactoryAction));
        PermissionSetFactories.Add(factory);
        return factory;
    }

    public SageMaker.AppImageConfigFactory WithAppImageConfig(Action<Humidifier.SageMaker.AppImageConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.AppImageConfigFactory(resourceName, resourceFactoryAction));
        AppImageConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.CodeRepositoryFactory WithCodeRepository(Action<Humidifier.SageMaker.CodeRepository> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.CodeRepositoryFactory(resourceName, resourceFactoryAction));
        CodeRepositoryFactories.Add(factory);
        return factory;
    }

    public SageMaker.DataQualityJobDefinitionFactory WithDataQualityJobDefinition(Action<Humidifier.SageMaker.DataQualityJobDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DataQualityJobDefinitionFactory(resourceName, resourceFactoryAction));
        DataQualityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.DeviceFleetFactory WithDeviceFleet(Action<Humidifier.SageMaker.DeviceFleet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.DeviceFleetFactory(resourceName, resourceFactoryAction));
        DeviceFleetFactories.Add(factory);
        return factory;
    }

    public SageMaker.EndpointConfigFactory WithEndpointConfig(Action<Humidifier.SageMaker.EndpointConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.EndpointConfigFactory(resourceName, resourceFactoryAction));
        EndpointConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.FeatureGroupFactory WithFeatureGroup(Action<Humidifier.SageMaker.FeatureGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.FeatureGroupFactory(resourceName, resourceFactoryAction));
        FeatureGroupFactories.Add(factory);
        return factory;
    }

    public SageMaker.ImageVersionFactory WithImageVersion(Action<Humidifier.SageMaker.ImageVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ImageVersionFactory(resourceName, resourceFactoryAction));
        ImageVersionFactories.Add(factory);
        return factory;
    }

    public SageMaker.InferenceComponentFactory WithInferenceComponent(Action<Humidifier.SageMaker.InferenceComponent> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.InferenceComponentFactory(resourceName, resourceFactoryAction));
        InferenceComponentFactories.Add(factory);
        return factory;
    }

    public SageMaker.InferenceExperimentFactory WithInferenceExperiment(Action<Humidifier.SageMaker.InferenceExperiment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.InferenceExperimentFactory(resourceName, resourceFactoryAction));
        InferenceExperimentFactories.Add(factory);
        return factory;
    }

    public SageMaker.MlflowTrackingServerFactory WithMlflowTrackingServer(Action<Humidifier.SageMaker.MlflowTrackingServer> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.MlflowTrackingServerFactory(resourceName, resourceFactoryAction));
        MlflowTrackingServerFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelBiasJobDefinitionFactory WithModelBiasJobDefinition(Action<Humidifier.SageMaker.ModelBiasJobDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelBiasJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelBiasJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelCardFactory WithModelCard(Action<Humidifier.SageMaker.ModelCard> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelCardFactory(resourceName, resourceFactoryAction));
        ModelCardFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelExplainabilityJobDefinitionFactory WithModelExplainabilityJobDefinition(Action<Humidifier.SageMaker.ModelExplainabilityJobDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelExplainabilityJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelExplainabilityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelPackageFactory WithModelPackage(Action<Humidifier.SageMaker.ModelPackage> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelPackageFactory(resourceName, resourceFactoryAction));
        ModelPackageFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelPackageGroupFactory WithModelPackageGroup(Action<Humidifier.SageMaker.ModelPackageGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelPackageGroupFactory(resourceName, resourceFactoryAction));
        ModelPackageGroupFactories.Add(factory);
        return factory;
    }

    public SageMaker.ModelQualityJobDefinitionFactory WithModelQualityJobDefinition(Action<Humidifier.SageMaker.ModelQualityJobDefinition> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.ModelQualityJobDefinitionFactory(resourceName, resourceFactoryAction));
        ModelQualityJobDefinitionFactories.Add(factory);
        return factory;
    }

    public SageMaker.MonitoringScheduleFactory WithMonitoringSchedule(Action<Humidifier.SageMaker.MonitoringSchedule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.MonitoringScheduleFactory(resourceName, resourceFactoryAction));
        MonitoringScheduleFactories.Add(factory);
        return factory;
    }

    public SageMaker.NotebookInstanceFactory WithNotebookInstance(Action<Humidifier.SageMaker.NotebookInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.NotebookInstanceFactory(resourceName, resourceFactoryAction));
        NotebookInstanceFactories.Add(factory);
        return factory;
    }

    public SageMaker.NotebookInstanceLifecycleConfigFactory WithNotebookInstanceLifecycleConfig(Action<Humidifier.SageMaker.NotebookInstanceLifecycleConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.NotebookInstanceLifecycleConfigFactory(resourceName, resourceFactoryAction));
        NotebookInstanceLifecycleConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.SpaceFactory WithSpace(Action<Humidifier.SageMaker.Space> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.SpaceFactory(resourceName, resourceFactoryAction));
        SpaceFactories.Add(factory);
        return factory;
    }

    public SageMaker.StudioLifecycleConfigFactory WithStudioLifecycleConfig(Action<Humidifier.SageMaker.StudioLifecycleConfig> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.StudioLifecycleConfigFactory(resourceName, resourceFactoryAction));
        StudioLifecycleConfigFactories.Add(factory);
        return factory;
    }

    public SageMaker.WorkteamFactory WithWorkteam(Action<Humidifier.SageMaker.Workteam> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SageMaker.WorkteamFactory(resourceName, resourceFactoryAction));
        WorkteamFactories.Add(factory);
        return factory;
    }

    public Scheduler.ScheduleGroupFactory WithScheduleGroup(Action<Humidifier.Scheduler.ScheduleGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Scheduler.ScheduleGroupFactory(resourceName, resourceFactoryAction));
        ScheduleGroupFactories.Add(factory);
        return factory;
    }

    public SecretsManager.RotationScheduleFactory WithRotationSchedule(Action<Humidifier.SecretsManager.RotationSchedule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.RotationScheduleFactory(resourceName, resourceFactoryAction));
        RotationScheduleFactories.Add(factory);
        return factory;
    }

    public SecretsManager.SecretFactory WithSecret(Action<Humidifier.SecretsManager.Secret> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.SecretFactory(resourceName, resourceFactoryAction));
        SecretFactories.Add(factory);
        return factory;
    }

    public SecretsManager.SecretTargetAttachmentFactory WithSecretTargetAttachment(Action<Humidifier.SecretsManager.SecretTargetAttachment> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecretsManager.SecretTargetAttachmentFactory(resourceName, resourceFactoryAction));
        SecretTargetAttachmentFactories.Add(factory);
        return factory;
    }

    public SecurityHub.AutomationRuleFactory WithAutomationRule(Action<Humidifier.SecurityHub.AutomationRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.AutomationRuleFactory(resourceName, resourceFactoryAction));
        AutomationRuleFactories.Add(factory);
        return factory;
    }

    public SecurityHub.ConfigurationPolicyFactory WithConfigurationPolicy(Action<Humidifier.SecurityHub.ConfigurationPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.ConfigurationPolicyFactory(resourceName, resourceFactoryAction));
        ConfigurationPolicyFactories.Add(factory);
        return factory;
    }

    public SecurityHub.DelegatedAdminFactory WithDelegatedAdmin(Action<Humidifier.SecurityHub.DelegatedAdmin> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.DelegatedAdminFactory(resourceName, resourceFactoryAction));
        DelegatedAdminFactories.Add(factory);
        return factory;
    }

    public SecurityHub.FindingAggregatorFactory WithFindingAggregator(Action<Humidifier.SecurityHub.FindingAggregator> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.FindingAggregatorFactory(resourceName, resourceFactoryAction));
        FindingAggregatorFactories.Add(factory);
        return factory;
    }

    public SecurityHub.HubFactory WithHub(Action<Humidifier.SecurityHub.Hub> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.HubFactory(resourceName, resourceFactoryAction));
        HubFactories.Add(factory);
        return factory;
    }

    public SecurityHub.InsightFactory WithInsight(Action<Humidifier.SecurityHub.Insight> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.InsightFactory(resourceName, resourceFactoryAction));
        InsightFactories.Add(factory);
        return factory;
    }

    public SecurityHub.OrganizationConfigurationFactory WithOrganizationConfiguration(Action<Humidifier.SecurityHub.OrganizationConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.OrganizationConfigurationFactory(resourceName, resourceFactoryAction));
        OrganizationConfigurationFactories.Add(factory);
        return factory;
    }

    public SecurityHub.PolicyAssociationFactory WithPolicyAssociation(Action<Humidifier.SecurityHub.PolicyAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.PolicyAssociationFactory(resourceName, resourceFactoryAction));
        PolicyAssociationFactories.Add(factory);
        return factory;
    }

    public SecurityHub.ProductSubscriptionFactory WithProductSubscription(Action<Humidifier.SecurityHub.ProductSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.ProductSubscriptionFactory(resourceName, resourceFactoryAction));
        ProductSubscriptionFactories.Add(factory);
        return factory;
    }

    public SecurityHub.SecurityControlFactory WithSecurityControl(Action<Humidifier.SecurityHub.SecurityControl> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.SecurityControlFactory(resourceName, resourceFactoryAction));
        SecurityControlFactories.Add(factory);
        return factory;
    }

    public SecurityHub.StandardFactory WithStandard(Action<Humidifier.SecurityHub.Standard> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityHub.StandardFactory(resourceName, resourceFactoryAction));
        StandardFactories.Add(factory);
        return factory;
    }

    public SecurityLake.AwsLogSourceFactory WithAwsLogSource(Action<Humidifier.SecurityLake.AwsLogSource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.AwsLogSourceFactory(resourceName, resourceFactoryAction));
        AwsLogSourceFactories.Add(factory);
        return factory;
    }

    public SecurityLake.DataLakeFactory WithDataLake(Action<Humidifier.SecurityLake.DataLake> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.DataLakeFactory(resourceName, resourceFactoryAction));
        DataLakeFactories.Add(factory);
        return factory;
    }

    public SecurityLake.SubscriberFactory WithSubscriber(Action<Humidifier.SecurityLake.Subscriber> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.SubscriberFactory(resourceName, resourceFactoryAction));
        SubscriberFactories.Add(factory);
        return factory;
    }

    public SecurityLake.SubscriberNotificationFactory WithSubscriberNotification(Action<Humidifier.SecurityLake.SubscriberNotification> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SecurityLake.SubscriberNotificationFactory(resourceName, resourceFactoryAction));
        SubscriberNotificationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.AcceptedPortfolioShareFactory WithAcceptedPortfolioShare(Action<Humidifier.ServiceCatalog.AcceptedPortfolioShare> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.AcceptedPortfolioShareFactory(resourceName, resourceFactoryAction));
        AcceptedPortfolioShareFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.CloudFormationProductFactory WithCloudFormationProduct(Action<Humidifier.ServiceCatalog.CloudFormationProduct> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.CloudFormationProductFactory(resourceName, resourceFactoryAction));
        CloudFormationProductFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.CloudFormationProvisionedProductFactory WithCloudFormationProvisionedProduct(Action<Humidifier.ServiceCatalog.CloudFormationProvisionedProduct> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.CloudFormationProvisionedProductFactory(resourceName, resourceFactoryAction));
        CloudFormationProvisionedProductFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchNotificationConstraintFactory WithLaunchNotificationConstraint(Action<Humidifier.ServiceCatalog.LaunchNotificationConstraint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchNotificationConstraintFactory(resourceName, resourceFactoryAction));
        LaunchNotificationConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchRoleConstraintFactory WithLaunchRoleConstraint(Action<Humidifier.ServiceCatalog.LaunchRoleConstraint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchRoleConstraintFactory(resourceName, resourceFactoryAction));
        LaunchRoleConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.LaunchTemplateConstraintFactory WithLaunchTemplateConstraint(Action<Humidifier.ServiceCatalog.LaunchTemplateConstraint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.LaunchTemplateConstraintFactory(resourceName, resourceFactoryAction));
        LaunchTemplateConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioFactory WithPortfolio(Action<Humidifier.ServiceCatalog.Portfolio> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioFactory(resourceName, resourceFactoryAction));
        PortfolioFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioPrincipalAssociationFactory WithPortfolioPrincipalAssociation(Action<Humidifier.ServiceCatalog.PortfolioPrincipalAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioPrincipalAssociationFactory(resourceName, resourceFactoryAction));
        PortfolioPrincipalAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioProductAssociationFactory WithPortfolioProductAssociation(Action<Humidifier.ServiceCatalog.PortfolioProductAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioProductAssociationFactory(resourceName, resourceFactoryAction));
        PortfolioProductAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.PortfolioShareFactory WithPortfolioShare(Action<Humidifier.ServiceCatalog.PortfolioShare> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.PortfolioShareFactory(resourceName, resourceFactoryAction));
        PortfolioShareFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ResourceUpdateConstraintFactory WithResourceUpdateConstraint(Action<Humidifier.ServiceCatalog.ResourceUpdateConstraint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ResourceUpdateConstraintFactory(resourceName, resourceFactoryAction));
        ResourceUpdateConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ServiceActionFactory WithServiceAction(Action<Humidifier.ServiceCatalog.ServiceAction> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ServiceActionFactory(resourceName, resourceFactoryAction));
        ServiceActionFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.ServiceActionAssociationFactory WithServiceActionAssociation(Action<Humidifier.ServiceCatalog.ServiceActionAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.ServiceActionAssociationFactory(resourceName, resourceFactoryAction));
        ServiceActionAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.StackSetConstraintFactory WithStackSetConstraint(Action<Humidifier.ServiceCatalog.StackSetConstraint> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.StackSetConstraintFactory(resourceName, resourceFactoryAction));
        StackSetConstraintFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.TagOptionFactory WithTagOption(Action<Humidifier.ServiceCatalog.TagOption> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.TagOptionFactory(resourceName, resourceFactoryAction));
        TagOptionFactories.Add(factory);
        return factory;
    }

    public ServiceCatalog.TagOptionAssociationFactory WithTagOptionAssociation(Action<Humidifier.ServiceCatalog.TagOptionAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalog.TagOptionAssociationFactory(resourceName, resourceFactoryAction));
        TagOptionAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.AttributeGroupFactory WithAttributeGroup(Action<Humidifier.ServiceCatalogAppRegistry.AttributeGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.AttributeGroupFactory(resourceName, resourceFactoryAction));
        AttributeGroupFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.AttributeGroupAssociationFactory WithAttributeGroupAssociation(Action<Humidifier.ServiceCatalogAppRegistry.AttributeGroupAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.AttributeGroupAssociationFactory(resourceName, resourceFactoryAction));
        AttributeGroupAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceCatalogAppRegistry.ResourceAssociationFactory WithResourceAssociation(Action<Humidifier.ServiceCatalogAppRegistry.ResourceAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceCatalogAppRegistry.ResourceAssociationFactory(resourceName, resourceFactoryAction));
        ResourceAssociationFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.HttpNamespaceFactory WithHttpNamespace(Action<Humidifier.ServiceDiscovery.HttpNamespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.HttpNamespaceFactory(resourceName, resourceFactoryAction));
        HttpNamespaceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.PrivateDnsNamespaceFactory WithPrivateDnsNamespace(Action<Humidifier.ServiceDiscovery.PrivateDnsNamespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.PrivateDnsNamespaceFactory(resourceName, resourceFactoryAction));
        PrivateDnsNamespaceFactories.Add(factory);
        return factory;
    }

    public ServiceDiscovery.PublicDnsNamespaceFactory WithPublicDnsNamespace(Action<Humidifier.ServiceDiscovery.PublicDnsNamespace> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ServiceDiscovery.PublicDnsNamespaceFactory(resourceName, resourceFactoryAction));
        PublicDnsNamespaceFactories.Add(factory);
        return factory;
    }

    public Shield.DRTAccessFactory WithDRTAccess(Action<Humidifier.Shield.DRTAccess> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.DRTAccessFactory(resourceName, resourceFactoryAction));
        DRTAccessFactories.Add(factory);
        return factory;
    }

    public Shield.ProactiveEngagementFactory WithProactiveEngagement(Action<Humidifier.Shield.ProactiveEngagement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProactiveEngagementFactory(resourceName, resourceFactoryAction));
        ProactiveEngagementFactories.Add(factory);
        return factory;
    }

    public Shield.ProtectionFactory WithProtection(Action<Humidifier.Shield.Protection> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProtectionFactory(resourceName, resourceFactoryAction));
        ProtectionFactories.Add(factory);
        return factory;
    }

    public Shield.ProtectionGroupFactory WithProtectionGroup(Action<Humidifier.Shield.ProtectionGroup> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Shield.ProtectionGroupFactory(resourceName, resourceFactoryAction));
        ProtectionGroupFactories.Add(factory);
        return factory;
    }

    public Signer.ProfilePermissionFactory WithProfilePermission(Action<Humidifier.Signer.ProfilePermission> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Signer.ProfilePermissionFactory(resourceName, resourceFactoryAction));
        ProfilePermissionFactories.Add(factory);
        return factory;
    }

    public Signer.SigningProfileFactory WithSigningProfile(Action<Humidifier.Signer.SigningProfile> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Signer.SigningProfileFactory(resourceName, resourceFactoryAction));
        SigningProfileFactories.Add(factory);
        return factory;
    }

    public SimSpaceWeaver.SimulationFactory WithSimulation(Action<Humidifier.SimSpaceWeaver.Simulation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SimSpaceWeaver.SimulationFactory(resourceName, resourceFactoryAction));
        SimulationFactories.Add(factory);
        return factory;
    }

    public StepFunctions.ActivityFactory WithActivity(Action<Humidifier.StepFunctions.Activity> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.ActivityFactory(resourceName, resourceFactoryAction));
        ActivityFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineFactory WithStateMachine(Action<Humidifier.StepFunctions.StateMachine> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineFactory(resourceName, resourceFactoryAction));
        StateMachineFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineAliasFactory WithStateMachineAlias(Action<Humidifier.StepFunctions.StateMachineAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineAliasFactory(resourceName, resourceFactoryAction));
        StateMachineAliasFactories.Add(factory);
        return factory;
    }

    public StepFunctions.StateMachineVersionFactory WithStateMachineVersion(Action<Humidifier.StepFunctions.StateMachineVersion> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new StepFunctions.StateMachineVersionFactory(resourceName, resourceFactoryAction));
        StateMachineVersionFactories.Add(factory);
        return factory;
    }

    public SupportApp.AccountAliasFactory WithAccountAlias(Action<Humidifier.SupportApp.AccountAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.AccountAliasFactory(resourceName, resourceFactoryAction));
        AccountAliasFactories.Add(factory);
        return factory;
    }

    public SupportApp.SlackWorkspaceConfigurationFactory WithSlackWorkspaceConfiguration(Action<Humidifier.SupportApp.SlackWorkspaceConfiguration> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new SupportApp.SlackWorkspaceConfigurationFactory(resourceName, resourceFactoryAction));
        SlackWorkspaceConfigurationFactories.Add(factory);
        return factory;
    }

    public Synthetics.CanaryFactory WithCanary(Action<Humidifier.Synthetics.Canary> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Synthetics.CanaryFactory(resourceName, resourceFactoryAction));
        CanaryFactories.Add(factory);
        return factory;
    }

    public Timestream.InfluxDBInstanceFactory WithInfluxDBInstance(Action<Humidifier.Timestream.InfluxDBInstance> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.InfluxDBInstanceFactory(resourceName, resourceFactoryAction));
        InfluxDBInstanceFactories.Add(factory);
        return factory;
    }

    public Timestream.ScheduledQueryFactory WithScheduledQuery(Action<Humidifier.Timestream.ScheduledQuery> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Timestream.ScheduledQueryFactory(resourceName, resourceFactoryAction));
        ScheduledQueryFactories.Add(factory);
        return factory;
    }

    public Transfer.AgreementFactory WithAgreement(Action<Humidifier.Transfer.Agreement> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Transfer.AgreementFactory(resourceName, resourceFactoryAction));
        AgreementFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.IdentitySourceFactory WithIdentitySource(Action<Humidifier.VerifiedPermissions.IdentitySource> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.IdentitySourceFactory(resourceName, resourceFactoryAction));
        IdentitySourceFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyStoreFactory WithPolicyStore(Action<Humidifier.VerifiedPermissions.PolicyStore> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyStoreFactory(resourceName, resourceFactoryAction));
        PolicyStoreFactories.Add(factory);
        return factory;
    }

    public VerifiedPermissions.PolicyTemplateFactory WithPolicyTemplate(Action<Humidifier.VerifiedPermissions.PolicyTemplate> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VerifiedPermissions.PolicyTemplateFactory(resourceName, resourceFactoryAction));
        PolicyTemplateFactories.Add(factory);
        return factory;
    }

    public VpcLattice.AccessLogSubscriptionFactory WithAccessLogSubscription(Action<Humidifier.VpcLattice.AccessLogSubscription> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.AccessLogSubscriptionFactory(resourceName, resourceFactoryAction));
        AccessLogSubscriptionFactories.Add(factory);
        return factory;
    }

    public VpcLattice.AuthPolicyFactory WithAuthPolicy(Action<Humidifier.VpcLattice.AuthPolicy> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.AuthPolicyFactory(resourceName, resourceFactoryAction));
        AuthPolicyFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkFactory WithServiceNetwork(Action<Humidifier.VpcLattice.ServiceNetwork> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkFactory(resourceName, resourceFactoryAction));
        ServiceNetworkFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkServiceAssociationFactory WithServiceNetworkServiceAssociation(Action<Humidifier.VpcLattice.ServiceNetworkServiceAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkServiceAssociationFactory(resourceName, resourceFactoryAction));
        ServiceNetworkServiceAssociationFactories.Add(factory);
        return factory;
    }

    public VpcLattice.ServiceNetworkVpcAssociationFactory WithServiceNetworkVpcAssociation(Action<Humidifier.VpcLattice.ServiceNetworkVpcAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new VpcLattice.ServiceNetworkVpcAssociationFactory(resourceName, resourceFactoryAction));
        ServiceNetworkVpcAssociationFactories.Add(factory);
        return factory;
    }

    public WAF.ByteMatchSetFactory WithWAFByteMatchSet(Action<Humidifier.WAF.ByteMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.ByteMatchSetFactory(resourceName, resourceFactoryAction));
        WAFByteMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.ByteMatchSetFactory WithWAFRegionalByteMatchSet(Action<Humidifier.WAFRegional.ByteMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.ByteMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalByteMatchSetFactories.Add(factory);
        return factory;
    }

    public WAF.SizeConstraintSetFactory WithWAFSizeConstraintSet(Action<Humidifier.WAF.SizeConstraintSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.SizeConstraintSetFactory(resourceName, resourceFactoryAction));
        WAFSizeConstraintSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.SizeConstraintSetFactory WithWAFRegionalSizeConstraintSet(Action<Humidifier.WAFRegional.SizeConstraintSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.SizeConstraintSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalSizeConstraintSetFactories.Add(factory);
        return factory;
    }

    public WAF.SqlInjectionMatchSetFactory WithWAFSqlInjectionMatchSet(Action<Humidifier.WAF.SqlInjectionMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.SqlInjectionMatchSetFactory(resourceName, resourceFactoryAction));
        WAFSqlInjectionMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.SqlInjectionMatchSetFactory WithWAFRegionalSqlInjectionMatchSet(Action<Humidifier.WAFRegional.SqlInjectionMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.SqlInjectionMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalSqlInjectionMatchSetFactories.Add(factory);
        return factory;
    }

    public WAF.WebACLFactory WithWAFWebACL(Action<Humidifier.WAF.WebACL> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.WebACLFactory(resourceName, resourceFactoryAction));
        WAFWebACLFactories.Add(factory);
        return factory;
    }

    public WAFRegional.WebACLFactory WithWAFRegionalWebACL(Action<Humidifier.WAFRegional.WebACL> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.WebACLFactory(resourceName, resourceFactoryAction));
        WAFRegionalWebACLFactories.Add(factory);
        return factory;
    }

    public WAFv2.WebACLFactory WithWAFv2WebACL(Action<Humidifier.WAFv2.WebACL> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.WebACLFactory(resourceName, resourceFactoryAction));
        WAFv2WebACLFactories.Add(factory);
        return factory;
    }

    public WAF.XssMatchSetFactory WithWAFXssMatchSet(Action<Humidifier.WAF.XssMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAF.XssMatchSetFactory(resourceName, resourceFactoryAction));
        WAFXssMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.XssMatchSetFactory WithWAFRegionalXssMatchSet(Action<Humidifier.WAFRegional.XssMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.XssMatchSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalXssMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.GeoMatchSetFactory WithGeoMatchSet(Action<Humidifier.WAFRegional.GeoMatchSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.GeoMatchSetFactory(resourceName, resourceFactoryAction));
        GeoMatchSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RateBasedRuleFactory WithRateBasedRule(Action<Humidifier.WAFRegional.RateBasedRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RateBasedRuleFactory(resourceName, resourceFactoryAction));
        RateBasedRuleFactories.Add(factory);
        return factory;
    }

    public WAFRegional.RegexPatternSetFactory WithWAFRegionalRegexPatternSet(Action<Humidifier.WAFRegional.RegexPatternSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.RegexPatternSetFactory(resourceName, resourceFactoryAction));
        WAFRegionalRegexPatternSetFactories.Add(factory);
        return factory;
    }

    public WAFv2.RegexPatternSetFactory WithWAFv2RegexPatternSet(Action<Humidifier.WAFv2.RegexPatternSet> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.RegexPatternSetFactory(resourceName, resourceFactoryAction));
        WAFv2RegexPatternSetFactories.Add(factory);
        return factory;
    }

    public WAFRegional.WebACLAssociationFactory WithWAFRegionalWebACLAssociation(Action<Humidifier.WAFRegional.WebACLAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFRegional.WebACLAssociationFactory(resourceName, resourceFactoryAction));
        WAFRegionalWebACLAssociationFactories.Add(factory);
        return factory;
    }

    public WAFv2.WebACLAssociationFactory WithWAFv2WebACLAssociation(Action<Humidifier.WAFv2.WebACLAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WAFv2.WebACLAssociationFactory(resourceName, resourceFactoryAction));
        WAFv2WebACLAssociationFactories.Add(factory);
        return factory;
    }

    public Wisdom.AssistantFactory WithAssistant(Action<Humidifier.Wisdom.Assistant> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.AssistantFactory(resourceName, resourceFactoryAction));
        AssistantFactories.Add(factory);
        return factory;
    }

    public Wisdom.AssistantAssociationFactory WithAssistantAssociation(Action<Humidifier.Wisdom.AssistantAssociation> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new Wisdom.AssistantAssociationFactory(resourceName, resourceFactoryAction));
        AssistantAssociationFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.ConnectionAliasFactory WithConnectionAlias(Action<Humidifier.WorkSpaces.ConnectionAlias> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.ConnectionAliasFactory(resourceName, resourceFactoryAction));
        ConnectionAliasFactories.Add(factory);
        return factory;
    }

    public WorkSpaces.WorkspacesPoolFactory WithWorkspacesPool(Action<Humidifier.WorkSpaces.WorkspacesPool> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpaces.WorkspacesPoolFactory(resourceName, resourceFactoryAction));
        WorkspacesPoolFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.BrowserSettingsFactory WithBrowserSettings(Action<Humidifier.WorkSpacesWeb.BrowserSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.BrowserSettingsFactory(resourceName, resourceFactoryAction));
        BrowserSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.IdentityProviderFactory WithIdentityProvider(Action<Humidifier.WorkSpacesWeb.IdentityProvider> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.IdentityProviderFactory(resourceName, resourceFactoryAction));
        IdentityProviderFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.IpAccessSettingsFactory WithIpAccessSettings(Action<Humidifier.WorkSpacesWeb.IpAccessSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.IpAccessSettingsFactory(resourceName, resourceFactoryAction));
        IpAccessSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.NetworkSettingsFactory WithNetworkSettings(Action<Humidifier.WorkSpacesWeb.NetworkSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.NetworkSettingsFactory(resourceName, resourceFactoryAction));
        NetworkSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.UserAccessLoggingSettingsFactory WithUserAccessLoggingSettings(Action<Humidifier.WorkSpacesWeb.UserAccessLoggingSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.UserAccessLoggingSettingsFactory(resourceName, resourceFactoryAction));
        UserAccessLoggingSettingsFactories.Add(factory);
        return factory;
    }

    public WorkSpacesWeb.UserSettingsFactory WithUserSettings(Action<Humidifier.WorkSpacesWeb.UserSettings> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new WorkSpacesWeb.UserSettingsFactory(resourceName, resourceFactoryAction));
        UserSettingsFactories.Add(factory);
        return factory;
    }

    public XRay.SamplingRuleFactory WithSamplingRule(Action<Humidifier.XRay.SamplingRule> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new XRay.SamplingRuleFactory(resourceName, resourceFactoryAction));
        SamplingRuleFactories.Add(factory);
        return factory;
    }

    public ASK.SkillFactory WithSkill(Action<Humidifier.ASK.Skill> resourceFactoryAction = null, string resourceName = null)
    {
        var factory = this.CreateSubFactory(() => new ASK.SkillFactory(resourceName, resourceFactoryAction));
        SkillFactories.Add(factory);
        return factory;
    }

    public override void CreateChildren(Stack result)
    {
        this.DoForAllProperties<IStackFactory>(childFactory =>
        {
            childFactory.InvokeBuild();
        });
    }

}
