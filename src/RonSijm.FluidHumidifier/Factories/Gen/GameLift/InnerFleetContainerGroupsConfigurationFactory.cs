// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.GameLift;

public class InnerFleetContainerGroupsConfigurationFactory(Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration>
{

    internal InnerFleetConnectionPortRangeFactory ConnectionPortRangeFactory { get; set; }

    internal InnerFleetContainerGroupsPerInstanceFactory ContainerGroupsPerInstanceFactory { get; set; }

    protected override Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration Create()
    {
        var containerGroupsConfigurationResult = CreateContainerGroupsConfiguration();
        factoryAction?.Invoke(containerGroupsConfigurationResult);

        return containerGroupsConfigurationResult;
    }

    private Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration CreateContainerGroupsConfiguration()
    {
        var containerGroupsConfigurationResult = new Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration();

        return containerGroupsConfigurationResult;
    }
    public override void CreateChildren(Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration result)
    {
        base.CreateChildren(result);

        result.ConnectionPortRange ??= ConnectionPortRangeFactory?.Build();
        result.ContainerGroupsPerInstance ??= ContainerGroupsPerInstanceFactory?.Build();
    }

} // End Of Class

public static class InnerFleetContainerGroupsConfigurationFactoryExtensions
{
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange(this InnerFleetContainerGroupsConfigurationFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null)
    {
        parentFactory.ConnectionPortRangeFactory = new InnerFleetConnectionPortRangeFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConnectionPortRangeFactory);
    }

    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance(this InnerFleetContainerGroupsConfigurationFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null)
    {
        parentFactory.ContainerGroupsPerInstanceFactory = new InnerFleetContainerGroupsPerInstanceFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ContainerGroupsPerInstanceFactory);
    }

    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, T4, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3, T4>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, T4, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3, T4>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, T4, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, T4, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory, InnerFleetConnectionPortRangeFactory> WithConnectionPortRange<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ConnectionPortRange> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionPortRange(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, T4, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3, T4>(this CombinedResult<InnerFleetContainerGroupsConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, T4, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3, T4>(this CombinedResult<T1, InnerFleetContainerGroupsConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, T4, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerFleetContainerGroupsConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, T4, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory, InnerFleetContainerGroupsPerInstanceFactory> WithContainerGroupsPerInstance<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsPerInstance> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsPerInstance(combinedResult.T5, subFactoryAction));
}
