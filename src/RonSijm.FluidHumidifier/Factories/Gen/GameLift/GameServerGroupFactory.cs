// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.GameLift;

public class GameServerGroupFactory(string resourceName = null, Action<Humidifier.GameLift.GameServerGroup> factoryAction = null) : ResourceFactory<Humidifier.GameLift.GameServerGroup>(resourceName)
{

    internal List<InnerGameServerGroupInstanceDefinitionFactory> InstanceDefinitionsFactories { get; set; } = [];

    internal InnerGameServerGroupAutoScalingPolicyFactory AutoScalingPolicyFactory { get; set; }

    internal InnerGameServerGroupLaunchTemplateFactory LaunchTemplateFactory { get; set; }

    protected override Humidifier.GameLift.GameServerGroup Create()
    {
        var gameServerGroupResult = CreateGameServerGroup();
        factoryAction?.Invoke(gameServerGroupResult);

        return gameServerGroupResult;
    }

    private Humidifier.GameLift.GameServerGroup CreateGameServerGroup()
    {
        var gameServerGroupResult = new Humidifier.GameLift.GameServerGroup
        {
            GivenName = InputResourceName,
        };

        return gameServerGroupResult;
    }
    public override void CreateChildren(Humidifier.GameLift.GameServerGroup result)
    {
        base.CreateChildren(result);

        result.InstanceDefinitions = InstanceDefinitionsFactories.Any() ? InstanceDefinitionsFactories.Select(x => x.Build()).ToList() : null;
        result.AutoScalingPolicy ??= AutoScalingPolicyFactory?.Build();
        result.LaunchTemplate ??= LaunchTemplateFactory?.Build();
    }

} // End Of Class

public static class GameServerGroupFactoryExtensions
{
    public static CombinedResult<GameServerGroupFactory, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions(this GameServerGroupFactory parentFactory, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null)
    {
        var factory = new InnerGameServerGroupInstanceDefinitionFactory(subFactoryAction);
        parentFactory.InstanceDefinitionsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<GameServerGroupFactory, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy(this GameServerGroupFactory parentFactory, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null)
    {
        parentFactory.AutoScalingPolicyFactory = new InnerGameServerGroupAutoScalingPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AutoScalingPolicyFactory);
    }

    public static CombinedResult<GameServerGroupFactory, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate(this GameServerGroupFactory parentFactory, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null)
    {
        parentFactory.LaunchTemplateFactory = new InnerGameServerGroupLaunchTemplateFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LaunchTemplateFactory);
    }

    public static CombinedResult<GameServerGroupFactory, T1, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1>(this CombinedResult<GameServerGroupFactory, T1> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1>(this CombinedResult<T1, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2>(this CombinedResult<GameServerGroupFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2>(this CombinedResult<T1, GameServerGroupFactory, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2>(this CombinedResult<T1, T2, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3>(this CombinedResult<GameServerGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3>(this CombinedResult<T1, GameServerGroupFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3>(this CombinedResult<T1, T2, GameServerGroupFactory, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3>(this CombinedResult<T1, T2, T3, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, T4, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3, T4>(this CombinedResult<GameServerGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, T4, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3, T4>(this CombinedResult<T1, GameServerGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, T4, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3, T4>(this CombinedResult<T1, T2, GameServerGroupFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, T4, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, GameServerGroupFactory, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, GameServerGroupFactory, InnerGameServerGroupInstanceDefinitionFactory> WithInstanceDefinitions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.InstanceDefinition> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInstanceDefinitions(combinedResult.T5, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1>(this CombinedResult<GameServerGroupFactory, T1> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1>(this CombinedResult<T1, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2>(this CombinedResult<GameServerGroupFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2>(this CombinedResult<T1, GameServerGroupFactory, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2>(this CombinedResult<T1, T2, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3>(this CombinedResult<GameServerGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3>(this CombinedResult<T1, GameServerGroupFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, GameServerGroupFactory, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, T4, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3, T4>(this CombinedResult<GameServerGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, T4, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, GameServerGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, T4, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, GameServerGroupFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, T4, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, GameServerGroupFactory, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, GameServerGroupFactory, InnerGameServerGroupAutoScalingPolicyFactory> WithAutoScalingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.AutoScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAutoScalingPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1>(this CombinedResult<GameServerGroupFactory, T1> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1>(this CombinedResult<T1, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T2, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2>(this CombinedResult<GameServerGroupFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2>(this CombinedResult<T1, GameServerGroupFactory, T2> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2>(this CombinedResult<T1, T2, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T3, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3>(this CombinedResult<GameServerGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3>(this CombinedResult<T1, GameServerGroupFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3>(this CombinedResult<T1, T2, GameServerGroupFactory, T3> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3>(this CombinedResult<T1, T2, T3, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T4, subFactoryAction));
    public static CombinedResult<GameServerGroupFactory, T1, T2, T3, T4, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3, T4>(this CombinedResult<GameServerGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, GameServerGroupFactory, T2, T3, T4, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3, T4>(this CombinedResult<T1, GameServerGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, GameServerGroupFactory, T3, T4, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3, T4>(this CombinedResult<T1, T2, GameServerGroupFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, GameServerGroupFactory, T4, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, GameServerGroupFactory, T4> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, GameServerGroupFactory, InnerGameServerGroupLaunchTemplateFactory> WithLaunchTemplate<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, GameServerGroupFactory> combinedResult, Action<Humidifier.GameLift.GameServerGroupTypes.LaunchTemplate> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLaunchTemplate(combinedResult.T5, subFactoryAction));
}
