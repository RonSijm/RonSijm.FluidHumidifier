// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.GameLift;

public class InnerContainerGroupDefinitionContainerDefinitionFactory(Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition> factoryAction = null) : SubResourceFactory<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition>
{

    internal InnerContainerGroupDefinitionMemoryLimitsFactory MemoryLimitsFactory { get; set; }

    internal InnerContainerGroupDefinitionContainerHealthCheckFactory HealthCheckFactory { get; set; }

    internal InnerContainerGroupDefinitionPortConfigurationFactory PortConfigurationFactory { get; set; }

    protected override Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition Create()
    {
        var containerDefinitionResult = CreateContainerDefinition();
        factoryAction?.Invoke(containerDefinitionResult);

        return containerDefinitionResult;
    }

    private Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition CreateContainerDefinition()
    {
        var containerDefinitionResult = new Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition();

        return containerDefinitionResult;
    }
    public override void CreateChildren(Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerDefinition result)
    {
        base.CreateChildren(result);

        result.MemoryLimits ??= MemoryLimitsFactory?.Build();
        result.HealthCheck ??= HealthCheckFactory?.Build();
        result.PortConfiguration ??= PortConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerContainerGroupDefinitionContainerDefinitionFactoryExtensions
{
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits(this InnerContainerGroupDefinitionContainerDefinitionFactory parentFactory, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null)
    {
        parentFactory.MemoryLimitsFactory = new InnerContainerGroupDefinitionMemoryLimitsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.MemoryLimitsFactory);
    }

    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck(this InnerContainerGroupDefinitionContainerDefinitionFactory parentFactory, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null)
    {
        parentFactory.HealthCheckFactory = new InnerContainerGroupDefinitionContainerHealthCheckFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.HealthCheckFactory);
    }

    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration(this InnerContainerGroupDefinitionContainerDefinitionFactory parentFactory, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null)
    {
        parentFactory.PortConfigurationFactory = new InnerContainerGroupDefinitionPortConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.PortConfigurationFactory);
    }

    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, WithMemoryLimits(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, WithMemoryLimits(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3, T4>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3, T4>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionMemoryLimitsFactory> WithMemoryLimits<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.MemoryLimits> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithMemoryLimits(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionContainerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.ContainerHealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithPortConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithPortConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerContainerGroupDefinitionContainerDefinitionFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerContainerGroupDefinitionContainerDefinitionFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerContainerGroupDefinitionContainerDefinitionFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerContainerGroupDefinitionContainerDefinitionFactory, T4> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory, InnerContainerGroupDefinitionPortConfigurationFactory> WithPortConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerContainerGroupDefinitionContainerDefinitionFactory> combinedResult, Action<Humidifier.GameLift.ContainerGroupDefinitionTypes.PortConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPortConfiguration(combinedResult.T5, subFactoryAction));
}
