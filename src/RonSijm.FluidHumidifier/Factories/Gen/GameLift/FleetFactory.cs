// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.GameLift;

public class FleetFactory(string resourceName = null, Action<Humidifier.GameLift.Fleet> factoryAction = null) : ResourceFactory<Humidifier.GameLift.Fleet>(resourceName)
{

    internal List<InnerFleetScalingPolicyFactory> ScalingPoliciesFactories { get; set; } = [];

    internal List<InnerFleetIpPermissionFactory> EC2InboundPermissionsFactories { get; set; } = [];

    internal List<InnerFleetLocationConfigurationFactory> LocationsFactories { get; set; } = [];

    internal InnerFleetContainerGroupsConfigurationFactory ContainerGroupsConfigurationFactory { get; set; }

    internal InnerFleetAnywhereConfigurationFactory AnywhereConfigurationFactory { get; set; }

    internal InnerFleetCertificateConfigurationFactory CertificateConfigurationFactory { get; set; }

    internal InnerFleetRuntimeConfigurationFactory RuntimeConfigurationFactory { get; set; }

    internal InnerFleetResourceCreationLimitPolicyFactory ResourceCreationLimitPolicyFactory { get; set; }

    protected override Humidifier.GameLift.Fleet Create()
    {
        var fleetResult = CreateFleet();
        factoryAction?.Invoke(fleetResult);

        return fleetResult;
    }

    private Humidifier.GameLift.Fleet CreateFleet()
    {
        var fleetResult = new Humidifier.GameLift.Fleet
        {
            GivenName = InputResourceName,
        };

        return fleetResult;
    }
    public override void CreateChildren(Humidifier.GameLift.Fleet result)
    {
        base.CreateChildren(result);

        result.ScalingPolicies = ScalingPoliciesFactories.Any() ? ScalingPoliciesFactories.Select(x => x.Build()).ToList() : null;
        result.EC2InboundPermissions = EC2InboundPermissionsFactories.Any() ? EC2InboundPermissionsFactories.Select(x => x.Build()).ToList() : null;
        result.Locations = LocationsFactories.Any() ? LocationsFactories.Select(x => x.Build()).ToList() : null;
        result.ContainerGroupsConfiguration ??= ContainerGroupsConfigurationFactory?.Build();
        result.AnywhereConfiguration ??= AnywhereConfigurationFactory?.Build();
        result.CertificateConfiguration ??= CertificateConfigurationFactory?.Build();
        result.RuntimeConfiguration ??= RuntimeConfigurationFactory?.Build();
        result.ResourceCreationLimitPolicy ??= ResourceCreationLimitPolicyFactory?.Build();
    }

} // End Of Class

public static class FleetFactoryExtensions
{
    public static CombinedResult<FleetFactory, InnerFleetScalingPolicyFactory> WithScalingPolicies(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null)
    {
        var factory = new InnerFleetScalingPolicyFactory(subFactoryAction);
        parentFactory.ScalingPoliciesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<FleetFactory, InnerFleetIpPermissionFactory> WithEC2InboundPermissions(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null)
    {
        var factory = new InnerFleetIpPermissionFactory(subFactoryAction);
        parentFactory.EC2InboundPermissionsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<FleetFactory, InnerFleetLocationConfigurationFactory> WithLocations(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null)
    {
        var factory = new InnerFleetLocationConfigurationFactory(subFactoryAction);
        parentFactory.LocationsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<FleetFactory, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null)
    {
        parentFactory.ContainerGroupsConfigurationFactory = new InnerFleetContainerGroupsConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ContainerGroupsConfigurationFactory);
    }

    public static CombinedResult<FleetFactory, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null)
    {
        parentFactory.AnywhereConfigurationFactory = new InnerFleetAnywhereConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AnywhereConfigurationFactory);
    }

    public static CombinedResult<FleetFactory, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null)
    {
        parentFactory.CertificateConfigurationFactory = new InnerFleetCertificateConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.CertificateConfigurationFactory);
    }

    public static CombinedResult<FleetFactory, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null)
    {
        parentFactory.RuntimeConfigurationFactory = new InnerFleetRuntimeConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RuntimeConfigurationFactory);
    }

    public static CombinedResult<FleetFactory, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy(this FleetFactory parentFactory, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null)
    {
        parentFactory.ResourceCreationLimitPolicyFactory = new InnerFleetResourceCreationLimitPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ResourceCreationLimitPolicyFactory);
    }

    public static CombinedResult<FleetFactory, T1, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithScalingPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithScalingPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetScalingPolicyFactory> WithScalingPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ScalingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithScalingPolicies(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetIpPermissionFactory> WithEC2InboundPermissions<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.IpPermission> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEC2InboundPermissions(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetLocationConfigurationFactory> WithLocations<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithLocations(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetLocationConfigurationFactory> WithLocations<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithLocations(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetLocationConfigurationFactory> WithLocations<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.LocationConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLocations(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetContainerGroupsConfigurationFactory> WithContainerGroupsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ContainerGroupsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithContainerGroupsConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetAnywhereConfigurationFactory> WithAnywhereConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.AnywhereConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAnywhereConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetCertificateConfigurationFactory> WithCertificateConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.CertificateConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCertificateConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetRuntimeConfigurationFactory> WithRuntimeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.RuntimeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRuntimeConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1>(this CombinedResult<FleetFactory, T1> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1>(this CombinedResult<T1, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2>(this CombinedResult<FleetFactory, T1, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2>(this CombinedResult<T1, FleetFactory, T2> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2>(this CombinedResult<T1, T2, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3>(this CombinedResult<FleetFactory, T1, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3>(this CombinedResult<T1, FleetFactory, T2, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3>(this CombinedResult<T1, T2, FleetFactory, T3> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<FleetFactory, T1, T2, T3, T4, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3, T4>(this CombinedResult<FleetFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, FleetFactory, T2, T3, T4, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3, T4>(this CombinedResult<T1, FleetFactory, T2, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, FleetFactory, T3, T4, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, FleetFactory, T3, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, FleetFactory, T4, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, FleetFactory, T4> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, FleetFactory, InnerFleetResourceCreationLimitPolicyFactory> WithResourceCreationLimitPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, FleetFactory> combinedResult, Action<Humidifier.GameLift.FleetTypes.ResourceCreationLimitPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithResourceCreationLimitPolicy(combinedResult.T5, subFactoryAction));
}
