// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.KinesisAnalytics;

public class InnerApplicationInputFactory(Action<Humidifier.KinesisAnalytics.ApplicationTypes.Input> factoryAction = null) : SubResourceFactory<Humidifier.KinesisAnalytics.ApplicationTypes.Input>
{

    internal InnerApplicationInputSchemaFactory InputSchemaFactory { get; set; }

    internal InnerApplicationKinesisStreamsInputFactory KinesisStreamsInputFactory { get; set; }

    internal InnerApplicationKinesisFirehoseInputFactory KinesisFirehoseInputFactory { get; set; }

    internal InnerApplicationInputProcessingConfigurationFactory InputProcessingConfigurationFactory { get; set; }

    internal InnerApplicationInputParallelismFactory InputParallelismFactory { get; set; }

    protected override Humidifier.KinesisAnalytics.ApplicationTypes.Input Create()
    {
        var inputResult = CreateInput();
        factoryAction?.Invoke(inputResult);

        return inputResult;
    }

    private Humidifier.KinesisAnalytics.ApplicationTypes.Input CreateInput()
    {
        var inputResult = new Humidifier.KinesisAnalytics.ApplicationTypes.Input();

        return inputResult;
    }
    public override void CreateChildren(Humidifier.KinesisAnalytics.ApplicationTypes.Input result)
    {
        base.CreateChildren(result);

        result.InputSchema ??= InputSchemaFactory?.Build();
        result.KinesisStreamsInput ??= KinesisStreamsInputFactory?.Build();
        result.KinesisFirehoseInput ??= KinesisFirehoseInputFactory?.Build();
        result.InputProcessingConfiguration ??= InputProcessingConfigurationFactory?.Build();
        result.InputParallelism ??= InputParallelismFactory?.Build();
    }

} // End Of Class

public static class InnerApplicationInputFactoryExtensions
{
    public static CombinedResult<InnerApplicationInputFactory, InnerApplicationInputSchemaFactory> WithInputSchema(this InnerApplicationInputFactory parentFactory, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null)
    {
        parentFactory.InputSchemaFactory = new InnerApplicationInputSchemaFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.InputSchemaFactory);
    }

    public static CombinedResult<InnerApplicationInputFactory, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput(this InnerApplicationInputFactory parentFactory, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null)
    {
        parentFactory.KinesisStreamsInputFactory = new InnerApplicationKinesisStreamsInputFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.KinesisStreamsInputFactory);
    }

    public static CombinedResult<InnerApplicationInputFactory, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput(this InnerApplicationInputFactory parentFactory, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null)
    {
        parentFactory.KinesisFirehoseInputFactory = new InnerApplicationKinesisFirehoseInputFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.KinesisFirehoseInputFactory);
    }

    public static CombinedResult<InnerApplicationInputFactory, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration(this InnerApplicationInputFactory parentFactory, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null)
    {
        parentFactory.InputProcessingConfigurationFactory = new InnerApplicationInputProcessingConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.InputProcessingConfigurationFactory);
    }

    public static CombinedResult<InnerApplicationInputFactory, InnerApplicationInputParallelismFactory> WithInputParallelism(this InnerApplicationInputFactory parentFactory, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null)
    {
        parentFactory.InputParallelismFactory = new InnerApplicationInputParallelismFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.InputParallelismFactory);
    }

    public static CombinedResult<InnerApplicationInputFactory, T1, InnerApplicationInputSchemaFactory> WithInputSchema<T1>(this CombinedResult<InnerApplicationInputFactory, T1> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, InnerApplicationInputSchemaFactory> WithInputSchema<T1>(this CombinedResult<T1, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2>(this CombinedResult<InnerApplicationInputFactory, T1, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2>(this CombinedResult<T1, InnerApplicationInputFactory, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2>(this CombinedResult<T1, T2, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3, T4>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3, T4>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory, InnerApplicationInputSchemaFactory> WithInputSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputSchema(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1>(this CombinedResult<InnerApplicationInputFactory, T1> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1>(this CombinedResult<T1, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2>(this CombinedResult<InnerApplicationInputFactory, T1, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2>(this CombinedResult<T1, InnerApplicationInputFactory, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2>(this CombinedResult<T1, T2, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3, T4>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3, T4>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory, InnerApplicationKinesisStreamsInputFactory> WithKinesisStreamsInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisStreamsInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisStreamsInput(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1>(this CombinedResult<InnerApplicationInputFactory, T1> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1>(this CombinedResult<T1, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2>(this CombinedResult<InnerApplicationInputFactory, T1, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2>(this CombinedResult<T1, InnerApplicationInputFactory, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2>(this CombinedResult<T1, T2, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3, T4>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3, T4>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory, InnerApplicationKinesisFirehoseInputFactory> WithKinesisFirehoseInput<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.KinesisFirehoseInput> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKinesisFirehoseInput(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1>(this CombinedResult<InnerApplicationInputFactory, T1> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1>(this CombinedResult<T1, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2>(this CombinedResult<InnerApplicationInputFactory, T1, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2>(this CombinedResult<T1, InnerApplicationInputFactory, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory, InnerApplicationInputProcessingConfigurationFactory> WithInputProcessingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputProcessingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputProcessingConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, InnerApplicationInputParallelismFactory> WithInputParallelism<T1>(this CombinedResult<InnerApplicationInputFactory, T1> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputParallelism(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, InnerApplicationInputParallelismFactory> WithInputParallelism<T1>(this CombinedResult<T1, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, WithInputParallelism(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2>(this CombinedResult<InnerApplicationInputFactory, T1, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2>(this CombinedResult<T1, InnerApplicationInputFactory, T2> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2>(this CombinedResult<T1, T2, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3, T4>(this CombinedResult<InnerApplicationInputFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3, T4>(this CombinedResult<T1, InnerApplicationInputFactory, T2, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerApplicationInputFactory, T3, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerApplicationInputFactory, T4> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory, InnerApplicationInputParallelismFactory> WithInputParallelism<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerApplicationInputFactory> combinedResult, Action<Humidifier.KinesisAnalytics.ApplicationTypes.InputParallelism> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithInputParallelism(combinedResult.T5, subFactoryAction));
}
