// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.ECS;

public class InnerTaskDefinitionVolumeFactory(Action<Humidifier.ECS.TaskDefinitionTypes.Volume> factoryAction = null) : SubResourceFactory<Humidifier.ECS.TaskDefinitionTypes.Volume>
{

    internal InnerTaskDefinitionEFSVolumeConfigurationFactory EFSVolumeConfigurationFactory { get; set; }

    internal InnerTaskDefinitionHostVolumePropertiesFactory HostFactory { get; set; }

    internal InnerTaskDefinitionDockerVolumeConfigurationFactory DockerVolumeConfigurationFactory { get; set; }

    internal InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory FSxWindowsFileServerVolumeConfigurationFactory { get; set; }

    protected override Humidifier.ECS.TaskDefinitionTypes.Volume Create()
    {
        var volumeResult = CreateVolume();
        factoryAction?.Invoke(volumeResult);

        return volumeResult;
    }

    private Humidifier.ECS.TaskDefinitionTypes.Volume CreateVolume()
    {
        var volumeResult = new Humidifier.ECS.TaskDefinitionTypes.Volume();

        return volumeResult;
    }
    public override void CreateChildren(Humidifier.ECS.TaskDefinitionTypes.Volume result)
    {
        base.CreateChildren(result);

        result.EFSVolumeConfiguration ??= EFSVolumeConfigurationFactory?.Build();
        result.Host ??= HostFactory?.Build();
        result.DockerVolumeConfiguration ??= DockerVolumeConfigurationFactory?.Build();
        result.FSxWindowsFileServerVolumeConfiguration ??= FSxWindowsFileServerVolumeConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerTaskDefinitionVolumeFactoryExtensions
{
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration(this InnerTaskDefinitionVolumeFactory parentFactory, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null)
    {
        parentFactory.EFSVolumeConfigurationFactory = new InnerTaskDefinitionEFSVolumeConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.EFSVolumeConfigurationFactory);
    }

    public static CombinedResult<InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost(this InnerTaskDefinitionVolumeFactory parentFactory, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null)
    {
        parentFactory.HostFactory = new InnerTaskDefinitionHostVolumePropertiesFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.HostFactory);
    }

    public static CombinedResult<InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration(this InnerTaskDefinitionVolumeFactory parentFactory, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null)
    {
        parentFactory.DockerVolumeConfigurationFactory = new InnerTaskDefinitionDockerVolumeConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.DockerVolumeConfigurationFactory);
    }

    public static CombinedResult<InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration(this InnerTaskDefinitionVolumeFactory parentFactory, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null)
    {
        parentFactory.FSxWindowsFileServerVolumeConfigurationFactory = new InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.FSxWindowsFileServerVolumeConfigurationFactory);
    }

    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionEFSVolumeConfigurationFactory> WithEFSVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.EFSVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithEFSVolumeConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, WithHost(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, WithHost(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3, T4>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3, T4>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionHostVolumePropertiesFactory> WithHost<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.HostVolumeProperties> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHost(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionDockerVolumeConfigurationFactory> WithDockerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.DockerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDockerVolumeConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerTaskDefinitionVolumeFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerTaskDefinitionVolumeFactory, T2, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerTaskDefinitionVolumeFactory, T3, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerTaskDefinitionVolumeFactory, T4> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory, InnerTaskDefinitionFSxWindowsFileServerVolumeConfigurationFactory> WithFSxWindowsFileServerVolumeConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerTaskDefinitionVolumeFactory> combinedResult, Action<Humidifier.ECS.TaskDefinitionTypes.FSxWindowsFileServerVolumeConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFSxWindowsFileServerVolumeConfiguration(combinedResult.T5, subFactoryAction));
}
