// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.CodePipeline;

public class InnerPipelineStageDeclarationFactory(Action<Humidifier.CodePipeline.PipelineTypes.StageDeclaration> factoryAction = null) : SubResourceFactory<Humidifier.CodePipeline.PipelineTypes.StageDeclaration>
{

    internal InnerPipelineBeforeEntryConditionsFactory BeforeEntryFactory { get; set; }

    internal InnerPipelineSuccessConditionsFactory OnSuccessFactory { get; set; }

    internal InnerPipelineFailureConditionsFactory OnFailureFactory { get; set; }

    protected override Humidifier.CodePipeline.PipelineTypes.StageDeclaration Create()
    {
        var stageDeclarationResult = CreateStageDeclaration();
        factoryAction?.Invoke(stageDeclarationResult);

        return stageDeclarationResult;
    }

    private Humidifier.CodePipeline.PipelineTypes.StageDeclaration CreateStageDeclaration()
    {
        var stageDeclarationResult = new Humidifier.CodePipeline.PipelineTypes.StageDeclaration();

        return stageDeclarationResult;
    }
    public override void CreateChildren(Humidifier.CodePipeline.PipelineTypes.StageDeclaration result)
    {
        base.CreateChildren(result);

        result.BeforeEntry ??= BeforeEntryFactory?.Build();
        result.OnSuccess ??= OnSuccessFactory?.Build();
        result.OnFailure ??= OnFailureFactory?.Build();
    }

} // End Of Class

public static class InnerPipelineStageDeclarationFactoryExtensions
{
    public static CombinedResult<InnerPipelineStageDeclarationFactory, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry(this InnerPipelineStageDeclarationFactory parentFactory, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null)
    {
        parentFactory.BeforeEntryFactory = new InnerPipelineBeforeEntryConditionsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.BeforeEntryFactory);
    }

    public static CombinedResult<InnerPipelineStageDeclarationFactory, InnerPipelineSuccessConditionsFactory> WithOnSuccess(this InnerPipelineStageDeclarationFactory parentFactory, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null)
    {
        parentFactory.OnSuccessFactory = new InnerPipelineSuccessConditionsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.OnSuccessFactory);
    }

    public static CombinedResult<InnerPipelineStageDeclarationFactory, InnerPipelineFailureConditionsFactory> WithOnFailure(this InnerPipelineStageDeclarationFactory parentFactory, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null)
    {
        parentFactory.OnFailureFactory = new InnerPipelineFailureConditionsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.OnFailureFactory);
    }

    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithBeforeEntry(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithBeforeEntry(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3, T4>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory, InnerPipelineBeforeEntryConditionsFactory> WithBeforeEntry<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.BeforeEntryConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithBeforeEntry(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithOnSuccess(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithOnSuccess(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3, T4>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory, InnerPipelineSuccessConditionsFactory> WithOnSuccess<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.SuccessConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnSuccess(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, InnerPipelineFailureConditionsFactory> WithOnFailure<T1>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithOnFailure(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, InnerPipelineFailureConditionsFactory> WithOnFailure<T1>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, WithOnFailure(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3, T4>(this CombinedResult<InnerPipelineStageDeclarationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3, T4>(this CombinedResult<T1, InnerPipelineStageDeclarationFactory, T2, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerPipelineStageDeclarationFactory, T3, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerPipelineStageDeclarationFactory, T4> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory, InnerPipelineFailureConditionsFactory> WithOnFailure<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerPipelineStageDeclarationFactory> combinedResult, Action<Humidifier.CodePipeline.PipelineTypes.FailureConditions> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithOnFailure(combinedResult.T5, subFactoryAction));
}
