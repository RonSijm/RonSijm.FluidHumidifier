// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.ElasticLoadBalancing;

public class LoadBalancerFactory(string resourceName = null, Action<Humidifier.ElasticLoadBalancing.LoadBalancer> factoryAction = null) : ResourceFactory<Humidifier.ElasticLoadBalancing.LoadBalancer>(resourceName)
{

    internal List<InnerLoadBalancerAppCookieStickinessPolicyFactory> AppCookieStickinessPolicyFactories { get; set; } = [];

    internal List<InnerLoadBalancerLBCookieStickinessPolicyFactory> LBCookieStickinessPolicyFactories { get; set; } = [];

    internal List<InnerLoadBalancerListenersFactory> ListenersFactories { get; set; } = [];

    internal List<InnerLoadBalancerPoliciesFactory> PoliciesFactories { get; set; } = [];

    internal InnerLoadBalancerAccessLoggingPolicyFactory AccessLoggingPolicyFactory { get; set; }

    internal InnerLoadBalancerConnectionDrainingPolicyFactory ConnectionDrainingPolicyFactory { get; set; }

    internal InnerLoadBalancerConnectionSettingsFactory ConnectionSettingsFactory { get; set; }

    internal InnerLoadBalancerHealthCheckFactory HealthCheckFactory { get; set; }

    protected override Humidifier.ElasticLoadBalancing.LoadBalancer Create()
    {
        var loadBalancerResult = CreateLoadBalancer();
        factoryAction?.Invoke(loadBalancerResult);

        return loadBalancerResult;
    }

    private Humidifier.ElasticLoadBalancing.LoadBalancer CreateLoadBalancer()
    {
        var loadBalancerResult = new Humidifier.ElasticLoadBalancing.LoadBalancer
        {
            GivenName = InputResourceName,
        };

        return loadBalancerResult;
    }
    public override void CreateChildren(Humidifier.ElasticLoadBalancing.LoadBalancer result)
    {
        base.CreateChildren(result);

        result.AppCookieStickinessPolicy = AppCookieStickinessPolicyFactories.Any() ? AppCookieStickinessPolicyFactories.Select(x => x.Build()).ToList() : null;
        result.LBCookieStickinessPolicy = LBCookieStickinessPolicyFactories.Any() ? LBCookieStickinessPolicyFactories.Select(x => x.Build()).ToList() : null;
        result.Listeners = ListenersFactories.Any() ? ListenersFactories.Select(x => x.Build()).ToList() : null;
        result.Policies = PoliciesFactories.Any() ? PoliciesFactories.Select(x => x.Build()).ToList() : null;
        result.AccessLoggingPolicy ??= AccessLoggingPolicyFactory?.Build();
        result.ConnectionDrainingPolicy ??= ConnectionDrainingPolicyFactory?.Build();
        result.ConnectionSettings ??= ConnectionSettingsFactory?.Build();
        result.HealthCheck ??= HealthCheckFactory?.Build();
    }

} // End Of Class

public static class LoadBalancerFactoryExtensions
{
    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null)
    {
        var factory = new InnerLoadBalancerAppCookieStickinessPolicyFactory(subFactoryAction);
        parentFactory.AppCookieStickinessPolicyFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null)
    {
        var factory = new InnerLoadBalancerLBCookieStickinessPolicyFactory(subFactoryAction);
        parentFactory.LBCookieStickinessPolicyFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerListenersFactory> WithListeners(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null)
    {
        var factory = new InnerLoadBalancerListenersFactory(subFactoryAction);
        parentFactory.ListenersFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerPoliciesFactory> WithPolicies(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null)
    {
        var factory = new InnerLoadBalancerPoliciesFactory(subFactoryAction);
        parentFactory.PoliciesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null)
    {
        parentFactory.AccessLoggingPolicyFactory = new InnerLoadBalancerAccessLoggingPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AccessLoggingPolicyFactory);
    }

    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null)
    {
        parentFactory.ConnectionDrainingPolicyFactory = new InnerLoadBalancerConnectionDrainingPolicyFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConnectionDrainingPolicyFactory);
    }

    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null)
    {
        parentFactory.ConnectionSettingsFactory = new InnerLoadBalancerConnectionSettingsFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConnectionSettingsFactory);
    }

    public static CombinedResult<LoadBalancerFactory, InnerLoadBalancerHealthCheckFactory> WithHealthCheck(this LoadBalancerFactory parentFactory, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null)
    {
        parentFactory.HealthCheckFactory = new InnerLoadBalancerHealthCheckFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.HealthCheckFactory);
    }

    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerAppCookieStickinessPolicyFactory> WithAppCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AppCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAppCookieStickinessPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerLBCookieStickinessPolicyFactory> WithLBCookieStickinessPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.LBCookieStickinessPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLBCookieStickinessPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerListenersFactory> WithListeners<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, WithListeners(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerListenersFactory> WithListeners<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, WithListeners(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerListenersFactory> WithListeners<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerListenersFactory> WithListeners<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerListenersFactory> WithListeners<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerListenersFactory> WithListeners<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Listeners> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithListeners(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerPoliciesFactory> WithPolicies<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, WithPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerPoliciesFactory> WithPolicies<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, WithPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerPoliciesFactory> WithPolicies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.Policies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPolicies(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerAccessLoggingPolicyFactory> WithAccessLoggingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.AccessLoggingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessLoggingPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerConnectionDrainingPolicyFactory> WithConnectionDrainingPolicy<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionDrainingPolicy> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionDrainingPolicy(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionSettings(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionSettings(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerConnectionSettingsFactory> WithConnectionSettings<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.ConnectionSettings> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionSettings(combinedResult.T5, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1>(this CombinedResult<LoadBalancerFactory, T1> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1>(this CombinedResult<T1, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<LoadBalancerFactory, T1, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<T1, LoadBalancerFactory, T2> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2>(this CombinedResult<T1, T2, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<LoadBalancerFactory, T1, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, LoadBalancerFactory, T2, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, T2, LoadBalancerFactory, T3> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3>(this CombinedResult<T1, T2, T3, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T4, subFactoryAction));
    public static CombinedResult<LoadBalancerFactory, T1, T2, T3, T4, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<LoadBalancerFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, LoadBalancerFactory, T2, T3, T4, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, LoadBalancerFactory, T2, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, LoadBalancerFactory, T3, T4, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, LoadBalancerFactory, T3, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, LoadBalancerFactory, T4, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, LoadBalancerFactory, T4> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, LoadBalancerFactory, InnerLoadBalancerHealthCheckFactory> WithHealthCheck<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, LoadBalancerFactory> combinedResult, Action<Humidifier.ElasticLoadBalancing.LoadBalancerTypes.HealthCheck> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHealthCheck(combinedResult.T5, subFactoryAction));
}
