// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.DataZone;

public class InnerDataSourceRedshiftStorageFactory(Action<Humidifier.DataZone.DataSourceTypes.RedshiftStorage> factoryAction = null) : SubResourceFactory<Humidifier.DataZone.DataSourceTypes.RedshiftStorage>
{

    internal InnerDataSourceRedshiftClusterStorageFactory RedshiftClusterSourceFactory { get; set; }

    internal InnerDataSourceRedshiftServerlessStorageFactory RedshiftServerlessSourceFactory { get; set; }

    protected override Humidifier.DataZone.DataSourceTypes.RedshiftStorage Create()
    {
        var redshiftStorageResult = CreateRedshiftStorage();
        factoryAction?.Invoke(redshiftStorageResult);

        return redshiftStorageResult;
    }

    private Humidifier.DataZone.DataSourceTypes.RedshiftStorage CreateRedshiftStorage()
    {
        var redshiftStorageResult = new Humidifier.DataZone.DataSourceTypes.RedshiftStorage();

        return redshiftStorageResult;
    }
    public override void CreateChildren(Humidifier.DataZone.DataSourceTypes.RedshiftStorage result)
    {
        base.CreateChildren(result);

        result.RedshiftClusterSource ??= RedshiftClusterSourceFactory?.Build();
        result.RedshiftServerlessSource ??= RedshiftServerlessSourceFactory?.Build();
    }

} // End Of Class

public static class InnerDataSourceRedshiftStorageFactoryExtensions
{
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource(this InnerDataSourceRedshiftStorageFactory parentFactory, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null)
    {
        parentFactory.RedshiftClusterSourceFactory = new InnerDataSourceRedshiftClusterStorageFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RedshiftClusterSourceFactory);
    }

    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource(this InnerDataSourceRedshiftStorageFactory parentFactory, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null)
    {
        parentFactory.RedshiftServerlessSourceFactory = new InnerDataSourceRedshiftServerlessStorageFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RedshiftServerlessSourceFactory);
    }

    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, T4, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3, T4>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, T4, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3, T4>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, T4, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, T4, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftClusterStorageFactory> WithRedshiftClusterSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftClusterStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftClusterSource(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, T4, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3, T4>(this CombinedResult<InnerDataSourceRedshiftStorageFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, T4, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3, T4>(this CombinedResult<T1, InnerDataSourceRedshiftStorageFactory, T2, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, T4, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDataSourceRedshiftStorageFactory, T3, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, T4, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDataSourceRedshiftStorageFactory, T4> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDataSourceRedshiftStorageFactory, InnerDataSourceRedshiftServerlessStorageFactory> WithRedshiftServerlessSource<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDataSourceRedshiftStorageFactory> combinedResult, Action<Humidifier.DataZone.DataSourceTypes.RedshiftServerlessStorage> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRedshiftServerlessSource(combinedResult.T5, subFactoryAction));
}
