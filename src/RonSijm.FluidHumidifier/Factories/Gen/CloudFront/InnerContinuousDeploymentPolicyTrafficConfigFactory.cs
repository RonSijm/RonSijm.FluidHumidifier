// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.CloudFront;

public class InnerContinuousDeploymentPolicyTrafficConfigFactory(Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig> factoryAction = null) : SubResourceFactory<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig>
{

    internal InnerContinuousDeploymentPolicySingleWeightConfigFactory SingleWeightConfigFactory { get; set; }

    internal InnerContinuousDeploymentPolicySingleHeaderConfigFactory SingleHeaderConfigFactory { get; set; }

    protected override Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig Create()
    {
        var trafficConfigResult = CreateTrafficConfig();
        factoryAction?.Invoke(trafficConfigResult);

        return trafficConfigResult;
    }

    private Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig CreateTrafficConfig()
    {
        var trafficConfigResult = new Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig();

        return trafficConfigResult;
    }
    public override void CreateChildren(Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.TrafficConfig result)
    {
        base.CreateChildren(result);

        result.SingleWeightConfig ??= SingleWeightConfigFactory?.Build();
        result.SingleHeaderConfig ??= SingleHeaderConfigFactory?.Build();
    }

} // End Of Class

public static class InnerContinuousDeploymentPolicyTrafficConfigFactoryExtensions
{
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig(this InnerContinuousDeploymentPolicyTrafficConfigFactory parentFactory, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null)
    {
        parentFactory.SingleWeightConfigFactory = new InnerContinuousDeploymentPolicySingleWeightConfigFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SingleWeightConfigFactory);
    }

    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig(this InnerContinuousDeploymentPolicyTrafficConfigFactory parentFactory, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null)
    {
        parentFactory.SingleHeaderConfigFactory = new InnerContinuousDeploymentPolicySingleHeaderConfigFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SingleHeaderConfigFactory);
    }

    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, T4, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3, T4>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, T4, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3, T4>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, T4, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, T4, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleWeightConfigFactory> WithSingleWeightConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleWeightConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleWeightConfig(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, T4, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3, T4>(this CombinedResult<InnerContinuousDeploymentPolicyTrafficConfigFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, T4, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3, T4>(this CombinedResult<T1, InnerContinuousDeploymentPolicyTrafficConfigFactory, T2, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, T4, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerContinuousDeploymentPolicyTrafficConfigFactory, T3, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, T4, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerContinuousDeploymentPolicyTrafficConfigFactory, T4> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerContinuousDeploymentPolicyTrafficConfigFactory, InnerContinuousDeploymentPolicySingleHeaderConfigFactory> WithSingleHeaderConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerContinuousDeploymentPolicyTrafficConfigFactory> combinedResult, Action<Humidifier.CloudFront.ContinuousDeploymentPolicyTypes.SingleHeaderConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSingleHeaderConfig(combinedResult.T5, subFactoryAction));
}
