// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.EC2;

public class NetworkInterfaceFactory(string resourceName = null, Action<Humidifier.EC2.NetworkInterface> factoryAction = null) : ResourceFactory<Humidifier.EC2.NetworkInterface>(resourceName)
{

    internal List<InnerNetworkInterfacePrivateIpAddressSpecificationFactory> PrivateIpAddressesFactories { get; set; } = [];

    internal List<InnerNetworkInterfaceIpv4PrefixSpecificationFactory> Ipv4PrefixesFactories { get; set; } = [];

    internal List<InnerNetworkInterfaceInstanceIpv6AddressFactory> Ipv6AddressesFactories { get; set; } = [];

    internal List<InnerNetworkInterfaceIpv6PrefixSpecificationFactory> Ipv6PrefixesFactories { get; set; } = [];

    internal InnerNetworkInterfaceConnectionTrackingSpecificationFactory ConnectionTrackingSpecificationFactory { get; set; }

    protected override Humidifier.EC2.NetworkInterface Create()
    {
        var networkInterfaceResult = CreateNetworkInterface();
        factoryAction?.Invoke(networkInterfaceResult);

        return networkInterfaceResult;
    }

    private Humidifier.EC2.NetworkInterface CreateNetworkInterface()
    {
        var networkInterfaceResult = new Humidifier.EC2.NetworkInterface
        {
            GivenName = InputResourceName,
        };

        return networkInterfaceResult;
    }
    public override void CreateChildren(Humidifier.EC2.NetworkInterface result)
    {
        base.CreateChildren(result);

        result.PrivateIpAddresses = PrivateIpAddressesFactories.Any() ? PrivateIpAddressesFactories.Select(x => x.Build()).ToList() : null;
        result.Ipv4Prefixes = Ipv4PrefixesFactories.Any() ? Ipv4PrefixesFactories.Select(x => x.Build()).ToList() : null;
        result.Ipv6Addresses = Ipv6AddressesFactories.Any() ? Ipv6AddressesFactories.Select(x => x.Build()).ToList() : null;
        result.Ipv6Prefixes = Ipv6PrefixesFactories.Any() ? Ipv6PrefixesFactories.Select(x => x.Build()).ToList() : null;
        result.ConnectionTrackingSpecification ??= ConnectionTrackingSpecificationFactory?.Build();
    }

} // End Of Class

public static class NetworkInterfaceFactoryExtensions
{
    public static CombinedResult<NetworkInterfaceFactory, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses(this NetworkInterfaceFactory parentFactory, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null)
    {
        var factory = new InnerNetworkInterfacePrivateIpAddressSpecificationFactory(subFactoryAction);
        parentFactory.PrivateIpAddressesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<NetworkInterfaceFactory, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes(this NetworkInterfaceFactory parentFactory, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null)
    {
        var factory = new InnerNetworkInterfaceIpv4PrefixSpecificationFactory(subFactoryAction);
        parentFactory.Ipv4PrefixesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<NetworkInterfaceFactory, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses(this NetworkInterfaceFactory parentFactory, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null)
    {
        var factory = new InnerNetworkInterfaceInstanceIpv6AddressFactory(subFactoryAction);
        parentFactory.Ipv6AddressesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<NetworkInterfaceFactory, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes(this NetworkInterfaceFactory parentFactory, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null)
    {
        var factory = new InnerNetworkInterfaceIpv6PrefixSpecificationFactory(subFactoryAction);
        parentFactory.Ipv6PrefixesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<NetworkInterfaceFactory, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification(this NetworkInterfaceFactory parentFactory, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null)
    {
        parentFactory.ConnectionTrackingSpecificationFactory = new InnerNetworkInterfaceConnectionTrackingSpecificationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ConnectionTrackingSpecificationFactory);
    }

    public static CombinedResult<NetworkInterfaceFactory, T1, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1>(this CombinedResult<NetworkInterfaceFactory, T1> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1>(this CombinedResult<T1, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2>(this CombinedResult<NetworkInterfaceFactory, T1, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2>(this CombinedResult<T1, NetworkInterfaceFactory, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2>(this CombinedResult<T1, T2, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T4, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3, T4>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3, T4>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory, InnerNetworkInterfacePrivateIpAddressSpecificationFactory> WithPrivateIpAddresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.PrivateIpAddressSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPrivateIpAddresses(combinedResult.T5, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1>(this CombinedResult<NetworkInterfaceFactory, T1> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1>(this CombinedResult<T1, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2>(this CombinedResult<NetworkInterfaceFactory, T1, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2>(this CombinedResult<T1, NetworkInterfaceFactory, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2>(this CombinedResult<T1, T2, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T4, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3, T4>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory, InnerNetworkInterfaceIpv4PrefixSpecificationFactory> WithIpv4Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv4PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv4Prefixes(combinedResult.T5, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1>(this CombinedResult<NetworkInterfaceFactory, T1> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1>(this CombinedResult<T1, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2>(this CombinedResult<NetworkInterfaceFactory, T1, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2>(this CombinedResult<T1, NetworkInterfaceFactory, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2>(this CombinedResult<T1, T2, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T4, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3, T4>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3, T4>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory, InnerNetworkInterfaceInstanceIpv6AddressFactory> WithIpv6Addresses<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.InstanceIpv6Address> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Addresses(combinedResult.T5, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1>(this CombinedResult<NetworkInterfaceFactory, T1> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1>(this CombinedResult<T1, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2>(this CombinedResult<NetworkInterfaceFactory, T1, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2>(this CombinedResult<T1, NetworkInterfaceFactory, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2>(this CombinedResult<T1, T2, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T4, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3, T4>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory, InnerNetworkInterfaceIpv6PrefixSpecificationFactory> WithIpv6Prefixes<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.Ipv6PrefixSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIpv6Prefixes(combinedResult.T5, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1>(this CombinedResult<NetworkInterfaceFactory, T1> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1>(this CombinedResult<T1, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T2, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2>(this CombinedResult<NetworkInterfaceFactory, T1, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2>(this CombinedResult<T1, NetworkInterfaceFactory, T2> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2>(this CombinedResult<T1, T2, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T3, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T4, subFactoryAction));
    public static CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3, T4>(this CombinedResult<NetworkInterfaceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3, T4>(this CombinedResult<T1, NetworkInterfaceFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3, T4>(this CombinedResult<T1, T2, NetworkInterfaceFactory, T3, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, NetworkInterfaceFactory, T4> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory, InnerNetworkInterfaceConnectionTrackingSpecificationFactory> WithConnectionTrackingSpecification<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, NetworkInterfaceFactory> combinedResult, Action<Humidifier.EC2.NetworkInterfaceTypes.ConnectionTrackingSpecification> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithConnectionTrackingSpecification(combinedResult.T5, subFactoryAction));
}
