// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.EC2;

public class InnerSpotFleetSpotFleetRequestConfigDataFactory(Action<Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData> factoryAction = null) : SubResourceFactory<Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData>
{

    internal InnerSpotFleetSpotMaintenanceStrategiesFactory SpotMaintenanceStrategiesFactory { get; set; }

    internal InnerSpotFleetLoadBalancersConfigFactory LoadBalancersConfigFactory { get; set; }

    protected override Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData Create()
    {
        var spotFleetRequestConfigDataResult = CreateSpotFleetRequestConfigData();
        factoryAction?.Invoke(spotFleetRequestConfigDataResult);

        return spotFleetRequestConfigDataResult;
    }

    private Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData CreateSpotFleetRequestConfigData()
    {
        var spotFleetRequestConfigDataResult = new Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData();

        return spotFleetRequestConfigDataResult;
    }
    public override void CreateChildren(Humidifier.EC2.SpotFleetTypes.SpotFleetRequestConfigData result)
    {
        base.CreateChildren(result);

        result.SpotMaintenanceStrategies ??= SpotMaintenanceStrategiesFactory?.Build();
        result.LoadBalancersConfig ??= LoadBalancersConfigFactory?.Build();
    }

} // End Of Class

public static class InnerSpotFleetSpotFleetRequestConfigDataFactoryExtensions
{
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies(this InnerSpotFleetSpotFleetRequestConfigDataFactory parentFactory, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null)
    {
        parentFactory.SpotMaintenanceStrategiesFactory = new InnerSpotFleetSpotMaintenanceStrategiesFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SpotMaintenanceStrategiesFactory);
    }

    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig(this InnerSpotFleetSpotFleetRequestConfigDataFactory parentFactory, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null)
    {
        parentFactory.LoadBalancersConfigFactory = new InnerSpotFleetLoadBalancersConfigFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.LoadBalancersConfigFactory);
    }

    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, T4, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3, T4>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, T4, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3, T4>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, T4, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, T4, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetSpotMaintenanceStrategiesFactory> WithSpotMaintenanceStrategies<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.SpotMaintenanceStrategies> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSpotMaintenanceStrategies(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, T4, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3, T4>(this CombinedResult<InnerSpotFleetSpotFleetRequestConfigDataFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, T4, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3, T4>(this CombinedResult<T1, InnerSpotFleetSpotFleetRequestConfigDataFactory, T2, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, T4, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerSpotFleetSpotFleetRequestConfigDataFactory, T3, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, T4, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerSpotFleetSpotFleetRequestConfigDataFactory, T4> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerSpotFleetSpotFleetRequestConfigDataFactory, InnerSpotFleetLoadBalancersConfigFactory> WithLoadBalancersConfig<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerSpotFleetSpotFleetRequestConfigDataFactory> combinedResult, Action<Humidifier.EC2.SpotFleetTypes.LoadBalancersConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithLoadBalancersConfig(combinedResult.T5, subFactoryAction));
}
