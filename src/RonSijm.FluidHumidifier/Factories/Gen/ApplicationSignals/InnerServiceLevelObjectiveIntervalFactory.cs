// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.ApplicationSignals;

public class InnerServiceLevelObjectiveIntervalFactory(Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval> factoryAction = null) : SubResourceFactory<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval>
{

    internal InnerServiceLevelObjectiveRollingIntervalFactory RollingIntervalFactory { get; set; }

    internal InnerServiceLevelObjectiveCalendarIntervalFactory CalendarIntervalFactory { get; set; }

    protected override Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval Create()
    {
        var intervalResult = CreateInterval();
        factoryAction?.Invoke(intervalResult);

        return intervalResult;
    }

    private Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval CreateInterval()
    {
        var intervalResult = new Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval();

        return intervalResult;
    }
    public override void CreateChildren(Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.Interval result)
    {
        base.CreateChildren(result);

        result.RollingInterval ??= RollingIntervalFactory?.Build();
        result.CalendarInterval ??= CalendarIntervalFactory?.Build();
    }

} // End Of Class

public static class InnerServiceLevelObjectiveIntervalFactoryExtensions
{
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval(this InnerServiceLevelObjectiveIntervalFactory parentFactory, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null)
    {
        parentFactory.RollingIntervalFactory = new InnerServiceLevelObjectiveRollingIntervalFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RollingIntervalFactory);
    }

    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval(this InnerServiceLevelObjectiveIntervalFactory parentFactory, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null)
    {
        parentFactory.CalendarIntervalFactory = new InnerServiceLevelObjectiveCalendarIntervalFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.CalendarIntervalFactory);
    }

    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, WithRollingInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, WithRollingInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, T4, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3, T4>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, T4, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3, T4>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, T4, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, T4, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveRollingIntervalFactory> WithRollingInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.RollingInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRollingInterval(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, WithCalendarInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, WithCalendarInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, T4, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3, T4>(this CombinedResult<InnerServiceLevelObjectiveIntervalFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, T4, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3, T4>(this CombinedResult<T1, InnerServiceLevelObjectiveIntervalFactory, T2, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, T4, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerServiceLevelObjectiveIntervalFactory, T3, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, T4, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerServiceLevelObjectiveIntervalFactory, T4> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerServiceLevelObjectiveIntervalFactory, InnerServiceLevelObjectiveCalendarIntervalFactory> WithCalendarInterval<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerServiceLevelObjectiveIntervalFactory> combinedResult, Action<Humidifier.ApplicationSignals.ServiceLevelObjectiveTypes.CalendarInterval> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithCalendarInterval(combinedResult.T5, subFactoryAction));
}
