// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.ImageBuilder;

public class ImagePipelineFactory(string resourceName = null, Action<Humidifier.ImageBuilder.ImagePipeline> factoryAction = null) : ResourceFactory<Humidifier.ImageBuilder.ImagePipeline>(resourceName)
{

    internal List<InnerImagePipelineWorkflowConfigurationFactory> WorkflowsFactories { get; set; } = [];

    internal InnerImagePipelineImageScanningConfigurationFactory ImageScanningConfigurationFactory { get; set; }

    internal InnerImagePipelineScheduleFactory ScheduleFactory { get; set; }

    internal InnerImagePipelineImageTestsConfigurationFactory ImageTestsConfigurationFactory { get; set; }

    protected override Humidifier.ImageBuilder.ImagePipeline Create()
    {
        var imagePipelineResult = CreateImagePipeline();
        factoryAction?.Invoke(imagePipelineResult);

        return imagePipelineResult;
    }

    private Humidifier.ImageBuilder.ImagePipeline CreateImagePipeline()
    {
        var imagePipelineResult = new Humidifier.ImageBuilder.ImagePipeline
        {
            GivenName = InputResourceName,
        };

        return imagePipelineResult;
    }
    public override void CreateChildren(Humidifier.ImageBuilder.ImagePipeline result)
    {
        base.CreateChildren(result);

        result.Workflows = WorkflowsFactories.Any() ? WorkflowsFactories.Select(x => x.Build()).ToList() : null;
        result.ImageScanningConfiguration ??= ImageScanningConfigurationFactory?.Build();
        result.Schedule ??= ScheduleFactory?.Build();
        result.ImageTestsConfiguration ??= ImageTestsConfigurationFactory?.Build();
    }

} // End Of Class

public static class ImagePipelineFactoryExtensions
{
    public static CombinedResult<ImagePipelineFactory, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows(this ImagePipelineFactory parentFactory, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null)
    {
        var factory = new InnerImagePipelineWorkflowConfigurationFactory(subFactoryAction);
        parentFactory.WorkflowsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<ImagePipelineFactory, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration(this ImagePipelineFactory parentFactory, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null)
    {
        parentFactory.ImageScanningConfigurationFactory = new InnerImagePipelineImageScanningConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ImageScanningConfigurationFactory);
    }

    public static CombinedResult<ImagePipelineFactory, InnerImagePipelineScheduleFactory> WithSchedule(this ImagePipelineFactory parentFactory, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null)
    {
        parentFactory.ScheduleFactory = new InnerImagePipelineScheduleFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ScheduleFactory);
    }

    public static CombinedResult<ImagePipelineFactory, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration(this ImagePipelineFactory parentFactory, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null)
    {
        parentFactory.ImageTestsConfigurationFactory = new InnerImagePipelineImageTestsConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ImageTestsConfigurationFactory);
    }

    public static CombinedResult<ImagePipelineFactory, T1, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1>(this CombinedResult<ImagePipelineFactory, T1> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithWorkflows(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1>(this CombinedResult<T1, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithWorkflows(combinedResult.T2, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2>(this CombinedResult<ImagePipelineFactory, T1, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2>(this CombinedResult<T1, ImagePipelineFactory, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2>(this CombinedResult<T1, T2, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T3, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3>(this CombinedResult<ImagePipelineFactory, T1, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3>(this CombinedResult<T1, ImagePipelineFactory, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3>(this CombinedResult<T1, T2, ImagePipelineFactory, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3>(this CombinedResult<T1, T2, T3, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T4, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, T4, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3, T4>(this CombinedResult<ImagePipelineFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, T4, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3, T4>(this CombinedResult<T1, ImagePipelineFactory, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, T4, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3, T4>(this CombinedResult<T1, T2, ImagePipelineFactory, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, T4, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, ImagePipelineFactory, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, ImagePipelineFactory, InnerImagePipelineWorkflowConfigurationFactory> WithWorkflows<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.WorkflowConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithWorkflows(combinedResult.T5, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1>(this CombinedResult<ImagePipelineFactory, T1> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1>(this CombinedResult<T1, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2>(this CombinedResult<ImagePipelineFactory, T1, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2>(this CombinedResult<T1, ImagePipelineFactory, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2>(this CombinedResult<T1, T2, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3>(this CombinedResult<ImagePipelineFactory, T1, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3>(this CombinedResult<T1, ImagePipelineFactory, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, ImagePipelineFactory, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, T4, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3, T4>(this CombinedResult<ImagePipelineFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, T4, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, ImagePipelineFactory, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, T4, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, ImagePipelineFactory, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, T4, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, ImagePipelineFactory, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, ImagePipelineFactory, InnerImagePipelineImageScanningConfigurationFactory> WithImageScanningConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageScanningConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageScanningConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, InnerImagePipelineScheduleFactory> WithSchedule<T1>(this CombinedResult<ImagePipelineFactory, T1> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, InnerImagePipelineScheduleFactory> WithSchedule<T1>(this CombinedResult<T1, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<ImagePipelineFactory, T1, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<T1, ImagePipelineFactory, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2>(this CombinedResult<T1, T2, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<ImagePipelineFactory, T1, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, ImagePipelineFactory, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, T2, ImagePipelineFactory, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3>(this CombinedResult<T1, T2, T3, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T4, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, T4, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<ImagePipelineFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, T4, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, ImagePipelineFactory, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, T4, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, ImagePipelineFactory, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, T4, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, ImagePipelineFactory, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, ImagePipelineFactory, InnerImagePipelineScheduleFactory> WithSchedule<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.Schedule> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSchedule(combinedResult.T5, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1>(this CombinedResult<ImagePipelineFactory, T1> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1>(this CombinedResult<T1, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2>(this CombinedResult<ImagePipelineFactory, T1, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2>(this CombinedResult<T1, ImagePipelineFactory, T2> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2>(this CombinedResult<T1, T2, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3>(this CombinedResult<ImagePipelineFactory, T1, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3>(this CombinedResult<T1, ImagePipelineFactory, T2, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, ImagePipelineFactory, T3> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<ImagePipelineFactory, T1, T2, T3, T4, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3, T4>(this CombinedResult<ImagePipelineFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, ImagePipelineFactory, T2, T3, T4, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, ImagePipelineFactory, T2, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, ImagePipelineFactory, T3, T4, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, ImagePipelineFactory, T3, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, ImagePipelineFactory, T4, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, ImagePipelineFactory, T4> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, ImagePipelineFactory, InnerImagePipelineImageTestsConfigurationFactory> WithImageTestsConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, ImagePipelineFactory> combinedResult, Action<Humidifier.ImageBuilder.ImagePipelineTypes.ImageTestsConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithImageTestsConfiguration(combinedResult.T5, subFactoryAction));
}
