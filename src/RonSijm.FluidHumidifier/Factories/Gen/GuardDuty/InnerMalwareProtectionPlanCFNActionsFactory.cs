// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.GuardDuty;

public class InnerMalwareProtectionPlanCFNActionsFactory(Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions> factoryAction = null) : SubResourceFactory<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions>
{

    internal InnerMalwareProtectionPlanCFNTaggingFactory TaggingFactory { get; set; }

    protected override Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions Create()
    {
        var cFNActionsResult = CreateCFNActions();
        factoryAction?.Invoke(cFNActionsResult);

        return cFNActionsResult;
    }

    private Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions CreateCFNActions()
    {
        var cFNActionsResult = new Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions();

        return cFNActionsResult;
    }
    public override void CreateChildren(Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNActions result)
    {
        base.CreateChildren(result);

        result.Tagging ??= TaggingFactory?.Build();
    }

} // End Of Class

public static class InnerMalwareProtectionPlanCFNActionsFactoryExtensions
{
    public static CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging(this InnerMalwareProtectionPlanCFNActionsFactory parentFactory, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null)
    {
        parentFactory.TaggingFactory = new InnerMalwareProtectionPlanCFNTaggingFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.TaggingFactory);
    }

    public static CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1>(this CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, WithTagging(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1>(this CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, WithTagging(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2>(this CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2>(this CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2>(this CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2, T3, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3>(this CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2, T3> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2, T3, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3>(this CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2, T3> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory, T3, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3>(this CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory, T3> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerMalwareProtectionPlanCFNActionsFactory, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerMalwareProtectionPlanCFNActionsFactory> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2, T3, T4, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3, T4>(this CombinedResult<InnerMalwareProtectionPlanCFNActionsFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2, T3, T4, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3, T4>(this CombinedResult<T1, InnerMalwareProtectionPlanCFNActionsFactory, T2, T3, T4> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory, T3, T4, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerMalwareProtectionPlanCFNActionsFactory, T3, T4> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerMalwareProtectionPlanCFNActionsFactory, T4, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerMalwareProtectionPlanCFNActionsFactory, T4> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerMalwareProtectionPlanCFNActionsFactory, InnerMalwareProtectionPlanCFNTaggingFactory> WithTagging<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerMalwareProtectionPlanCFNActionsFactory> combinedResult, Action<Humidifier.GuardDuty.MalwareProtectionPlanTypes.CFNTagging> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithTagging(combinedResult.T5, subFactoryAction));
}
