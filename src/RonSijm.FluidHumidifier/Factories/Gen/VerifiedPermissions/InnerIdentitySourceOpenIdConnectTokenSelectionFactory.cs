// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.VerifiedPermissions;

public class InnerIdentitySourceOpenIdConnectTokenSelectionFactory(Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection> factoryAction = null) : SubResourceFactory<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection>
{

    internal InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory AccessTokenOnlyFactory { get; set; }

    internal InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory IdentityTokenOnlyFactory { get; set; }

    protected override Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection Create()
    {
        var openIdConnectTokenSelectionResult = CreateOpenIdConnectTokenSelection();
        factoryAction?.Invoke(openIdConnectTokenSelectionResult);

        return openIdConnectTokenSelectionResult;
    }

    private Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection CreateOpenIdConnectTokenSelection()
    {
        var openIdConnectTokenSelectionResult = new Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection();

        return openIdConnectTokenSelectionResult;
    }
    public override void CreateChildren(Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectTokenSelection result)
    {
        base.CreateChildren(result);

        result.AccessTokenOnly ??= AccessTokenOnlyFactory?.Build();
        result.IdentityTokenOnly ??= IdentityTokenOnlyFactory?.Build();
    }

} // End Of Class

public static class InnerIdentitySourceOpenIdConnectTokenSelectionFactoryExtensions
{
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly(this InnerIdentitySourceOpenIdConnectTokenSelectionFactory parentFactory, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null)
    {
        parentFactory.AccessTokenOnlyFactory = new InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.AccessTokenOnlyFactory);
    }

    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly(this InnerIdentitySourceOpenIdConnectTokenSelectionFactory parentFactory, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null)
    {
        parentFactory.IdentityTokenOnlyFactory = new InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.IdentityTokenOnlyFactory);
    }

    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3, T4>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, T4, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, T4, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T4, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectAccessTokenConfigurationFactory> WithAccessTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectAccessTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithAccessTokenOnly(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3, T4>(this CombinedResult<InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, T4, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T2, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, T4, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T3, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T4, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, T4> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectTokenSelectionFactory, InnerIdentitySourceOpenIdConnectIdentityTokenConfigurationFactory> WithIdentityTokenOnly<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerIdentitySourceOpenIdConnectTokenSelectionFactory> combinedResult, Action<Humidifier.VerifiedPermissions.IdentitySourceTypes.OpenIdConnectIdentityTokenConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithIdentityTokenOnly(combinedResult.T5, subFactoryAction));
}
