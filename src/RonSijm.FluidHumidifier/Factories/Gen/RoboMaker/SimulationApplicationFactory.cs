// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.RoboMaker;

public class SimulationApplicationFactory(string resourceName = null, Action<Humidifier.RoboMaker.SimulationApplication> factoryAction = null) : ResourceFactory<Humidifier.RoboMaker.SimulationApplication>(resourceName)
{

    internal List<InnerSimulationApplicationSourceConfigFactory> SourcesFactories { get; set; } = [];

    internal InnerSimulationApplicationRenderingEngineFactory RenderingEngineFactory { get; set; }

    internal InnerSimulationApplicationSimulationSoftwareSuiteFactory SimulationSoftwareSuiteFactory { get; set; }

    internal InnerSimulationApplicationRobotSoftwareSuiteFactory RobotSoftwareSuiteFactory { get; set; }

    protected override Humidifier.RoboMaker.SimulationApplication Create()
    {
        var simulationApplicationResult = CreateSimulationApplication();
        factoryAction?.Invoke(simulationApplicationResult);

        return simulationApplicationResult;
    }

    private Humidifier.RoboMaker.SimulationApplication CreateSimulationApplication()
    {
        var simulationApplicationResult = new Humidifier.RoboMaker.SimulationApplication
        {
            GivenName = InputResourceName,
        };

        return simulationApplicationResult;
    }
    public override void CreateChildren(Humidifier.RoboMaker.SimulationApplication result)
    {
        base.CreateChildren(result);

        result.Sources = SourcesFactories.Any() ? SourcesFactories.Select(x => x.Build()).ToList() : null;
        result.RenderingEngine ??= RenderingEngineFactory?.Build();
        result.SimulationSoftwareSuite ??= SimulationSoftwareSuiteFactory?.Build();
        result.RobotSoftwareSuite ??= RobotSoftwareSuiteFactory?.Build();
    }

} // End Of Class

public static class SimulationApplicationFactoryExtensions
{
    public static CombinedResult<SimulationApplicationFactory, InnerSimulationApplicationSourceConfigFactory> WithSources(this SimulationApplicationFactory parentFactory, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null)
    {
        var factory = new InnerSimulationApplicationSourceConfigFactory(subFactoryAction);
        parentFactory.SourcesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<SimulationApplicationFactory, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine(this SimulationApplicationFactory parentFactory, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null)
    {
        parentFactory.RenderingEngineFactory = new InnerSimulationApplicationRenderingEngineFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RenderingEngineFactory);
    }

    public static CombinedResult<SimulationApplicationFactory, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite(this SimulationApplicationFactory parentFactory, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null)
    {
        parentFactory.SimulationSoftwareSuiteFactory = new InnerSimulationApplicationSimulationSoftwareSuiteFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SimulationSoftwareSuiteFactory);
    }

    public static CombinedResult<SimulationApplicationFactory, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite(this SimulationApplicationFactory parentFactory, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null)
    {
        parentFactory.RobotSoftwareSuiteFactory = new InnerSimulationApplicationRobotSoftwareSuiteFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.RobotSoftwareSuiteFactory);
    }

    public static CombinedResult<SimulationApplicationFactory, T1, InnerSimulationApplicationSourceConfigFactory> WithSources<T1>(this CombinedResult<SimulationApplicationFactory, T1> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSources(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, InnerSimulationApplicationSourceConfigFactory> WithSources<T1>(this CombinedResult<T1, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, WithSources(combinedResult.T2, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2>(this CombinedResult<SimulationApplicationFactory, T1, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2>(this CombinedResult<T1, SimulationApplicationFactory, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2>(this CombinedResult<T1, T2, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T3, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T4, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3, T4>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3, T4>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3, T4>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory, InnerSimulationApplicationSourceConfigFactory> WithSources<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SourceConfig> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSources(combinedResult.T5, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1>(this CombinedResult<SimulationApplicationFactory, T1> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, WithRenderingEngine(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1>(this CombinedResult<T1, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, WithRenderingEngine(combinedResult.T2, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2>(this CombinedResult<SimulationApplicationFactory, T1, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2>(this CombinedResult<T1, SimulationApplicationFactory, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2>(this CombinedResult<T1, T2, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T3, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T4, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3, T4>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3, T4>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3, T4>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory, InnerSimulationApplicationRenderingEngineFactory> WithRenderingEngine<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RenderingEngine> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRenderingEngine(combinedResult.T5, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1>(this CombinedResult<SimulationApplicationFactory, T1> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1>(this CombinedResult<T1, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2>(this CombinedResult<SimulationApplicationFactory, T1, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2>(this CombinedResult<T1, SimulationApplicationFactory, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2>(this CombinedResult<T1, T2, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T4, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory, InnerSimulationApplicationSimulationSoftwareSuiteFactory> WithSimulationSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.SimulationSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSimulationSoftwareSuite(combinedResult.T5, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1>(this CombinedResult<SimulationApplicationFactory, T1> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1>(this CombinedResult<T1, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2>(this CombinedResult<SimulationApplicationFactory, T1, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2>(this CombinedResult<T1, SimulationApplicationFactory, T2> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2>(this CombinedResult<T1, T2, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T4, subFactoryAction));
    public static CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<SimulationApplicationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, SimulationApplicationFactory, T2, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, SimulationApplicationFactory, T3, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, SimulationApplicationFactory, T4> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory, InnerSimulationApplicationRobotSoftwareSuiteFactory> WithRobotSoftwareSuite<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, SimulationApplicationFactory> combinedResult, Action<Humidifier.RoboMaker.SimulationApplicationTypes.RobotSoftwareSuite> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithRobotSoftwareSuite(combinedResult.T5, subFactoryAction));
}
