// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Bedrock;

public class AgentFactory(string resourceName = null, Action<Humidifier.Bedrock.Agent> factoryAction = null) : ResourceFactory<Humidifier.Bedrock.Agent>(resourceName)
{

    internal List<InnerAgentAgentKnowledgeBaseFactory> KnowledgeBasesFactories { get; set; } = [];

    internal List<InnerAgentAgentActionGroupFactory> ActionGroupsFactories { get; set; } = [];

    internal InnerAgentGuardrailConfigurationFactory GuardrailConfigurationFactory { get; set; }

    internal InnerAgentPromptOverrideConfigurationFactory PromptOverrideConfigurationFactory { get; set; }

    protected override Humidifier.Bedrock.Agent Create()
    {
        var agentResult = CreateAgent();
        factoryAction?.Invoke(agentResult);

        return agentResult;
    }

    private Humidifier.Bedrock.Agent CreateAgent()
    {
        var agentResult = new Humidifier.Bedrock.Agent
        {
            GivenName = InputResourceName,
        };

        return agentResult;
    }
    public override void CreateChildren(Humidifier.Bedrock.Agent result)
    {
        base.CreateChildren(result);

        result.KnowledgeBases = KnowledgeBasesFactories.Any() ? KnowledgeBasesFactories.Select(x => x.Build()).ToList() : null;
        result.ActionGroups = ActionGroupsFactories.Any() ? ActionGroupsFactories.Select(x => x.Build()).ToList() : null;
        result.GuardrailConfiguration ??= GuardrailConfigurationFactory?.Build();
        result.PromptOverrideConfiguration ??= PromptOverrideConfigurationFactory?.Build();
    }

} // End Of Class

public static class AgentFactoryExtensions
{
    public static CombinedResult<AgentFactory, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases(this AgentFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null)
    {
        var factory = new InnerAgentAgentKnowledgeBaseFactory(subFactoryAction);
        parentFactory.KnowledgeBasesFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<AgentFactory, InnerAgentAgentActionGroupFactory> WithActionGroups(this AgentFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null)
    {
        var factory = new InnerAgentAgentActionGroupFactory(subFactoryAction);
        parentFactory.ActionGroupsFactories.Add(factory);
        return CombinedResultFactory.Create(parentFactory, factory);
    }
    public static CombinedResult<AgentFactory, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration(this AgentFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null)
    {
        parentFactory.GuardrailConfigurationFactory = new InnerAgentGuardrailConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.GuardrailConfigurationFactory);
    }

    public static CombinedResult<AgentFactory, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration(this AgentFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null)
    {
        parentFactory.PromptOverrideConfigurationFactory = new InnerAgentPromptOverrideConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.PromptOverrideConfigurationFactory);
    }

    public static CombinedResult<AgentFactory, T1, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1>(this CombinedResult<AgentFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1>(this CombinedResult<T1, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T2, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2>(this CombinedResult<AgentFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2>(this CombinedResult<T1, AgentFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2>(this CombinedResult<T1, T2, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T3, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3>(this CombinedResult<AgentFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3>(this CombinedResult<T1, AgentFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3>(this CombinedResult<T1, T2, AgentFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3>(this CombinedResult<T1, T2, T3, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T4, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, T4, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3, T4>(this CombinedResult<AgentFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, T4, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3, T4>(this CombinedResult<T1, AgentFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, T4, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3, T4>(this CombinedResult<T1, T2, AgentFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, T4, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, AgentFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, AgentFactory, InnerAgentAgentKnowledgeBaseFactory> WithKnowledgeBases<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentKnowledgeBase> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithKnowledgeBases(combinedResult.T5, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, InnerAgentAgentActionGroupFactory> WithActionGroups<T1>(this CombinedResult<AgentFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, WithActionGroups(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, InnerAgentAgentActionGroupFactory> WithActionGroups<T1>(this CombinedResult<T1, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, WithActionGroups(combinedResult.T2, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2>(this CombinedResult<AgentFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2>(this CombinedResult<T1, AgentFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2>(this CombinedResult<T1, T2, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T3, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3>(this CombinedResult<AgentFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3>(this CombinedResult<T1, AgentFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3>(this CombinedResult<T1, T2, AgentFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3>(this CombinedResult<T1, T2, T3, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T4, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, T4, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3, T4>(this CombinedResult<AgentFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, T4, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3, T4>(this CombinedResult<T1, AgentFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, T4, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3, T4>(this CombinedResult<T1, T2, AgentFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, T4, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, AgentFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, AgentFactory, InnerAgentAgentActionGroupFactory> WithActionGroups<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroups(combinedResult.T5, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1>(this CombinedResult<AgentFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1>(this CombinedResult<T1, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2>(this CombinedResult<AgentFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2>(this CombinedResult<T1, AgentFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2>(this CombinedResult<T1, T2, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3>(this CombinedResult<AgentFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3>(this CombinedResult<T1, AgentFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, AgentFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, T4, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3, T4>(this CombinedResult<AgentFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, T4, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, AgentFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, T4, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, AgentFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, T4, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, AgentFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, AgentFactory, InnerAgentGuardrailConfigurationFactory> WithGuardrailConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.GuardrailConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithGuardrailConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1>(this CombinedResult<AgentFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1>(this CombinedResult<T1, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2>(this CombinedResult<AgentFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2>(this CombinedResult<T1, AgentFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2>(this CombinedResult<T1, T2, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3>(this CombinedResult<AgentFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3>(this CombinedResult<T1, AgentFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, AgentFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<AgentFactory, T1, T2, T3, T4, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3, T4>(this CombinedResult<AgentFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, AgentFactory, T2, T3, T4, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, AgentFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, AgentFactory, T3, T4, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, AgentFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, AgentFactory, T4, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, AgentFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, AgentFactory, InnerAgentPromptOverrideConfigurationFactory> WithPromptOverrideConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, AgentFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.PromptOverrideConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithPromptOverrideConfiguration(combinedResult.T5, subFactoryAction));
}
