// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Bedrock;

public class InnerAgentAgentActionGroupFactory(Action<Humidifier.Bedrock.AgentTypes.AgentActionGroup> factoryAction = null) : SubResourceFactory<Humidifier.Bedrock.AgentTypes.AgentActionGroup>
{

    internal InnerAgentAPISchemaFactory ApiSchemaFactory { get; set; }

    internal InnerAgentFunctionSchemaFactory FunctionSchemaFactory { get; set; }

    internal InnerAgentActionGroupExecutorFactory ActionGroupExecutorFactory { get; set; }

    protected override Humidifier.Bedrock.AgentTypes.AgentActionGroup Create()
    {
        var agentActionGroupResult = CreateAgentActionGroup();
        factoryAction?.Invoke(agentActionGroupResult);

        return agentActionGroupResult;
    }

    private Humidifier.Bedrock.AgentTypes.AgentActionGroup CreateAgentActionGroup()
    {
        var agentActionGroupResult = new Humidifier.Bedrock.AgentTypes.AgentActionGroup();

        return agentActionGroupResult;
    }
    public override void CreateChildren(Humidifier.Bedrock.AgentTypes.AgentActionGroup result)
    {
        base.CreateChildren(result);

        result.ApiSchema ??= ApiSchemaFactory?.Build();
        result.FunctionSchema ??= FunctionSchemaFactory?.Build();
        result.ActionGroupExecutor ??= ActionGroupExecutorFactory?.Build();
    }

} // End Of Class

public static class InnerAgentAgentActionGroupFactoryExtensions
{
    public static CombinedResult<InnerAgentAgentActionGroupFactory, InnerAgentAPISchemaFactory> WithApiSchema(this InnerAgentAgentActionGroupFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null)
    {
        parentFactory.ApiSchemaFactory = new InnerAgentAPISchemaFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ApiSchemaFactory);
    }

    public static CombinedResult<InnerAgentAgentActionGroupFactory, InnerAgentFunctionSchemaFactory> WithFunctionSchema(this InnerAgentAgentActionGroupFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null)
    {
        parentFactory.FunctionSchemaFactory = new InnerAgentFunctionSchemaFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.FunctionSchemaFactory);
    }

    public static CombinedResult<InnerAgentAgentActionGroupFactory, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor(this InnerAgentAgentActionGroupFactory parentFactory, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null)
    {
        parentFactory.ActionGroupExecutorFactory = new InnerAgentActionGroupExecutorFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ActionGroupExecutorFactory);
    }

    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, InnerAgentAPISchemaFactory> WithApiSchema<T1>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithApiSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, InnerAgentAPISchemaFactory> WithApiSchema<T1>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithApiSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3, T4>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3, T4>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory, InnerAgentAPISchemaFactory> WithApiSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.APISchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithApiSchema(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithFunctionSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, WithFunctionSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3, T4>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3, T4>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory, InnerAgentFunctionSchemaFactory> WithFunctionSchema<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.FunctionSchema> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFunctionSchema(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3, T4>(this CombinedResult<InnerAgentAgentActionGroupFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3, T4>(this CombinedResult<T1, InnerAgentAgentActionGroupFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerAgentAgentActionGroupFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerAgentAgentActionGroupFactory, T4> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory, InnerAgentActionGroupExecutorFactory> WithActionGroupExecutor<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerAgentAgentActionGroupFactory> combinedResult, Action<Humidifier.Bedrock.AgentTypes.ActionGroupExecutor> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithActionGroupExecutor(combinedResult.T5, subFactoryAction));
}
