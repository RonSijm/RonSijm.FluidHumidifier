// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Bedrock;

public class InnerDataSourceChunkingConfigurationFactory(Action<Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration> factoryAction = null) : SubResourceFactory<Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration>
{

    internal InnerDataSourceFixedSizeChunkingConfigurationFactory FixedSizeChunkingConfigurationFactory { get; set; }

    internal InnerDataSourceSemanticChunkingConfigurationFactory SemanticChunkingConfigurationFactory { get; set; }

    internal InnerDataSourceHierarchicalChunkingConfigurationFactory HierarchicalChunkingConfigurationFactory { get; set; }

    protected override Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration Create()
    {
        var chunkingConfigurationResult = CreateChunkingConfiguration();
        factoryAction?.Invoke(chunkingConfigurationResult);

        return chunkingConfigurationResult;
    }

    private Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration CreateChunkingConfiguration()
    {
        var chunkingConfigurationResult = new Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration();

        return chunkingConfigurationResult;
    }
    public override void CreateChildren(Humidifier.Bedrock.DataSourceTypes.ChunkingConfiguration result)
    {
        base.CreateChildren(result);

        result.FixedSizeChunkingConfiguration ??= FixedSizeChunkingConfigurationFactory?.Build();
        result.SemanticChunkingConfiguration ??= SemanticChunkingConfigurationFactory?.Build();
        result.HierarchicalChunkingConfiguration ??= HierarchicalChunkingConfigurationFactory?.Build();
    }

} // End Of Class

public static class InnerDataSourceChunkingConfigurationFactoryExtensions
{
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration(this InnerDataSourceChunkingConfigurationFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null)
    {
        parentFactory.FixedSizeChunkingConfigurationFactory = new InnerDataSourceFixedSizeChunkingConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.FixedSizeChunkingConfigurationFactory);
    }

    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration(this InnerDataSourceChunkingConfigurationFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null)
    {
        parentFactory.SemanticChunkingConfigurationFactory = new InnerDataSourceSemanticChunkingConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.SemanticChunkingConfigurationFactory);
    }

    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration(this InnerDataSourceChunkingConfigurationFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null)
    {
        parentFactory.HierarchicalChunkingConfigurationFactory = new InnerDataSourceHierarchicalChunkingConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.HierarchicalChunkingConfigurationFactory);
    }

    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceFixedSizeChunkingConfigurationFactory> WithFixedSizeChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.FixedSizeChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithFixedSizeChunkingConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceSemanticChunkingConfigurationFactory> WithSemanticChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.SemanticChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithSemanticChunkingConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<InnerDataSourceChunkingConfigurationFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, InnerDataSourceChunkingConfigurationFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, InnerDataSourceChunkingConfigurationFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, InnerDataSourceChunkingConfigurationFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory, InnerDataSourceHierarchicalChunkingConfigurationFactory> WithHierarchicalChunkingConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, InnerDataSourceChunkingConfigurationFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.HierarchicalChunkingConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithHierarchicalChunkingConfiguration(combinedResult.T5, subFactoryAction));
}
