// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable RedundantNameQualifier

namespace RonSijm.FluidHumidifier.Factories.Bedrock;

public class DataSourceFactory(string resourceName = null, Action<Humidifier.Bedrock.DataSource> factoryAction = null) : ResourceFactory<Humidifier.Bedrock.DataSource>(resourceName)
{

    internal InnerDataSourceServerSideEncryptionConfigurationFactory ServerSideEncryptionConfigurationFactory { get; set; }

    internal InnerDataSourceVectorIngestionConfigurationFactory VectorIngestionConfigurationFactory { get; set; }

    internal InnerDataSourceDataSourceConfigurationFactory DataSourceConfigurationFactory { get; set; }

    protected override Humidifier.Bedrock.DataSource Create()
    {
        var dataSourceResult = CreateDataSource();
        factoryAction?.Invoke(dataSourceResult);

        return dataSourceResult;
    }

    private Humidifier.Bedrock.DataSource CreateDataSource()
    {
        var dataSourceResult = new Humidifier.Bedrock.DataSource
        {
            GivenName = InputResourceName,
        };

        return dataSourceResult;
    }
    public override void CreateChildren(Humidifier.Bedrock.DataSource result)
    {
        base.CreateChildren(result);

        result.ServerSideEncryptionConfiguration ??= ServerSideEncryptionConfigurationFactory?.Build();
        result.VectorIngestionConfiguration ??= VectorIngestionConfigurationFactory?.Build();
        result.DataSourceConfiguration ??= DataSourceConfigurationFactory?.Build();
    }

} // End Of Class

public static class DataSourceFactoryExtensions
{
    public static CombinedResult<DataSourceFactory, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration(this DataSourceFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null)
    {
        parentFactory.ServerSideEncryptionConfigurationFactory = new InnerDataSourceServerSideEncryptionConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.ServerSideEncryptionConfigurationFactory);
    }

    public static CombinedResult<DataSourceFactory, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration(this DataSourceFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null)
    {
        parentFactory.VectorIngestionConfigurationFactory = new InnerDataSourceVectorIngestionConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.VectorIngestionConfigurationFactory);
    }

    public static CombinedResult<DataSourceFactory, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration(this DataSourceFactory parentFactory, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null)
    {
        parentFactory.DataSourceConfigurationFactory = new InnerDataSourceDataSourceConfigurationFactory(subFactoryAction);
        return CombinedResultFactory.Create(parentFactory, parentFactory.DataSourceConfigurationFactory);
    }

    public static CombinedResult<DataSourceFactory, T1, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1>(this CombinedResult<DataSourceFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1>(this CombinedResult<T1, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2>(this CombinedResult<DataSourceFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2>(this CombinedResult<T1, DataSourceFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2>(this CombinedResult<T1, T2, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3>(this CombinedResult<DataSourceFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3>(this CombinedResult<T1, DataSourceFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, DataSourceFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, T4, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3, T4>(this CombinedResult<DataSourceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, T4, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, DataSourceFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, T4, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, DataSourceFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, T4, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, DataSourceFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, DataSourceFactory, InnerDataSourceServerSideEncryptionConfigurationFactory> WithServerSideEncryptionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.ServerSideEncryptionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithServerSideEncryptionConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1>(this CombinedResult<DataSourceFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1>(this CombinedResult<T1, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2>(this CombinedResult<DataSourceFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2>(this CombinedResult<T1, DataSourceFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2>(this CombinedResult<T1, T2, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3>(this CombinedResult<DataSourceFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3>(this CombinedResult<T1, DataSourceFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, DataSourceFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, T4, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3, T4>(this CombinedResult<DataSourceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, T4, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, DataSourceFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, T4, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, DataSourceFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, T4, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, DataSourceFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, DataSourceFactory, InnerDataSourceVectorIngestionConfigurationFactory> WithVectorIngestionConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.VectorIngestionConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithVectorIngestionConfiguration(combinedResult.T5, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1>(this CombinedResult<DataSourceFactory, T1> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1>(this CombinedResult<T1, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2>(this CombinedResult<DataSourceFactory, T1, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2>(this CombinedResult<T1, DataSourceFactory, T2> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2>(this CombinedResult<T1, T2, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3>(this CombinedResult<DataSourceFactory, T1, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3>(this CombinedResult<T1, DataSourceFactory, T2, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, DataSourceFactory, T3> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3>(this CombinedResult<T1, T2, T3, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<DataSourceFactory, T1, T2, T3, T4, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3, T4>(this CombinedResult<DataSourceFactory, T1, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T1, subFactoryAction));
    public static CombinedResult<T1, DataSourceFactory, T2, T3, T4, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, DataSourceFactory, T2, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T2, subFactoryAction));
    public static CombinedResult<T1, T2, DataSourceFactory, T3, T4, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, DataSourceFactory, T3, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T3, subFactoryAction));
    public static CombinedResult<T1, T2, T3, DataSourceFactory, T4, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, DataSourceFactory, T4> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T4, subFactoryAction));
    public static CombinedResult<T1, T2, T3, T4, DataSourceFactory, InnerDataSourceDataSourceConfigurationFactory> WithDataSourceConfiguration<T1, T2, T3, T4>(this CombinedResult<T1, T2, T3, T4, DataSourceFactory> combinedResult, Action<Humidifier.Bedrock.DataSourceTypes.DataSourceConfiguration> subFactoryAction = null) => new (combinedResult, combinedResult, combinedResult, combinedResult, combinedResult, WithDataSourceConfiguration(combinedResult.T5, subFactoryAction));
}
